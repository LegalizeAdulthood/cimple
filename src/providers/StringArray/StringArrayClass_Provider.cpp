/*

Copyright (c) 2003, 2004, 2005, 2006, Michael Brasher, Karl Schopmeyer

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
// Generated by genprov 1.2.4
#include "StringArrayClass_Provider.h"

CIMPLE_NAMESPACE_BEGIN

StringArrayClass_Provider::StringArrayClass_Provider()
{
}

StringArrayClass_Provider::~StringArrayClass_Provider()
{
}

Load_Status StringArrayClass_Provider::load()
{
    return LOAD_OK;
}

Unload_Status StringArrayClass_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status StringArrayClass_Provider::get_instance(
    const StringArrayClass* model,
    StringArrayClass*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status StringArrayClass_Provider::enum_instances(
    const StringArrayClass* model,
    Enum_Instances_Handler<StringArrayClass>* handler)
{
    StringArrayClass* inst = StringArrayClass::create();

    Array<String> a;
    a.append("Red");
    a.append("Green");
    a.append("Blue");
    inst->Colors.set(a);

    handler->handle(inst);

    return ENUM_INSTANCES_OK;
}

Create_Instance_Status StringArrayClass_Provider::create_instance(
    StringArrayClass* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status StringArrayClass_Provider::delete_instance(
    const StringArrayClass* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status StringArrayClass_Provider::modify_instance(
    const StringArrayClass* model,
    const StringArrayClass* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
