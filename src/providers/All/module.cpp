//==============================================================================
//
// PLEASE DO NOT EDIT; THIS FILE WAS AUTOMATICALLY GENERATED BY GENMOD 1.0.22
//
//==============================================================================

#include <cimple/cimple.h>
#include "All_Class_Provider.h"

using namespace cimple;

static int __cimple_All_Class_Provider_proc(
    const Registration* registration,
    int operation,
    void* arg0,
    void* arg1,
    void* arg2,
    void* arg3,
    void* arg4,
    void* arg5,
    void* arg6,
    void* arg7)
{
    typedef All_Class Class;
    typedef All_Class_Provider Provider;

    if (operation != OPERATION_INVOKE_METHOD)
        return Instance_Provider_Proc_T<Provider>::proc(registration,
            operation, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    Provider* provider = (Provider*)arg0;
    const Class* self = (const Class*)arg1;
    const char* meth_name = ((Instance*)arg2)->meta_class->name;

    if (strcasecmp(meth_name, "booleanReturn") == 0)
    {
        typedef All_Class_booleanReturn_method Method;
        Method* method = (Method*)arg2;
        return provider->booleanReturn(
            self,
            method->return_value);
    }

    if (strcasecmp(meth_name, "uint8Return") == 0)
    {
        typedef All_Class_uint8Return_method Method;
        Method* method = (Method*)arg2;
        return provider->uint8Return(
            self,
            method->return_value);
    }

    if (strcasecmp(meth_name, "sint8Return") == 0)
    {
        typedef All_Class_sint8Return_method Method;
        Method* method = (Method*)arg2;
        return provider->sint8Return(
            self,
            method->return_value);
    }

    if (strcasecmp(meth_name, "uint16Return") == 0)
    {
        typedef All_Class_uint16Return_method Method;
        Method* method = (Method*)arg2;
        return provider->uint16Return(
            self,
            method->return_value);
    }

    if (strcasecmp(meth_name, "sint16Return") == 0)
    {
        typedef All_Class_sint16Return_method Method;
        Method* method = (Method*)arg2;
        return provider->sint16Return(
            self,
            method->return_value);
    }

    if (strcasecmp(meth_name, "uint32Return") == 0)
    {
        typedef All_Class_uint32Return_method Method;
        Method* method = (Method*)arg2;
        return provider->uint32Return(
            self,
            method->return_value);
    }

    if (strcasecmp(meth_name, "sint32Return") == 0)
    {
        typedef All_Class_sint32Return_method Method;
        Method* method = (Method*)arg2;
        return provider->sint32Return(
            self,
            method->return_value);
    }

    if (strcasecmp(meth_name, "uint64Return") == 0)
    {
        typedef All_Class_uint64Return_method Method;
        Method* method = (Method*)arg2;
        return provider->uint64Return(
            self,
            method->return_value);
    }

    if (strcasecmp(meth_name, "sint64Return") == 0)
    {
        typedef All_Class_sint64Return_method Method;
        Method* method = (Method*)arg2;
        return provider->sint64Return(
            self,
            method->return_value);
    }

    if (strcasecmp(meth_name, "real32Return") == 0)
    {
        typedef All_Class_real32Return_method Method;
        Method* method = (Method*)arg2;
        return provider->real32Return(
            self,
            method->return_value);
    }

    if (strcasecmp(meth_name, "real64Return") == 0)
    {
        typedef All_Class_real64Return_method Method;
        Method* method = (Method*)arg2;
        return provider->real64Return(
            self,
            method->return_value);
    }

    if (strcasecmp(meth_name, "char16Return") == 0)
    {
        typedef All_Class_char16Return_method Method;
        Method* method = (Method*)arg2;
        return provider->char16Return(
            self,
            method->return_value);
    }

    if (strcasecmp(meth_name, "stringReturn") == 0)
    {
        typedef All_Class_stringReturn_method Method;
        Method* method = (Method*)arg2;
        return provider->stringReturn(
            self,
            method->return_value);
    }

    if (strcasecmp(meth_name, "datetimeReturn") == 0)
    {
        typedef All_Class_datetimeReturn_method Method;
        Method* method = (Method*)arg2;
        return provider->datetimeReturn(
            self,
            method->return_value);
    }

    if (strcasecmp(meth_name, "instanceReturn") == 0)
    {
        typedef All_Class_instanceReturn_method Method;
        Method* method = (Method*)arg2;
        return provider->instanceReturn(
            self,
            method->return_value);
    }

    if (strcasecmp(meth_name, "objectReturn") == 0)
    {
        typedef All_Class_objectReturn_method Method;
        Method* method = (Method*)arg2;
        return provider->objectReturn(
            self,
            method->return_value);
    }

    if (strcasecmp(meth_name, "booleanScalarParams") == 0)
    {
        typedef All_Class_booleanScalarParams_method Method;
        Method* method = (Method*)arg2;
        return provider->booleanScalarParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "uint8ScalarParams") == 0)
    {
        typedef All_Class_uint8ScalarParams_method Method;
        Method* method = (Method*)arg2;
        return provider->uint8ScalarParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "sint8ScalarParams") == 0)
    {
        typedef All_Class_sint8ScalarParams_method Method;
        Method* method = (Method*)arg2;
        return provider->sint8ScalarParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "uint16ScalarParams") == 0)
    {
        typedef All_Class_uint16ScalarParams_method Method;
        Method* method = (Method*)arg2;
        return provider->uint16ScalarParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "sint16ScalarParams") == 0)
    {
        typedef All_Class_sint16ScalarParams_method Method;
        Method* method = (Method*)arg2;
        return provider->sint16ScalarParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "uint32ScalarParams") == 0)
    {
        typedef All_Class_uint32ScalarParams_method Method;
        Method* method = (Method*)arg2;
        return provider->uint32ScalarParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "sint32ScalarParams") == 0)
    {
        typedef All_Class_sint32ScalarParams_method Method;
        Method* method = (Method*)arg2;
        return provider->sint32ScalarParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "uint64ScalarParams") == 0)
    {
        typedef All_Class_uint64ScalarParams_method Method;
        Method* method = (Method*)arg2;
        return provider->uint64ScalarParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "sint64ScalarParams") == 0)
    {
        typedef All_Class_sint64ScalarParams_method Method;
        Method* method = (Method*)arg2;
        return provider->sint64ScalarParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "real32ScalarParams") == 0)
    {
        typedef All_Class_real32ScalarParams_method Method;
        Method* method = (Method*)arg2;
        return provider->real32ScalarParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "real64ScalarParams") == 0)
    {
        typedef All_Class_real64ScalarParams_method Method;
        Method* method = (Method*)arg2;
        return provider->real64ScalarParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "char16ScalarParams") == 0)
    {
        typedef All_Class_char16ScalarParams_method Method;
        Method* method = (Method*)arg2;
        return provider->char16ScalarParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "stringScalarParams") == 0)
    {
        typedef All_Class_stringScalarParams_method Method;
        Method* method = (Method*)arg2;
        return provider->stringScalarParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "datetimeScalarParams") == 0)
    {
        typedef All_Class_datetimeScalarParams_method Method;
        Method* method = (Method*)arg2;
        return provider->datetimeScalarParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "objectScalarParams") == 0)
    {
        typedef All_Class_objectScalarParams_method Method;
        Method* method = (Method*)arg2;
        return provider->objectScalarParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "instanceScalarParams") == 0)
    {
        typedef All_Class_instanceScalarParams_method Method;
        Method* method = (Method*)arg2;
        return provider->instanceScalarParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "referenceScalarParams") == 0)
    {
        typedef All_Class_referenceScalarParams_method Method;
        Method* method = (Method*)arg2;
        return provider->referenceScalarParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "booleanArrayParams") == 0)
    {
        typedef All_Class_booleanArrayParams_method Method;
        Method* method = (Method*)arg2;
        return provider->booleanArrayParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "uint8ArrayParams") == 0)
    {
        typedef All_Class_uint8ArrayParams_method Method;
        Method* method = (Method*)arg2;
        return provider->uint8ArrayParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "sint8ArrayParams") == 0)
    {
        typedef All_Class_sint8ArrayParams_method Method;
        Method* method = (Method*)arg2;
        return provider->sint8ArrayParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "uint16ArrayParams") == 0)
    {
        typedef All_Class_uint16ArrayParams_method Method;
        Method* method = (Method*)arg2;
        return provider->uint16ArrayParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "sint16ArrayParams") == 0)
    {
        typedef All_Class_sint16ArrayParams_method Method;
        Method* method = (Method*)arg2;
        return provider->sint16ArrayParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "uint32ArrayParams") == 0)
    {
        typedef All_Class_uint32ArrayParams_method Method;
        Method* method = (Method*)arg2;
        return provider->uint32ArrayParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "sint32ArrayParams") == 0)
    {
        typedef All_Class_sint32ArrayParams_method Method;
        Method* method = (Method*)arg2;
        return provider->sint32ArrayParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "uint64ArrayParams") == 0)
    {
        typedef All_Class_uint64ArrayParams_method Method;
        Method* method = (Method*)arg2;
        return provider->uint64ArrayParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "sint64ArrayParams") == 0)
    {
        typedef All_Class_sint64ArrayParams_method Method;
        Method* method = (Method*)arg2;
        return provider->sint64ArrayParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "real32ArrayParams") == 0)
    {
        typedef All_Class_real32ArrayParams_method Method;
        Method* method = (Method*)arg2;
        return provider->real32ArrayParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "real64ArrayParams") == 0)
    {
        typedef All_Class_real64ArrayParams_method Method;
        Method* method = (Method*)arg2;
        return provider->real64ArrayParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "char16ArrayParams") == 0)
    {
        typedef All_Class_char16ArrayParams_method Method;
        Method* method = (Method*)arg2;
        return provider->char16ArrayParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "stringArrayParams") == 0)
    {
        typedef All_Class_stringArrayParams_method Method;
        Method* method = (Method*)arg2;
        return provider->stringArrayParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "datetimeArrayParams") == 0)
    {
        typedef All_Class_datetimeArrayParams_method Method;
        Method* method = (Method*)arg2;
        return provider->datetimeArrayParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "objectArrayParams") == 0)
    {
        typedef All_Class_objectArrayParams_method Method;
        Method* method = (Method*)arg2;
        return provider->objectArrayParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "instanceArrayParams") == 0)
    {
        typedef All_Class_instanceArrayParams_method Method;
        Method* method = (Method*)arg2;
        return provider->instanceArrayParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    if (strcasecmp(meth_name, "referenceArrayParams") == 0)
    {
        typedef All_Class_referenceArrayParams_method Method;
        Method* method = (Method*)arg2;
        return provider->referenceArrayParams(
            self,
            method->p1,
            method->p2,
            method->return_value);
    }

    return -1;
}

CIMPLE_MODULE(EA_Module);
CIMPLE_INSTANCE_PROVIDER(All_Class_Provider);

#ifdef CIMPLE_PEGASUS_MODULE
  CIMPLE_PEGASUS_PROVIDER_ENTRY_POINT;
# define __CIMPLE_FOUND_ENTRY_POINT
#endif

#ifdef CIMPLE_CMPI_MODULE
  CIMPLE_CMPI_INSTANCE_PROVIDER(All_Class_Provider);
# define __CIMPLE_FOUND_ENTRY_POINT
#endif

#ifdef CIMPLE_OPENWBEM_MODULE
  CIMPLE_OPENWBEM_PROVIDER(EA_Module);
# define __CIMPLE_FOUND_ENTRY_POINT
#endif

#ifndef __CIMPLE_FOUND_ENTRY_POINT
# error "No provider entry point found. Please define one of the following: CIMPLE_PEGASUS_MODULE, CIMPLE_CMPI_MODULE, CIMPLE_OPENWBEM_MODULE"
#endif
