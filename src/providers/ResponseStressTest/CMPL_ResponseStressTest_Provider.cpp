// Generated by genprov 2.1.0
#include "CMPL_ResponseStressTest_Provider.h"

CIMPLE_NAMESPACE_BEGIN

// String pattern used to build up size in response instances
String pattern = "abcdefghighjklmnopqrstuvwxyz01234567890";
String _buildString(uint64 size, const String& pattern)
{
    String rtn;
    for (uint32 i = 0; i <= pattern.size(); i++)
    {
        rtn.append(pattern);
    }
    return(rtn);
}

CMPL_ResponseStressTest_Provider::CMPL_ResponseStressTest_Provider()
{
    // set default sizes. TODO. Should be value from class.
    _size = 150;
    _responseCount = 100;
}

CMPL_ResponseStressTest_Provider::~CMPL_ResponseStressTest_Provider()
{
}

Load_Status CMPL_ResponseStressTest_Provider::load()
{
    return LOAD_OK;
}

Unload_Status CMPL_ResponseStressTest_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status CMPL_ResponseStressTest_Provider::get_instance(
    const CMPL_ResponseStressTest* model,
    CMPL_ResponseStressTest*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status CMPL_ResponseStressTest_Provider::enum_instances(
    const CMPL_ResponseStressTest* model,
    Enum_Instances_Handler<CMPL_ResponseStressTest>* handler)
{
    uint64 countDelivered = 0;
    String pad = _buildString(_size,pattern);

    uint64 startTime = Time::now();

    uint64 prevTime = startTime;

    for (uint32 i = 0; i < _responseCount ;)
    {
        uint64 currentTime = Time::now();
        // Build and deliver one instance
        CMPL_ResponseStressTest* instance = CMPL_ResponseStressTest::create();
        instance->Id.value = i++;
        instance->SequenceNumber.value = countDelivered++;
        instance->ResponseCount.value = _responseCount;
        instance->Pattern.value = pattern;
        instance->RequestedInstanceSize.value = _size;
        instance->S1.value = pad;
        instance->interval.value = (currentTime - prevTime);
        instance->totalTime.value = (currentTime - startTime);
        handler->handle(instance);

        // Update the current time
        prevTime = currentTime;
    }

    return ENUM_INSTANCES_OK;
}

Create_Instance_Status CMPL_ResponseStressTest_Provider::create_instance(
    CMPL_ResponseStressTest* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status CMPL_ResponseStressTest_Provider::delete_instance(
    const CMPL_ResponseStressTest* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status CMPL_ResponseStressTest_Provider::modify_instance(
    const CMPL_ResponseStressTest* model,
    const CMPL_ResponseStressTest* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Invoke_Method_Status CMPL_ResponseStressTest_Provider::set(
    const Property<uint64>& ResponseCount,
    const Property<uint64>& ResponseInstanceSize,
    Property<uint32>& return_value)
{
    if (ResponseCount.null == false)
    {
        _responseCount = ResponseCount.value;
    }
    if (ResponseInstanceSize.null == false)
    {
        _size = ResponseInstanceSize.value;
    }
    return_value.set(0);

    return INVOKE_METHOD_OK;
}

Invoke_Method_Status CMPL_ResponseStressTest_Provider::get(
    Property<uint64>& ResponseCount,
    Property<uint64>& ResponseInstanceSize,
    Property<uint32>& return_value)
{
    ResponseCount.set(_responseCount);
    ResponseInstanceSize.set(_size);
    return_value.set(0);

    return INVOKE_METHOD_OK;
}

Invoke_Method_Status CMPL_ResponseStressTest_Provider::stop(
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
