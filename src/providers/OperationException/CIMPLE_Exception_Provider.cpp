// Generated by genprov 2.0.1
#include "CIMPLE_Exception_Provider.h"

CIMPLE_NAMESPACE_BEGIN

CIMPLE_Exception_Provider::CIMPLE_Exception_Provider()
{
}

CIMPLE_Exception_Provider::~CIMPLE_Exception_Provider()
{
}

Load_Status CIMPLE_Exception_Provider::load()
{
    _exception = 0;
    return LOAD_OK;
}

Unload_Status CIMPLE_Exception_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status CIMPLE_Exception_Provider::get_instance(
    const CIMPLE_Exception* model,
    CIMPLE_Exception*& instance)
{
    //
    // if the default flag set, simple return unsupported
    // 
    
    if (_getInstanceDefault)
    {
        printf("get_instance using default return\n");
        return GET_INSTANCE_UNSUPPORTED;
    }

    //
    // Execute return code based on the current _exception code provided
    //

    Get_Instance_Status status = (Get_Instance_Status)_exception;

    printf("get_instance status = %u\n", status);

    switch (status)
    {
        case GET_INSTANCE_NOT_FOUND:
        case GET_INSTANCE_UNSUPPORTED:
        case GET_INSTANCE_ACCESS_DENIED:
        case GET_INSTANCE_FAILED:
        case GET_INSTANCE_INVALID_PARAMETER:
            return status;
            break;
        case GET_INSTANCE_OK:
            instance->Key.set(1);
            return GET_INSTANCE_OK;
            break;
    }
    printf("ERROR: get_instance received invalid code %u\n", _exception);
    return GET_INSTANCE_FAILED;
}

Enum_Instances_Status CIMPLE_Exception_Provider::enum_instances(
    const CIMPLE_Exception* model,
    Enum_Instances_Handler<CIMPLE_Exception>* handler)
{
    Enum_Instances_Status status = (Enum_Instances_Status)_exception;
    printf("get_instance status = %u\n", status);

    switch (status)
    {
        case ENUM_INSTANCES_OK:
        case ENUM_INSTANCES_FAILED:
        case ENUM_INSTANCES_ACCESS_DENIED:
            return status;
            break;
    }
    printf("enum_instance received invalid code %u\n", status);
    return ENUM_INSTANCES_FAILED;
}

Create_Instance_Status CIMPLE_Exception_Provider::create_instance(
    CIMPLE_Exception* instance)
{
    Create_Instance_Status status = (Create_Instance_Status)_exception;
    printf("create_instance status = %u\n", status);
    switch (status)
    {
        case CREATE_INSTANCE_OK:
        case CREATE_INSTANCE_DUPLICATE:
        case CREATE_INSTANCE_UNSUPPORTED:
        case CREATE_INSTANCE_INVALID_PARAMETER:
        case CREATE_INSTANCE_ACCESS_DENIED:
        case CREATE_INSTANCE_FAILED:
            return status;
            break;
    }
    printf("create_instance received invalid code %u\n", status);
    return CREATE_INSTANCE_FAILED;
}

Delete_Instance_Status CIMPLE_Exception_Provider::delete_instance(
    const CIMPLE_Exception* instance)
{
    printf("get_instance. send code %u\n", _exception);
    //return (Get_Instance_Status)_exception;
    Delete_Instance_Status status = (Delete_Instance_Status)_exception;
    printf("get_instance status = %u\n", status);
    switch (status)
    {
        case DELETE_INSTANCE_OK:
        case DELETE_INSTANCE_NOT_FOUND:
        case DELETE_INSTANCE_UNSUPPORTED:
        case DELETE_INSTANCE_ACCESS_DENIED:
        case DELETE_INSTANCE_FAILED:
            return status;
            break;
    }
    printf("delete_instance received invalid code %u\n", status);
    return DELETE_INSTANCE_FAILED;
}

Modify_Instance_Status CIMPLE_Exception_Provider::modify_instance(
    const CIMPLE_Exception* model,
    const CIMPLE_Exception* instance)
{
    Modify_Instance_Status status = (Modify_Instance_Status)_exception;
    printf("get_instance status = %u\n", status);
    switch (status)
    {
        case MODIFY_INSTANCE_NOT_FOUND:
        case MODIFY_INSTANCE_UNSUPPORTED:
        case MODIFY_INSTANCE_INVALID_PARAMETER:
        case MODIFY_INSTANCE_ACCESS_DENIED:
        case MODIFY_INSTANCE_OK:
        case MODIFY_INSTANCE_FAILED:
            return status;
            break;
     }
    printf("modify_instance received invalid code %u\n", status);
    return MODIFY_INSTANCE_FAILED;
}

const char * _print(boolean x)
{
    return(x? "true" : "false");
}
Invoke_Method_Status CIMPLE_Exception_Provider::setException(
    const CIMPLE_Exception* self,
    const Property<uint32>& Exception,
    const Property<boolean>& getInstanceDefault,
    const Property<boolean>& associatorsDefault,
    Property<uint32>& return_value)
{
    printf("Enter setException\n");
    _exception = Exception.value;

	_getInstanceDefault = getInstanceDefault.value;

 	_associatorsDefault = associatorsDefault.value;
   
    printf("setException  Exception Value = %u\n", _exception);
    printf("   getInstanceDefault Value = %s\n", _print(_getInstanceDefault));
    printf("   associatorsDefault Value = %s\n", _print(_associatorsDefault));

    CIMPLE_INFO(("setException  Exception Value = %u\n", _exception));
    return_value.set(0);
	
    return INVOKE_METHOD_OK;
}

Invoke_Method_Status CIMPLE_Exception_Provider::testException(
    const CIMPLE_Exception* self,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
