// Generated by genprov 2.0.1
#ifndef _CIMPLE_Exception_Provider_h
#define _CIMPLE_Exception_Provider_h

#include <cimple/cimple.h>
#include "CIMPLE_Exception.h"

CIMPLE_NAMESPACE_BEGIN

class CIMPLE_Exception_Provider
{
public:

    typedef CIMPLE_Exception Class;

    CIMPLE_Exception_Provider();

    ~CIMPLE_Exception_Provider();

    Load_Status load();

    Unload_Status unload();

    Get_Instance_Status get_instance(
        const CIMPLE_Exception* model,
        CIMPLE_Exception*& instance);

    Enum_Instances_Status enum_instances(
        const CIMPLE_Exception* model,
        Enum_Instances_Handler<CIMPLE_Exception>* handler);

    Create_Instance_Status create_instance(
        CIMPLE_Exception* instance);

    Delete_Instance_Status delete_instance(
        const CIMPLE_Exception* instance);

    Modify_Instance_Status modify_instance(
        const CIMPLE_Exception* model,
        const CIMPLE_Exception* instance);

    Invoke_Method_Status setException(
        const CIMPLE_Exception* self,
        const Property<uint32>& Exception,
        const Property<boolean>& getInstanceDefault,
        const Property<boolean>& associatorsDefault,
        Property<uint32>& return_value);

    Invoke_Method_Status testException(
        const CIMPLE_Exception* self,
        Property<uint32>& return_value);

    /*@END@*/

    // set true if we want to use the default NOT_SUPPORTED getInstance
    boolean _getInstanceDefault;

    boolean _associatorsDefault;

    uint32 _exception;
};

CIMPLE_NAMESPACE_END

#endif /* _CIMPLE_Exception_Provider_h */
