// Generated by genprov 2.0.1
#ifndef _CIMPLE_ExceptionLink_Provider_h
#define _CIMPLE_ExceptionLink_Provider_h

#include <cimple/cimple.h>
#include "CIMPLE_ExceptionLink.h"

CIMPLE_NAMESPACE_BEGIN

class CIMPLE_ExceptionLink_Provider
{
public:

    typedef CIMPLE_ExceptionLink Class;

    CIMPLE_ExceptionLink_Provider();

    ~CIMPLE_ExceptionLink_Provider();

    Load_Status load();

    Unload_Status unload();

    Get_Instance_Status get_instance(
        const CIMPLE_ExceptionLink* model,
        CIMPLE_ExceptionLink*& instance);

    Enum_Instances_Status enum_instances(
        const CIMPLE_ExceptionLink* model,
        Enum_Instances_Handler<CIMPLE_ExceptionLink>* handler);

    Create_Instance_Status create_instance(
        CIMPLE_ExceptionLink* instance);

    Delete_Instance_Status delete_instance(
        const CIMPLE_ExceptionLink* instance);

    Modify_Instance_Status modify_instance(
        const CIMPLE_ExceptionLink* model,
        const CIMPLE_ExceptionLink* instance);

    Enum_Associator_Names_Status enum_associator_names(
        const Instance* instance,
        const String& result_class,
        const String& role,
        const String& result_role,
        Enum_Associator_Names_Handler<Instance>* handler);

    Enum_Associators_Status enum_associators(
        const Instance* instance,
        const String& result_class,
        const String& role,
        const String& result_role,
        Enum_Associators_Handler<Instance>* handler);

    Enum_References_Status enum_references(
        const Instance* instance,
        const CIMPLE_ExceptionLink* model,
        const String& role,
        Enum_References_Handler<CIMPLE_ExceptionLink>* handler);

    Invoke_Method_Status setException(
        const CIMPLE_ExceptionLink* self,
        const Property<uint32>& Exception,
        const Property<boolean>& getInstanceDefault,
        const Property<boolean>& associatorsDefault,
        Property<uint32>& return_value);

    Invoke_Method_Status testException(
        const CIMPLE_ExceptionLink* self,
        Property<uint32>& return_value);

    /*@END@*/

    // set true if we want to use the default NOT_SUPPORTED getInstance
    boolean _getInstanceDefault;

    boolean _associatorsDefault;

    uint32 _exception;
};

CIMPLE_NAMESPACE_END

#endif /* _CIMPLE_ExceptionLink_Provider_h */
