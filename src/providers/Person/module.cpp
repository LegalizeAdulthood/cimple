//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENMOD.
//
//==============================================================================

#include <cimple/cimple.h>
#include "Person_Provider.h"
#include "PersonLink_Provider.h"
#include "Salesman_Provider.h"
#include "SalesmanLink_Provider.h"

using namespace cimple;

static int __cimple_Person_Provider_proc(
    const Registration* registration,
    int operation,
    void* arg0,
    void* arg1,
    void* arg2,
    void* arg3,
    void* arg4,
    void* arg5,
    void* arg6,
    void* arg7)
{
    typedef Person Class;
    typedef Person_Provider Provider;

    if (operation != OPERATION_INVOKE_METHOD)
        return Instance_Provider_Proc_T<Provider>::proc(registration,
            operation, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    Provider* provider = (Provider*)arg0;
    const Class* self = (const Class*)arg1;
    const char* meth_name = ((Instance*)arg2)->meta_class->name;

    return -1;
}

static int __cimple_PersonLink_Provider_proc(
    const Registration* registration,
    int operation,
    void* arg0,
    void* arg1,
    void* arg2,
    void* arg3,
    void* arg4,
    void* arg5,
    void* arg6,
    void* arg7)
{
    typedef PersonLink Class;
    typedef PersonLink_Provider Provider;

    if (operation != OPERATION_INVOKE_METHOD)
        return Association_Provider_Proc_T<Provider>::proc(registration,
            operation, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    Provider* provider = (Provider*)arg0;
    const Class* self = (const Class*)arg1;
    const char* meth_name = ((Instance*)arg2)->meta_class->name;

    return -1;
}

static int __cimple_Salesman_Provider_proc(
    const Registration* registration,
    int operation,
    void* arg0,
    void* arg1,
    void* arg2,
    void* arg3,
    void* arg4,
    void* arg5,
    void* arg6,
    void* arg7)
{
    typedef Salesman Class;
    typedef Salesman_Provider Provider;

    if (operation != OPERATION_INVOKE_METHOD)
        return Instance_Provider_Proc_T<Provider>::proc(registration,
            operation, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    Provider* provider = (Provider*)arg0;
    const Class* self = (const Class*)arg1;
    const char* meth_name = ((Instance*)arg2)->meta_class->name;

    return -1;
}

static int __cimple_SalesmanLink_Provider_proc(
    const Registration* registration,
    int operation,
    void* arg0,
    void* arg1,
    void* arg2,
    void* arg3,
    void* arg4,
    void* arg5,
    void* arg6,
    void* arg7)
{
    typedef SalesmanLink Class;
    typedef SalesmanLink_Provider Provider;

    if (operation != OPERATION_INVOKE_METHOD)
        return Association_Provider_Proc_T<Provider>::proc(registration,
            operation, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    Provider* provider = (Provider*)arg0;
    const Class* self = (const Class*)arg1;
    const char* meth_name = ((Instance*)arg2)->meta_class->name;

    return -1;
}

CIMPLE_MODULE(Person_Module);
CIMPLE_INSTANCE_PROVIDER(Person_Provider);
CIMPLE_ASSOCIATION_PROVIDER(PersonLink_Provider);
CIMPLE_INSTANCE_PROVIDER(Salesman_Provider);
CIMPLE_ASSOCIATION_PROVIDER(SalesmanLink_Provider);

#ifdef CIMPLE_PEGASUS_MODULE
  CIMPLE_PEGASUS_PROVIDER_ENTRY_POINT;
#endif

#ifdef CIMPLE_CMPI_MODULE
  CIMPLE_CMPI_INSTANCE_PROVIDER(Person_Provider);
  CIMPLE_CMPI_ASSOCIATION_PROVIDER(PersonLink_Provider);
  CIMPLE_CMPI_INSTANCE_PROVIDER(Salesman_Provider);
  CIMPLE_CMPI_ASSOCIATION_PROVIDER(SalesmanLink_Provider);
#endif

#ifdef CIMPLE_OPENWBEM_MODULE
  CIMPLE_OPENWBEM_PROVIDER(Person_Module);
#endif
