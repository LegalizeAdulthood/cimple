// Generated by genprov 1.2.5
#include "Widget_Provider.h"
#include "log.h"

CIMPLE_NAMESPACE_BEGIN

Widget_Provider::Widget_Provider()
{
}

Widget_Provider::~Widget_Provider()
{
}

Load_Status Widget_Provider::load()
{
    return LOAD_OK;
}

Unload_Status Widget_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status Widget_Provider::get_instance(
    const Widget* model,
    Widget*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status Widget_Provider::enum_instances(
    const Widget* model,
    Enum_Instances_Handler<Widget>* handler)
{
    // Widget.key=100
    {
        Widget* inst;
        inst = Widget::create();
        inst->key.set(100);
        handler->handle(inst);
    }

    // Widget.key=200
    {
        Widget* inst;
        inst = Widget::create();
        inst->key.set(200);
        handler->handle(inst);
    }

    // Widget.key=300
    {
        Widget* inst;
        inst = Widget::create();
        inst->key.set(300);
        handler->handle(inst);
    }

    return ENUM_INSTANCES_OK;
}

Create_Instance_Status Widget_Provider::create_instance(
    Widget* instance)
{
    if (instance->key.value == 100)
    {
        __log("Widget_Provider::create_instance(): okay");
        return CREATE_INSTANCE_OK;
    }

    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status Widget_Provider::delete_instance(
    const Widget* instance)
{
    if (instance->key.value == 100)
    {
        __log("Widget_Provider::delete_instance(): okay");
        return DELETE_INSTANCE_OK;
    }

    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status Widget_Provider::modify_instance(
    const Widget* model,
    const Widget* instance)
{
    if (instance->key.value == 100)
    {
        __log("Widget_Provider::modify_instance(): okay");
        return MODIFY_INSTANCE_OK;
    }

    return MODIFY_INSTANCE_UNSUPPORTED;
}

Invoke_Method_Status Widget_Provider::foo(
    const Property<uint32>& arg1,
    const Property<String>& arg2,
    Property<uint32>& arg3,
    Property<String>& arg4,
    Property<boolean>& return_value)
{
    __log("Widget_Provider::foo()\n");
    __log("arg1[%u]\n", arg1.value);
    __log("arg2[%s]\n", arg2.value.c_str());

    arg3.set(12345);
    arg4.set("Arg4");
    return_value.set(true);

    __log("arg3[%u]\n", arg3.value);
    __log("arg4[%s]\n", arg4.value.c_str());
    __log("return_value[%u]\n", (unsigned int)return_value.value);

    return INVOKE_METHOD_OK;
}

Invoke_Method_Status Widget_Provider::goo(
    const Widget* self,
    const Gadget* gin,
    Gadget*& gout,
    Property<uint32>& return_value)

{
    __log("Widget_Provider::goo()");

    if (self)
    {
        __log("Widget_Provider::goo(): self->key[%u]", self->key.value);
    }

    if (self)
    {
        __log("Widget_Provider::goo(): gin->key[%s]", gin->key.value.c_str());
    }

    gout = Gadget::create();
    gout->key.set("ORANGE");

    return_value.set(0);
    return INVOKE_METHOD_OK;
}

Invoke_Method_Status Widget_Provider::hoo(
    const Property< Array<Gadget*> >& gin,
    Property< Array<Gadget*> >& gout,
    Property<uint32>& return_value)

{
    if (gin.value.size() == 0)
    {
        return_value.set(1);
        return INVOKE_METHOD_OK;
    }

    for (size_t i = 0; i < gin.value.size(); i++)
    {
        const Gadget* g = gin.value[i];

        __log("Widget_Provider::hoo(): g->key[%s]", g->key.value.c_str());
    }

    {
        Gadget* g = Gadget::create();
        g->key.set("YELLOW");
        gout.value.append(g);
    }

    {
        Gadget* g = Gadget::create();
        g->key.set("ORANGE");
        gout.value.append(g);
    }


    return_value.set(0);
    return INVOKE_METHOD_OK;
}

/*@END@*/

CIMPLE_NAMESPACE_END
