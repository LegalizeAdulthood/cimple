// Generated by genprov 1.2.5
#include "Upcall_Provider.h"
#include "log.h"
#include "Widget.h"

CIMPLE_NAMESPACE_BEGIN

Upcall_Provider::Upcall_Provider()
{
}

Upcall_Provider::~Upcall_Provider()
{
}

Load_Status Upcall_Provider::load()
{
    return LOAD_OK;
}

Unload_Status Upcall_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status Upcall_Provider::get_instance(
    const Upcall* model,
    Upcall*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status Upcall_Provider::enum_instances(
    const Upcall* model,
    Enum_Instances_Handler<Upcall>* handler)
{
    Upcall* inst = Upcall::create();
    inst->key.set(100);
    handler->handle(inst);

    return ENUM_INSTANCES_OK;
}

Create_Instance_Status Upcall_Provider::create_instance(
    Upcall* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status Upcall_Provider::delete_instance(
    const Upcall* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status Upcall_Provider::modify_instance(
    const Upcall* model,
    const Upcall* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Invoke_Method_Status Upcall_Provider::upcalls(
    const Upcall* self,
    Property<uint32>& return_value)
{
    // Check identity of self:

    if (self->key.value != 100)
    {
        return_value.set(1);
        return INVOKE_METHOD_OK;
    }

    // cimom::enum_instances()

    Instance_Enumerator e;
    Widget* widget = Widget::create();
    uint32 sum = 0;

    if (cimom::enum_instances("root/default", widget, e) == 0)
    {
        for (; e; e++)
        {
            Ref<Instance> inst = e();

            Widget* w = cast<Widget*>(inst.ptr());

            if (w)
                sum += w->key.value;
        }
    }

    if (sum != 600)
    {
        return_value.set(2);
        return INVOKE_METHOD_OK;
    }

    // cimom::get_instance()

    widget->key.set(100);

    Ref<Instance> inst = cimom::get_instance("root/default", widget);

    if (!inst)
    {
        return_value.set(3);
        return INVOKE_METHOD_OK;
    }

    // cimom::delete_instance()

    if (cimom::delete_instance("root/default", widget) != 0)
    {
        return_value.set(4);
        return INVOKE_METHOD_OK;
    }

    // cimom::create_instance()

    if (cimom::create_instance("root/default", widget) != 0)
    {
        return_value.set(5);
        return INVOKE_METHOD_OK;
    }

    // cimom::modify_instance()

    if (cimom::modify_instance("root/default", widget) != 0)
    {
        return_value.set(6);
        return INVOKE_METHOD_OK;
    }

    // Success!

    return_value.set(0);
    return INVOKE_METHOD_OK;
}

/*@END@*/

CIMPLE_NAMESPACE_END
