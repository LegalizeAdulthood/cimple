// Generated by genprov 1.2.5
#include "Connector_Provider.h"

CIMPLE_NAMESPACE_BEGIN

Connector_Provider::Connector_Provider()
{
}

Connector_Provider::~Connector_Provider()
{
}

Load_Status Connector_Provider::load()
{
    return LOAD_OK;
}

Unload_Status Connector_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status Connector_Provider::get_instance(
    const Connector* model,
    Connector*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

static Connector* _make_connecdtor(const String& key1, uint32 key2)
{
    Gadget* left = Gadget::create();
    left->key.set(key1);

    Widget* right = Widget::create();
    right->key.set(key2);

    Connector* conn = Connector::create();
    conn->Left = left;
    conn->Right = right;

    return conn;
}

Enum_Instances_Status Connector_Provider::enum_instances(
    const Connector* model,
    Enum_Instances_Handler<Connector>* handler)
{
    handler->handle(_make_connecdtor("RED", 100));
    handler->handle(_make_connecdtor("GREEN", 200));
    handler->handle(_make_connecdtor("BLUE", 300));

    return ENUM_INSTANCES_OK;
}

Create_Instance_Status Connector_Provider::create_instance(
    Connector* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status Connector_Provider::delete_instance(
    const Connector* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status Connector_Provider::modify_instance(
    const Connector* model,
    const Connector* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Enum_Associator_Names_Status Connector_Provider::enum_associator_names(
    const Instance* instance,
    const String& result_class,
    const String& role,
    const String& result_role,
    Enum_Associator_Names_Handler<Instance>* handler)
{
    return ENUM_ASSOCIATOR_NAMES_UNSUPPORTED;
}

Enum_Associators_Status Connector_Provider::enum_associators(
    const Instance* instance,
    const String& result_class,
    const String& role,
    const String& result_role,
    Enum_Associators_Handler<Instance>* handler)
{
    return ENUM_ASSOCIATORS_UNSUPPORTED;
}

Enum_References_Status Connector_Provider::enum_references(
    const Instance* instance,
    const Connector* model,
    const String& role,
    Enum_References_Handler<Connector>* handler)
{
    return ENUM_REFERENCES_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
