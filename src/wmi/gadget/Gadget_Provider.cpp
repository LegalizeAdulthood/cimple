/*
**==============================================================================
**
** Copyright (c) 2003, 2004, 2005, 2006, Michael Brasher, Karl Schopmeyer
** 
** Permission is hereby granted, free of charge, to any person obtaining u32a
** copy of this software and associated documentation files (the "Software"),
** to deal in the Software without restriction, including without limitation
** the rights to use, copy, modify, merge, publish, distribute, sublicense,
** and/or sell copies of the Software, and to permit persons to whom the
** Software is furnished to do so, subject to the following conditions:
** 
** The above copyright notice and this permission notice shall be included in
** all copies or substantial portions of the Software.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
** SOFTWARE.
**
**==============================================================================
*/

// Generated by genprov 1.2.4
#include "Gadget_Provider.h"
#include "log.h"
#include "Widget.h"

CIMPLE_NAMESPACE_BEGIN

Gadget_Provider::Gadget_Provider()
{
}

Gadget_Provider::~Gadget_Provider()
{
}

Load_Status Gadget_Provider::load()
{
    return LOAD_OK;
}

Unload_Status Gadget_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status Gadget_Provider::get_instance(
    const Gadget* model,
    Gadget*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

static Gadget* _make_instance(const String& key)
{
    Gadget* g = Gadget::create();

    Datetime dt("20050710170840.899256+300");

    g->key.set(key);
    g->b.set(true);
    g->u8.set(1);
    g->s8.set(-1);
    g->u16.set(1);
    g->s16.set(-1);
    g->u32.set(1);
    g->s32.set(-1);
    g->u64.set(1);
    g->s64.set(-1);
    g->r32.set(32.5);
    g->r64.set(64.5);
    g->dt.set(dt);

    g->ba.set(Array<bool>::make(true, false, true));
    g->u8a.set(Array<uint8>::make(1, 2, 3));
    g->s8a.set(Array<sint8>::make(-1, -2, -3));
    g->u16a.set(Array<uint16>::make(1, 2, 3));
    g->s16a.set(Array<sint16>::make(-1, -2, -3));
    g->u32a.set(Array<uint32>::make(1, 2, 3));
    g->s32a.set(Array<sint32>::make(-1, -2, -3));
    g->u64a.set(Array<uint64>::make(1, 2, 3));
    g->s64a.set(Array<sint64>::make(-1, -2, -3));
    g->r32a.set(Array<real32>::make(1.0, 2.0, 3.0));
    g->r64a.set(Array<real64>::make(1.0, 2.0, 3.0));
    g->sa.set(Array<String>::make("One", "Two", "Three"));
    g->dta.set(Array<Datetime>::make(dt, dt, dt));

    return g;
}

Enum_Instances_Status Gadget_Provider::enum_instances(
    const Gadget* model,
    Enum_Instances_Handler<Gadget>* handler)
{
    handler->handle(_make_instance("RED"));
    handler->handle(_make_instance("GREEN"));
    handler->handle(_make_instance("BLUE"));

    return ENUM_INSTANCES_OK;
}

Create_Instance_Status Gadget_Provider::create_instance(
    Gadget* instance)
{
    return CREATE_INSTANCE_OK;
}

Delete_Instance_Status Gadget_Provider::delete_instance(
    const Gadget* instance)
{
    __log("Gadget_Provider::delete_instance(): key[%s]", 
        instance->key.value.c_str());

    return DELETE_INSTANCE_OK;
}

Modify_Instance_Status Gadget_Provider::modify_instance(
    const Gadget* model,
    const Gadget* instance)
{
    if (instance)
    {
        __log("key[%s]\n", instance->key.value.c_str());
    }

    return MODIFY_INSTANCE_OK;
}

/*@END@*/

CIMPLE_NAMESPACE_END
