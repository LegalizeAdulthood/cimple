//==============================================================================
//
// PLEASE DO NOT EDIT; THIS FILE WAS AUTOMATICALLY GENERATED BY GENMOD 1.2.5
//
//==============================================================================

#include <cimple/cimple.h>
#include "Gadget_Provider.h"
#include "Widget_Provider.h"
#include "Connector_Provider.h"
#include "Buzzer_Provider.h"
#include "Upcall_Provider.h"

using namespace cimple;

static int __cimple_Gadget_Provider_proc(
    const Registration* registration,
    int operation,
    void* arg0,
    void* arg1,
    void* arg2,
    void* arg3,
    void* arg4,
    void* arg5,
    void* arg6,
    void* arg7)
{
    typedef Gadget Class;
    typedef Gadget_Provider Provider;

    if (operation != OPERATION_INVOKE_METHOD)
        return Instance_Provider_Proc_T<Provider>::proc(registration,
            operation, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    Provider* provider = (Provider*)arg0;
    const Class* self = (const Class*)arg1;
    const char* meth_name = ((Instance*)arg2)->meta_class->name;

    return -1;
}

static int __cimple_Widget_Provider_proc(
    const Registration* registration,
    int operation,
    void* arg0,
    void* arg1,
    void* arg2,
    void* arg3,
    void* arg4,
    void* arg5,
    void* arg6,
    void* arg7)
{
    typedef Widget Class;
    typedef Widget_Provider Provider;

    if (operation != OPERATION_INVOKE_METHOD)
        return Instance_Provider_Proc_T<Provider>::proc(registration,
            operation, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    Provider* provider = (Provider*)arg0;
    const Class* self = (const Class*)arg1;
    const char* meth_name = ((Instance*)arg2)->meta_class->name;

    if (strcasecmp(meth_name, "foo") == 0)
    {
        typedef Widget_foo_method Method;
        Method* method = (Method*)arg2;
        return provider->foo(
            method->arg1,
            method->arg2,
            method->arg3,
            method->arg4,
            method->return_value);
    }

    if (strcasecmp(meth_name, "goo") == 0)
    {
        typedef Widget_goo_method Method;
        Method* method = (Method*)arg2;
        return provider->goo(
            self,
            method->gin,
            method->gout,
            method->return_value);
    }

    if (strcasecmp(meth_name, "hoo") == 0)
    {
        typedef Widget_hoo_method Method;
        Method* method = (Method*)arg2;
        return provider->hoo(
            method->gin,
            method->gout,
            method->return_value);
    }

    return -1;
}

static int __cimple_Connector_Provider_proc(
    const Registration* registration,
    int operation,
    void* arg0,
    void* arg1,
    void* arg2,
    void* arg3,
    void* arg4,
    void* arg5,
    void* arg6,
    void* arg7)
{
    typedef Connector Class;
    typedef Connector_Provider Provider;

    if (operation != OPERATION_INVOKE_METHOD)
        return Association_Provider_Proc_T<Provider>::proc(registration,
            operation, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    Provider* provider = (Provider*)arg0;
    const Class* self = (const Class*)arg1;
    const char* meth_name = ((Instance*)arg2)->meta_class->name;

    return -1;
}

static int __cimple_Buzzer_Provider_proc(
    const Registration* registration,
    int operation,
    void* arg0,
    void* arg1,
    void* arg2,
    void* arg3,
    void* arg4,
    void* arg5,
    void* arg6,
    void* arg7)
{
    typedef Buzzer Class;
    typedef Buzzer_Provider Provider;

    if (operation != OPERATION_INVOKE_METHOD)
        return Indication_Provider_Proc_T<Provider>::proc(registration,
            operation, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    Provider* provider = (Provider*)arg0;
    const Class* self = (const Class*)arg1;
    const char* meth_name = ((Instance*)arg2)->meta_class->name;

    if (strcasecmp(meth_name, "trigger") == 0)
    {
        typedef Buzzer_trigger_method Method;
        Method* method = (Method*)arg2;
        return provider->trigger(
            method->return_value);
    }

    return -1;
}

static int __cimple_Upcall_Provider_proc(
    const Registration* registration,
    int operation,
    void* arg0,
    void* arg1,
    void* arg2,
    void* arg3,
    void* arg4,
    void* arg5,
    void* arg6,
    void* arg7)
{
    typedef Upcall Class;
    typedef Upcall_Provider Provider;

    if (operation != OPERATION_INVOKE_METHOD)
        return Instance_Provider_Proc_T<Provider>::proc(registration,
            operation, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    Provider* provider = (Provider*)arg0;
    const Class* self = (const Class*)arg1;
    const char* meth_name = ((Instance*)arg2)->meta_class->name;

    if (strcasecmp(meth_name, "upcalls") == 0)
    {
        typedef Upcall_upcalls_method Method;
        Method* method = (Method*)arg2;
        return provider->upcalls(
            self,
            method->return_value);
    }

    return -1;
}

CIMPLE_MODULE(Gadget_Module);
CIMPLE_INSTANCE_PROVIDER(Gadget_Provider);
CIMPLE_INSTANCE_PROVIDER(Widget_Provider);
CIMPLE_ASSOCIATION_PROVIDER(Connector_Provider);
CIMPLE_INDICATION_PROVIDER(Buzzer_Provider);
CIMPLE_INSTANCE_PROVIDER(Upcall_Provider);

#ifdef CIMPLE_PEGASUS_MODULE
  CIMPLE_PEGASUS_PROVIDER_ENTRY_POINT;
# define __CIMPLE_FOUND_ENTRY_POINT
#endif

#ifdef CIMPLE_CMPI_MODULE
  CIMPLE_CMPI_INSTANCE_PROVIDER(Gadget_Provider);
  CIMPLE_CMPI_INSTANCE_PROVIDER2(Gadget_Provider, Gadget);
  CIMPLE_CMPI_INSTANCE_PROVIDER(Widget_Provider);
  CIMPLE_CMPI_INSTANCE_PROVIDER2(Widget_Provider, Widget);
  CIMPLE_CMPI_ASSOCIATION_PROVIDER(Connector_Provider);
  CIMPLE_CMPI_ASSOCIATION_PROVIDER2(Connector_Provider, Connector);
  CIMPLE_CMPI_INDICATION_PROVIDER(Buzzer_Provider);
  CIMPLE_CMPI_INDICATION_PROVIDER2(Buzzer_Provider, Buzzer);
  CIMPLE_CMPI_INSTANCE_PROVIDER(Upcall_Provider);
  CIMPLE_CMPI_INSTANCE_PROVIDER2(Upcall_Provider, Upcall);
# define __CIMPLE_FOUND_ENTRY_POINT
#endif

#ifdef CIMPLE_OPENWBEM_MODULE
  CIMPLE_OPENWBEM_PROVIDER(Gadget_Module);
# define __CIMPLE_FOUND_ENTRY_POINT
#endif

#ifdef CIMPLE_WMI_MODULE
# include "guid.h"
  CIMPLE_WMI_PROVIDER_ENTRY_POINTS(CLSID_Gadget_Module)
# define __CIMPLE_FOUND_ENTRY_POINT
#endif

#ifndef __CIMPLE_FOUND_ENTRY_POINT
# error "No provider entry point found. Please define one of the following: CIMPLE_PEGASUS_MODULE, CIMPLE_CMPI_MODULE, CIMPLE_OPENWBEM_MODULE, CIMPLE_WMI_MODULE"
#endif
