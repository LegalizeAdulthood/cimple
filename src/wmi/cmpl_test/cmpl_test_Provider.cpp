// Generated by genprov 2.0.6
#include "cmpl_test_Provider.h"

CIMPLE_NAMESPACE_BEGIN

cmpl_test_Provider::cmpl_test_Provider()
{
}

cmpl_test_Provider::~cmpl_test_Provider()
{
}

Load_Status cmpl_test_Provider::load()
{
    CIMPLE_INFO(("load"));
    return LOAD_OK;
}

Unload_Status cmpl_test_Provider::unload()
{
    CIMPLE_INFO(("unload"));
    return UNLOAD_OK;
}

Get_Instance_Status cmpl_test_Provider::get_instance(
    const cmpl_test* model,
    cmpl_test*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status cmpl_test_Provider::enum_instances(
    const cmpl_test* model,
    Enum_Instances_Handler<cmpl_test>* handler)
{
    CIMPLE_INFO(("enum_instances"));
    {
        cmpl_test* p = cmpl_test::create();
        p->id.set(1);
        p->info.set("First Instance");
    
        handler->handle(p);
    }
    {
        cmpl_test* p = cmpl_test::create();
        p->id.set(2);
        p->info.set("Second Instance");
    
        handler->handle(p);
    }
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status cmpl_test_Provider::create_instance(
    cmpl_test* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status cmpl_test_Provider::delete_instance(
    const cmpl_test* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status cmpl_test_Provider::modify_instance(
    const cmpl_test* model,
    const cmpl_test* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Invoke_Method_Status cmpl_test_Provider::foo(
    const Property<String>& arg,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
