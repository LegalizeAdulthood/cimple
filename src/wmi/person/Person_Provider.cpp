// Generated by genprov 1.2.5
#include "Person_Provider.h"
#include <cimple/log.h>

// The following is a temporary log for development testing
#include "log.h"

CIMPLE_NAMESPACE_BEGIN

Person_Provider::Person_Provider()
{
}

Person_Provider::~Person_Provider()
{
}

Load_Status Person_Provider::load()
{
    return LOAD_OK;
}

Unload_Status Person_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status Person_Provider::get_instance(
    const Person* model,
    Person*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status Person_Provider::enum_instances(
    const Person* model,
    Enum_Instances_Handler<Person>* handler)
{
    {
        Person* p = Person::create();
        p->SSN.set("444-55-6666");
        p->FirstName.set("John");
        p->LastName.set("Smith");
    
        handler->handle(p);
    }
    {
        Person* p = Person::create();
        p->SSN.set("111-22-3333");
        p->FirstName.set("Jane");
        p->LastName.set("Jones");
    
        handler->handle(p);
    }

    return ENUM_INSTANCES_OK;
}

Create_Instance_Status Person_Provider::create_instance(
    Person* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status Person_Provider::delete_instance(
    const Person* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status Person_Provider::modify_instance(
    const Person* model,
    const Person* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Invoke_Method_Status Person_Provider::foo(
    const Property<String>& arg,
    Property<uint32>& return_value)
{
    LOG_ENTER;
    __log("arg=%s", arg.null ? "NULL" : arg.value.c_str());

    return_value.null = false;
    return_value.value = 22;

    LOG_EXIT;
    return INVOKE_METHOD_OK;
}

Invoke_Method_Status Person_Provider::foo1(
    const Person* self,
    const Property<uint32>& arg1,
    const Property<String>& arg2,
    const Property<boolean>& arg3,
    Property<uint32>& arg4,
    Property<String>& arg5,
    Property<boolean>& arg6,
    Property<String>& return_value)
{
    CIMPLE_INFO(("Enter foo1"));

    if (!arg1.null)
    {

        CIMPLE_INFO(("arg1= %u",arg1.value));
        __log("arg1= %u",arg1.value);
    }
    else
    {

        CIMPLE_INFO(("arg1=NULL"));
        __log("arg1=NULL");
    }

    CIMPLE_INFO(("arg2=%s", (arg2.null ? "NULL" : arg2.value.c_str())));
    __log("arg2=%s", (arg2.null ? "NULL" : arg2.value.c_str()) );

    CIMPLE_INFO(("arg3=%s", (arg3.null ? "NULL" : (arg3.value ? "true" : "false" ))));
    __log("arg3=%s", (arg3.null ? "NULL" : (arg3.value ? "true" : "false" ) ) );

    arg4.null = false;
    arg4.value = 999;

    arg5.null = false;
    arg5.value = "nine hundred ninety-nine";

    arg6.null = false;
    arg6.value = false;

    return_value.null = false;
    return_value.value = "thanks for calling";
    CIMPLE_INFO(("Exit foo1"));
    return INVOKE_METHOD_OK;
}

/*@END@*/

CIMPLE_NAMESPACE_END
