//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENCLASS.
//
//==============================================================================

#ifndef _cimple_CIM_System_Handle_h
#define _cimple_CIM_System_Handle_h

#include <cimple/cimple.h>
#include "CIM_System.h"
#include "CIM_EnabledLogicalElement_Handle.h"

CIMPLE_NAMESPACE_BEGIN

class CIM_System_Reference : public CIM_EnabledLogicalElement_Reference
{
public:

    typedef CIM_System Class;
    typedef CIM_System_Reference REFERENCE;

    CIM_System_Reference();

    CIM_System_Reference(const CIM_System_Reference& x);

    CIM_System_Reference(CIM_System* inst);

    template<class CLASS>
    explicit CIM_System_Reference(const CLASS& x);

    ~CIM_System_Reference();

    CIM_System_Reference& operator=(const CIM_System_Reference& x);

    // CreationClassName:
    const Property<String>& get_CreationClassName() const;
    void set_CreationClassName(const String& x);
    void clear_CreationClassName();

    // Name:
    const Property<String>& get_Name() const;
    void set_Name(const String& x);
    void clear_Name();
};

class CIM_System_Handle : public CIM_EnabledLogicalElement_Handle
{
public:

    typedef CIM_System Class;
    typedef CIM_System_Reference REFERENCE;

    CIM_System_Handle();

    CIM_System_Handle(const CIM_System_Handle& x);

    CIM_System_Handle(CIM_System* inst);

    template<class CLASS>
    explicit CIM_System_Handle(const CLASS& x);

    ~CIM_System_Handle();

    CIM_System_Handle& operator=(const CIM_System_Handle& x);

    // CreationClassName:
    const Property<String>& get_CreationClassName() const;
    void set_CreationClassName(const String& x);
    void clear_CreationClassName();

    // Name:
    const Property<String>& get_Name() const;
    void set_Name(const String& x);
    void clear_Name();

    // NameFormat:
    const Property<String>& get_NameFormat() const;
    void set_NameFormat(const String& x);
    void clear_NameFormat();

    // PrimaryOwnerName:
    const Property<String>& get_PrimaryOwnerName() const;
    void set_PrimaryOwnerName(const String& x);
    void clear_PrimaryOwnerName();

    // PrimaryOwnerContact:
    const Property<String>& get_PrimaryOwnerContact() const;
    void set_PrimaryOwnerContact(const String& x);
    void clear_PrimaryOwnerContact();

    // Roles:
    const Property<Array_String>& get_Roles() const;
    void set_Roles(const Array_String& x);
    void clear_Roles();
};

inline CIM_System_Reference::CIM_System_Reference()
{
    _inst = CIM_System::create(true);
}

inline CIM_System_Reference::CIM_System_Reference(const CIM_System_Reference& x) : CIM_EnabledLogicalElement_Reference(x)
{
}

inline CIM_System_Reference::CIM_System_Reference(CIM_System* inst)
{
    _inst = inst;
}

template<class CLASS>
inline CIM_System_Reference::CIM_System_Reference(const CLASS& x)
{
    _construct(*this, Class::static_meta_class, x);
}

inline CIM_System_Reference::~CIM_System_Reference()
{
}

inline CIM_System_Reference& CIM_System_Reference::operator=(const CIM_System_Reference& x)
{
    CIM_EnabledLogicalElement_Reference::operator=(x);
    return *this;
}

inline const Property<String>& CIM_System_Reference::get_CreationClassName() const
{
    return ((CIM_System*)_inst)->CreationClassName;
}

inline void CIM_System_Reference::set_CreationClassName(const String& x)
{
    _cow();
    ((CIM_System*)_inst)->CreationClassName.null = false;
    ((CIM_System*)_inst)->CreationClassName.value = x;
}

inline void CIM_System_Reference::clear_CreationClassName()
{
    _cow();
    ((CIM_System*)_inst)->CreationClassName.null = true;
    __clear(((CIM_System*)_inst)->CreationClassName.value);
}

inline const Property<String>& CIM_System_Reference::get_Name() const
{
    return ((CIM_System*)_inst)->Name;
}

inline void CIM_System_Reference::set_Name(const String& x)
{
    _cow();
    ((CIM_System*)_inst)->Name.null = false;
    ((CIM_System*)_inst)->Name.value = x;
}

inline void CIM_System_Reference::clear_Name()
{
    _cow();
    ((CIM_System*)_inst)->Name.null = true;
    __clear(((CIM_System*)_inst)->Name.value);
}

inline CIM_System_Handle::CIM_System_Handle()
{
    _inst = CIM_System::create(true);
}

inline CIM_System_Handle::CIM_System_Handle(const CIM_System_Handle& x) : CIM_EnabledLogicalElement_Handle(x)
{
}

inline CIM_System_Handle::CIM_System_Handle(CIM_System* inst)
{
    _inst = inst;
}

template<class CLASS>
inline CIM_System_Handle::CIM_System_Handle(const CLASS& x)
{
    _construct(*this, Class::static_meta_class, x);
}

inline CIM_System_Handle::~CIM_System_Handle()
{
}

inline CIM_System_Handle& CIM_System_Handle::operator=(const CIM_System_Handle& x)
{
    CIM_EnabledLogicalElement_Handle::operator=(x);
    return *this;
}

inline const Property<String>& CIM_System_Handle::get_CreationClassName() const
{
    return ((CIM_System*)_inst)->CreationClassName;
}

inline void CIM_System_Handle::set_CreationClassName(const String& x)
{
    _cow();
    ((CIM_System*)_inst)->CreationClassName.null = false;
    ((CIM_System*)_inst)->CreationClassName.value = x;
}

inline void CIM_System_Handle::clear_CreationClassName()
{
    _cow();
    ((CIM_System*)_inst)->CreationClassName.null = true;
    __clear(((CIM_System*)_inst)->CreationClassName.value);
}

inline const Property<String>& CIM_System_Handle::get_Name() const
{
    return ((CIM_System*)_inst)->Name;
}

inline void CIM_System_Handle::set_Name(const String& x)
{
    _cow();
    ((CIM_System*)_inst)->Name.null = false;
    ((CIM_System*)_inst)->Name.value = x;
}

inline void CIM_System_Handle::clear_Name()
{
    _cow();
    ((CIM_System*)_inst)->Name.null = true;
    __clear(((CIM_System*)_inst)->Name.value);
}

inline const Property<String>& CIM_System_Handle::get_NameFormat() const
{
    return ((CIM_System*)_inst)->NameFormat;
}

inline void CIM_System_Handle::set_NameFormat(const String& x)
{
    _cow();
    ((CIM_System*)_inst)->NameFormat.null = false;
    ((CIM_System*)_inst)->NameFormat.value = x;
}

inline void CIM_System_Handle::clear_NameFormat()
{
    _cow();
    ((CIM_System*)_inst)->NameFormat.null = true;
    __clear(((CIM_System*)_inst)->NameFormat.value);
}

inline const Property<String>& CIM_System_Handle::get_PrimaryOwnerName() const
{
    return ((CIM_System*)_inst)->PrimaryOwnerName;
}

inline void CIM_System_Handle::set_PrimaryOwnerName(const String& x)
{
    _cow();
    ((CIM_System*)_inst)->PrimaryOwnerName.null = false;
    ((CIM_System*)_inst)->PrimaryOwnerName.value = x;
}

inline void CIM_System_Handle::clear_PrimaryOwnerName()
{
    _cow();
    ((CIM_System*)_inst)->PrimaryOwnerName.null = true;
    __clear(((CIM_System*)_inst)->PrimaryOwnerName.value);
}

inline const Property<String>& CIM_System_Handle::get_PrimaryOwnerContact() const
{
    return ((CIM_System*)_inst)->PrimaryOwnerContact;
}

inline void CIM_System_Handle::set_PrimaryOwnerContact(const String& x)
{
    _cow();
    ((CIM_System*)_inst)->PrimaryOwnerContact.null = false;
    ((CIM_System*)_inst)->PrimaryOwnerContact.value = x;
}

inline void CIM_System_Handle::clear_PrimaryOwnerContact()
{
    _cow();
    ((CIM_System*)_inst)->PrimaryOwnerContact.null = true;
    __clear(((CIM_System*)_inst)->PrimaryOwnerContact.value);
}

inline const Property<Array_String>& CIM_System_Handle::get_Roles() const
{
    return ((CIM_System*)_inst)->Roles;
}

inline void CIM_System_Handle::set_Roles(const Array_String& x)
{
    _cow();
    ((CIM_System*)_inst)->Roles.null = false;
    ((CIM_System*)_inst)->Roles.value = x;
}

inline void CIM_System_Handle::clear_Roles()
{
    _cow();
    ((CIM_System*)_inst)->Roles.null = true;
    __clear(((CIM_System*)_inst)->Roles.value);
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_CIM_System_Handle_h */
