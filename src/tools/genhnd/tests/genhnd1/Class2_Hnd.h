//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENHND.
//
//==============================================================================

#ifndef _cimple_Class2_Hnd
#define _cimple_Class2_Hnd

#include <cimple/cimple.h>
#include "Class2.h"
#include "Class1_Hnd.h"

CIMPLE_NAMESPACE_BEGIN

class Class2_Ref : public Class1_Ref
{
public:
    typedef Class2 Class;
    Class2_Ref();
    Class2_Ref(const Class2_Ref& x);
    Class2_Ref(Class2* inst);
    explicit Class2_Ref(const Instance_Ref& x);
    ~Class2_Ref();
    Class2_Ref& operator=(const Class2_Ref& x);
    static bool is_a(const Instance_Ref& x);

    // Key:
    const uint32& Key_value() const;
    void Key_value(const uint32& x);
    bool Key_null() const;
    void Key_clear();

protected:
    Class2_Ref(const Meta_Class* mc);
    Class2_Ref(const Meta_Class* mc, const Instance_Ref& x);
};

class Class2_Hnd : public Class1_Hnd
{
public:
    typedef Class2 Class;
    Class2_Hnd();
    Class2_Hnd(const Class2_Hnd& x);
    Class2_Hnd(Class2* inst);
    explicit Class2_Hnd(const Instance_Hnd& x);
    ~Class2_Hnd();
    Class2_Hnd& operator=(const Class2_Hnd& x);
    static bool is_a(const Instance_Hnd& x);
    Class2_Ref reference() const;

    // Key:
    const uint32& Key_value() const;
    void Key_value(const uint32& x);
    bool Key_null() const;
    void Key_clear();

protected:
    Class2_Hnd(const Meta_Class* mc);
    Class2_Hnd(const Meta_Class* mc, const Instance_Hnd& x);
};

inline Class2_Ref::Class2_Ref() :
    Class1_Ref(&Class2::static_meta_class)
{
}

inline Class2_Ref::Class2_Ref(const Class2_Ref& x) :
    Class1_Ref(x)
{
}

inline Class2_Ref::Class2_Ref(Class2* inst) :
    Class1_Ref((Class1*)inst)
{
}

inline Class2_Ref::Class2_Ref(const Instance_Ref& x) : 
    Class1_Ref(&Class2::static_meta_class, x)
{
}

inline Class2_Ref::Class2_Ref(const Meta_Class* mc) : Class1_Ref(mc)
{
}

inline Class2_Ref::Class2_Ref(const Meta_Class* mc, const Instance_Ref& x) : Class1_Ref(mc, x)
{
}

inline Class2_Ref::~Class2_Ref()
{
}

inline Class2_Ref& Class2_Ref::operator=(const Class2_Ref& x)
{
    Class1_Ref::operator=(x);
    return *this;
}

inline bool Class2_Ref::is_a(const Instance_Ref& x)
{
    return is_subclass(&Class2::static_meta_class, x.meta_class());
}

inline const uint32& Class2_Ref::Key_value() const
{
    if (((Class*)_inst)->Key.null)
        _throw_null_access("Key");
   return ((Class*)_inst)->Key.value;
}

inline void Class2_Ref::Key_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->Key.value = x;
   ((Class*)_inst)->Key.null = false;
}

inline bool Class2_Ref::Key_null() const
{
   return ((Class*)_inst)->Key.null;
}

inline void Class2_Ref::Key_clear()
{
    _cow();
    __clear(((Class*)_inst)->Key.value);
    ((Class*)_inst)->Key.null = true;;
}

inline Class2_Hnd::Class2_Hnd() :
    Class1_Hnd(&Class2::static_meta_class)
{
}

inline Class2_Hnd::Class2_Hnd(const Class2_Hnd& x) :
    Class1_Hnd(x)
{
}

inline Class2_Hnd::Class2_Hnd(Class2* inst) :
    Class1_Hnd((Class1*)inst)
{
}

inline Class2_Hnd::Class2_Hnd(const Instance_Hnd& x) : 
    Class1_Hnd(&Class2::static_meta_class, x)
{
}

inline Class2_Hnd::Class2_Hnd(const Meta_Class* mc) : Class1_Hnd(mc)
{
}

inline Class2_Hnd::Class2_Hnd(const Meta_Class* mc, const Instance_Hnd& x) : Class1_Hnd(mc, x)
{
}

inline Class2_Hnd::~Class2_Hnd()
{
}

inline Class2_Hnd& Class2_Hnd::operator=(const Class2_Hnd& x)
{
    Class1_Hnd::operator=(x);
    return *this;
}

inline bool Class2_Hnd::is_a(const Instance_Hnd& x)
{
    return is_subclass(&Class2::static_meta_class, x.meta_class());
}

inline Class2_Ref Class2_Hnd::reference() const
{
    return Class2_Ref((Class2*)key_clone(_inst));
}

inline const uint32& Class2_Hnd::Key_value() const
{
    if (((Class*)_inst)->Key.null)
        _throw_null_access("Key");
   return ((Class*)_inst)->Key.value;
}

inline void Class2_Hnd::Key_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->Key.value = x;
   ((Class*)_inst)->Key.null = false;
}

inline bool Class2_Hnd::Key_null() const
{
   return ((Class*)_inst)->Key.null;
}

inline void Class2_Hnd::Key_clear()
{
    _cow();
    __clear(((Class*)_inst)->Key.value);
    ((Class*)_inst)->Key.null = true;;
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_Class2_Hnd_h */
