//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENCLASS.
//
//==============================================================================

#ifndef _cimple_ConcreteAssoc_Handle_h
#define _cimple_ConcreteAssoc_Handle_h

#include <cimple/cimple.h>
#include "ConcreteAssoc.h"
#include "Assoc_Handle.h"
#include "CIM_ConcreteJob_Handle.h"
#include "CIM_ConcreteJob_Handle.h"

CIMPLE_NAMESPACE_BEGIN

class ConcreteAssoc_Reference : public Assoc_Reference
{
public:

    typedef ConcreteAssoc Class;
    typedef ConcreteAssoc_Reference REFERENCE;

    ConcreteAssoc_Reference();

    ConcreteAssoc_Reference(const ConcreteAssoc_Reference& x);

    ConcreteAssoc_Reference(ConcreteAssoc* inst);

    template<class CLASS>
    explicit ConcreteAssoc_Reference(const CLASS& x);

    ~ConcreteAssoc_Reference();

    ConcreteAssoc_Reference& operator=(const ConcreteAssoc_Reference& x);

    // Left:
    CIM_ConcreteJob_Reference get_Left() const;
    void set_Left(const CIM_ConcreteJob_Reference& x);

    // Right:
    CIM_ConcreteJob_Reference get_Right() const;
    void set_Right(const CIM_ConcreteJob_Reference& x);
};

class ConcreteAssoc_Handle : public Assoc_Handle
{
public:

    typedef ConcreteAssoc Class;
    typedef ConcreteAssoc_Reference REFERENCE;

    ConcreteAssoc_Handle();

    ConcreteAssoc_Handle(const ConcreteAssoc_Handle& x);

    ConcreteAssoc_Handle(ConcreteAssoc* inst);

    template<class CLASS>
    explicit ConcreteAssoc_Handle(const CLASS& x);

    ~ConcreteAssoc_Handle();

    ConcreteAssoc_Handle& operator=(const ConcreteAssoc_Handle& x);

    // Left:
    CIM_ConcreteJob_Reference get_Left() const;
    void set_Left(const CIM_ConcreteJob_Reference& x);

    // Right:
    CIM_ConcreteJob_Reference get_Right() const;
    void set_Right(const CIM_ConcreteJob_Reference& x);
};

inline ConcreteAssoc_Reference::ConcreteAssoc_Reference()
{
    _inst = ConcreteAssoc::create(true);
    __create_refs(_inst);
}

inline ConcreteAssoc_Reference::ConcreteAssoc_Reference(const ConcreteAssoc_Reference& x) : Assoc_Reference(x)
{
}

inline ConcreteAssoc_Reference::ConcreteAssoc_Reference(ConcreteAssoc* inst)
{
    _inst = inst;
    __create_refs(_inst);
}

template<class CLASS>
inline ConcreteAssoc_Reference::ConcreteAssoc_Reference(const CLASS& x)
{
    _construct(*this, Class::static_meta_class, x);
}

inline ConcreteAssoc_Reference::~ConcreteAssoc_Reference()
{
}

inline ConcreteAssoc_Reference& ConcreteAssoc_Reference::operator=(const ConcreteAssoc_Reference& x)
{
    Assoc_Reference::operator=(x);
    return *this;
}

inline CIM_ConcreteJob_Reference ConcreteAssoc_Reference::get_Left() const
{
    ref(((ConcreteAssoc*)_inst)->Left);
    return CIM_ConcreteJob_Reference(((ConcreteAssoc*)_inst)->Left);
}

inline void ConcreteAssoc_Reference::set_Left(const CIM_ConcreteJob_Reference& x)
{
    _cow();
    unref(((ConcreteAssoc*)_inst)->Left);
    ref(((ConcreteAssoc*)_inst)->Left = (CIM_ConcreteJob*)x.instance());
}

inline CIM_ConcreteJob_Reference ConcreteAssoc_Reference::get_Right() const
{
    ref(((ConcreteAssoc*)_inst)->Right);
    return CIM_ConcreteJob_Reference(((ConcreteAssoc*)_inst)->Right);
}

inline void ConcreteAssoc_Reference::set_Right(const CIM_ConcreteJob_Reference& x)
{
    _cow();
    unref(((ConcreteAssoc*)_inst)->Right);
    ref(((ConcreteAssoc*)_inst)->Right = (CIM_ConcreteJob*)x.instance());
}

inline ConcreteAssoc_Handle::ConcreteAssoc_Handle()
{
    _inst = ConcreteAssoc::create(true);
    __create_refs(_inst);
}

inline ConcreteAssoc_Handle::ConcreteAssoc_Handle(const ConcreteAssoc_Handle& x) : Assoc_Handle(x)
{
}

inline ConcreteAssoc_Handle::ConcreteAssoc_Handle(ConcreteAssoc* inst)
{
    _inst = inst;
    __create_refs(_inst);
}

template<class CLASS>
inline ConcreteAssoc_Handle::ConcreteAssoc_Handle(const CLASS& x)
{
    _construct(*this, Class::static_meta_class, x);
}

inline ConcreteAssoc_Handle::~ConcreteAssoc_Handle()
{
}

inline ConcreteAssoc_Handle& ConcreteAssoc_Handle::operator=(const ConcreteAssoc_Handle& x)
{
    Assoc_Handle::operator=(x);
    return *this;
}

inline CIM_ConcreteJob_Reference ConcreteAssoc_Handle::get_Left() const
{
    ref(((ConcreteAssoc*)_inst)->Left);
    return CIM_ConcreteJob_Reference(((ConcreteAssoc*)_inst)->Left);
}

inline void ConcreteAssoc_Handle::set_Left(const CIM_ConcreteJob_Reference& x)
{
    _cow();
    unref(((ConcreteAssoc*)_inst)->Left);
    ref(((ConcreteAssoc*)_inst)->Left = (CIM_ConcreteJob*)x.instance());
}

inline CIM_ConcreteJob_Reference ConcreteAssoc_Handle::get_Right() const
{
    ref(((ConcreteAssoc*)_inst)->Right);
    return CIM_ConcreteJob_Reference(((ConcreteAssoc*)_inst)->Right);
}

inline void ConcreteAssoc_Handle::set_Right(const CIM_ConcreteJob_Reference& x)
{
    _cow();
    unref(((ConcreteAssoc*)_inst)->Right);
    ref(((ConcreteAssoc*)_inst)->Right = (CIM_ConcreteJob*)x.instance());
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_ConcreteAssoc_Handle_h */
