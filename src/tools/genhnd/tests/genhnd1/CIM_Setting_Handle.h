//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENCLASS.
//
//==============================================================================

#ifndef _cimple_CIM_Setting_Handle_h
#define _cimple_CIM_Setting_Handle_h

#include <cimple/cimple.h>
#include "CIM_Setting.h"
#include "CIM_ManagedElement_Handle.h"
#include "CIM_ManagedSystemElement_Handle.h"
#include "CIM_ManagedSystemElement_Handle.h"
#include "CIM_CollectionOfMSEs_Handle.h"
#include "CIM_CollectionOfMSEs_Handle.h"
#include "CIM_ManagedSystemElement_Handle.h"
#include "CIM_ManagedSystemElement_Handle.h"
#include "CIM_CollectionOfMSEs_Handle.h"
#include "CIM_CollectionOfMSEs_Handle.h"

CIMPLE_NAMESPACE_BEGIN

class CIM_Setting_Reference : public CIM_ManagedElement_Reference
{
public:

    typedef CIM_Setting Class;
    typedef CIM_Setting_Reference REFERENCE;

    CIM_Setting_Reference();

    CIM_Setting_Reference(const CIM_Setting_Reference& x);

    CIM_Setting_Reference(CIM_Setting* inst);

    template<class CLASS>
    explicit CIM_Setting_Reference(const CLASS& x);

    ~CIM_Setting_Reference();

    CIM_Setting_Reference& operator=(const CIM_Setting_Reference& x);
};

class CIM_Setting_Handle : public CIM_ManagedElement_Handle
{
public:

    typedef CIM_Setting Class;
    typedef CIM_Setting_Reference REFERENCE;

    CIM_Setting_Handle();

    CIM_Setting_Handle(const CIM_Setting_Handle& x);

    CIM_Setting_Handle(CIM_Setting* inst);

    template<class CLASS>
    explicit CIM_Setting_Handle(const CLASS& x);

    ~CIM_Setting_Handle();

    CIM_Setting_Handle& operator=(const CIM_Setting_Handle& x);

    // SettingID:
    const Property<String>& get_SettingID() const;
    void set_SettingID(const String& x);
    void clear_SettingID();
};

inline CIM_Setting_Reference::CIM_Setting_Reference()
{
    _inst = CIM_Setting::create(true);
}

inline CIM_Setting_Reference::CIM_Setting_Reference(const CIM_Setting_Reference& x) : CIM_ManagedElement_Reference(x)
{
}

inline CIM_Setting_Reference::CIM_Setting_Reference(CIM_Setting* inst)
{
    _inst = inst;
}

template<class CLASS>
inline CIM_Setting_Reference::CIM_Setting_Reference(const CLASS& x)
{
    _construct(*this, Class::static_meta_class, x);
}

inline CIM_Setting_Reference::~CIM_Setting_Reference()
{
}

inline CIM_Setting_Reference& CIM_Setting_Reference::operator=(const CIM_Setting_Reference& x)
{
    CIM_ManagedElement_Reference::operator=(x);
    return *this;
}

inline CIM_Setting_Handle::CIM_Setting_Handle()
{
    _inst = CIM_Setting::create(true);
}

inline CIM_Setting_Handle::CIM_Setting_Handle(const CIM_Setting_Handle& x) : CIM_ManagedElement_Handle(x)
{
}

inline CIM_Setting_Handle::CIM_Setting_Handle(CIM_Setting* inst)
{
    _inst = inst;
}

template<class CLASS>
inline CIM_Setting_Handle::CIM_Setting_Handle(const CLASS& x)
{
    _construct(*this, Class::static_meta_class, x);
}

inline CIM_Setting_Handle::~CIM_Setting_Handle()
{
}

inline CIM_Setting_Handle& CIM_Setting_Handle::operator=(const CIM_Setting_Handle& x)
{
    CIM_ManagedElement_Handle::operator=(x);
    return *this;
}

inline const Property<String>& CIM_Setting_Handle::get_SettingID() const
{
    return ((CIM_Setting*)_inst)->SettingID;
}

inline void CIM_Setting_Handle::set_SettingID(const String& x)
{
    _cow();
    ((CIM_Setting*)_inst)->SettingID.null = false;
    ((CIM_Setting*)_inst)->SettingID.value = x;
}

inline void CIM_Setting_Handle::clear_SettingID()
{
    _cow();
    ((CIM_Setting*)_inst)->SettingID.null = true;
    __clear(((CIM_Setting*)_inst)->SettingID.value);
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_CIM_Setting_Handle_h */
