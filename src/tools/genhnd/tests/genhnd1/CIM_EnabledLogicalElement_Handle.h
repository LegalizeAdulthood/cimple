//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENCLASS.
//
//==============================================================================

#ifndef _cimple_CIM_EnabledLogicalElement_Handle_h
#define _cimple_CIM_EnabledLogicalElement_Handle_h

#include <cimple/cimple.h>
#include "CIM_EnabledLogicalElement.h"
#include "CIM_LogicalElement_Handle.h"
#include "CIM_ConcreteJob_Handle.h"

CIMPLE_NAMESPACE_BEGIN

class CIM_EnabledLogicalElement_Reference : public CIM_LogicalElement_Reference
{
public:

    typedef CIM_EnabledLogicalElement Class;
    typedef CIM_EnabledLogicalElement_Reference REFERENCE;

    CIM_EnabledLogicalElement_Reference();

    CIM_EnabledLogicalElement_Reference(const CIM_EnabledLogicalElement_Reference& x);

    CIM_EnabledLogicalElement_Reference(CIM_EnabledLogicalElement* inst);

    template<class CLASS>
    explicit CIM_EnabledLogicalElement_Reference(const CLASS& x);

    ~CIM_EnabledLogicalElement_Reference();

    CIM_EnabledLogicalElement_Reference& operator=(const CIM_EnabledLogicalElement_Reference& x);
};

class CIM_EnabledLogicalElement_Handle : public CIM_LogicalElement_Handle
{
public:

    typedef CIM_EnabledLogicalElement Class;
    typedef CIM_EnabledLogicalElement_Reference REFERENCE;

    CIM_EnabledLogicalElement_Handle();

    CIM_EnabledLogicalElement_Handle(const CIM_EnabledLogicalElement_Handle& x);

    CIM_EnabledLogicalElement_Handle(CIM_EnabledLogicalElement* inst);

    template<class CLASS>
    explicit CIM_EnabledLogicalElement_Handle(const CLASS& x);

    ~CIM_EnabledLogicalElement_Handle();

    CIM_EnabledLogicalElement_Handle& operator=(const CIM_EnabledLogicalElement_Handle& x);

    // EnabledState:
    const Property<uint16>& get_EnabledState() const;
    void set_EnabledState(const uint16& x);
    void clear_EnabledState();

    // OtherEnabledState:
    const Property<String>& get_OtherEnabledState() const;
    void set_OtherEnabledState(const String& x);
    void clear_OtherEnabledState();

    // RequestedState:
    const Property<uint16>& get_RequestedState() const;
    void set_RequestedState(const uint16& x);
    void clear_RequestedState();

    // EnabledDefault:
    const Property<uint16>& get_EnabledDefault() const;
    void set_EnabledDefault(const uint16& x);
    void clear_EnabledDefault();

    // TimeOfLastStateChange:
    const Property<Datetime>& get_TimeOfLastStateChange() const;
    void set_TimeOfLastStateChange(const Datetime& x);
    void clear_TimeOfLastStateChange();
};

inline CIM_EnabledLogicalElement_Reference::CIM_EnabledLogicalElement_Reference()
{
    _inst = CIM_EnabledLogicalElement::create(true);
}

inline CIM_EnabledLogicalElement_Reference::CIM_EnabledLogicalElement_Reference(const CIM_EnabledLogicalElement_Reference& x) : CIM_LogicalElement_Reference(x)
{
}

inline CIM_EnabledLogicalElement_Reference::CIM_EnabledLogicalElement_Reference(CIM_EnabledLogicalElement* inst)
{
    _inst = inst;
}

template<class CLASS>
inline CIM_EnabledLogicalElement_Reference::CIM_EnabledLogicalElement_Reference(const CLASS& x)
{
    _construct(*this, Class::static_meta_class, x);
}

inline CIM_EnabledLogicalElement_Reference::~CIM_EnabledLogicalElement_Reference()
{
}

inline CIM_EnabledLogicalElement_Reference& CIM_EnabledLogicalElement_Reference::operator=(const CIM_EnabledLogicalElement_Reference& x)
{
    CIM_LogicalElement_Reference::operator=(x);
    return *this;
}

inline CIM_EnabledLogicalElement_Handle::CIM_EnabledLogicalElement_Handle()
{
    _inst = CIM_EnabledLogicalElement::create(true);
}

inline CIM_EnabledLogicalElement_Handle::CIM_EnabledLogicalElement_Handle(const CIM_EnabledLogicalElement_Handle& x) : CIM_LogicalElement_Handle(x)
{
}

inline CIM_EnabledLogicalElement_Handle::CIM_EnabledLogicalElement_Handle(CIM_EnabledLogicalElement* inst)
{
    _inst = inst;
}

template<class CLASS>
inline CIM_EnabledLogicalElement_Handle::CIM_EnabledLogicalElement_Handle(const CLASS& x)
{
    _construct(*this, Class::static_meta_class, x);
}

inline CIM_EnabledLogicalElement_Handle::~CIM_EnabledLogicalElement_Handle()
{
}

inline CIM_EnabledLogicalElement_Handle& CIM_EnabledLogicalElement_Handle::operator=(const CIM_EnabledLogicalElement_Handle& x)
{
    CIM_LogicalElement_Handle::operator=(x);
    return *this;
}

inline const Property<uint16>& CIM_EnabledLogicalElement_Handle::get_EnabledState() const
{
    return ((CIM_EnabledLogicalElement*)_inst)->EnabledState;
}

inline void CIM_EnabledLogicalElement_Handle::set_EnabledState(const uint16& x)
{
    _cow();
    ((CIM_EnabledLogicalElement*)_inst)->EnabledState.null = false;
    ((CIM_EnabledLogicalElement*)_inst)->EnabledState.value = x;
}

inline void CIM_EnabledLogicalElement_Handle::clear_EnabledState()
{
    _cow();
    ((CIM_EnabledLogicalElement*)_inst)->EnabledState.null = true;
    __clear(((CIM_EnabledLogicalElement*)_inst)->EnabledState.value);
}

inline const Property<String>& CIM_EnabledLogicalElement_Handle::get_OtherEnabledState() const
{
    return ((CIM_EnabledLogicalElement*)_inst)->OtherEnabledState;
}

inline void CIM_EnabledLogicalElement_Handle::set_OtherEnabledState(const String& x)
{
    _cow();
    ((CIM_EnabledLogicalElement*)_inst)->OtherEnabledState.null = false;
    ((CIM_EnabledLogicalElement*)_inst)->OtherEnabledState.value = x;
}

inline void CIM_EnabledLogicalElement_Handle::clear_OtherEnabledState()
{
    _cow();
    ((CIM_EnabledLogicalElement*)_inst)->OtherEnabledState.null = true;
    __clear(((CIM_EnabledLogicalElement*)_inst)->OtherEnabledState.value);
}

inline const Property<uint16>& CIM_EnabledLogicalElement_Handle::get_RequestedState() const
{
    return ((CIM_EnabledLogicalElement*)_inst)->RequestedState;
}

inline void CIM_EnabledLogicalElement_Handle::set_RequestedState(const uint16& x)
{
    _cow();
    ((CIM_EnabledLogicalElement*)_inst)->RequestedState.null = false;
    ((CIM_EnabledLogicalElement*)_inst)->RequestedState.value = x;
}

inline void CIM_EnabledLogicalElement_Handle::clear_RequestedState()
{
    _cow();
    ((CIM_EnabledLogicalElement*)_inst)->RequestedState.null = true;
    __clear(((CIM_EnabledLogicalElement*)_inst)->RequestedState.value);
}

inline const Property<uint16>& CIM_EnabledLogicalElement_Handle::get_EnabledDefault() const
{
    return ((CIM_EnabledLogicalElement*)_inst)->EnabledDefault;
}

inline void CIM_EnabledLogicalElement_Handle::set_EnabledDefault(const uint16& x)
{
    _cow();
    ((CIM_EnabledLogicalElement*)_inst)->EnabledDefault.null = false;
    ((CIM_EnabledLogicalElement*)_inst)->EnabledDefault.value = x;
}

inline void CIM_EnabledLogicalElement_Handle::clear_EnabledDefault()
{
    _cow();
    ((CIM_EnabledLogicalElement*)_inst)->EnabledDefault.null = true;
    __clear(((CIM_EnabledLogicalElement*)_inst)->EnabledDefault.value);
}

inline const Property<Datetime>& CIM_EnabledLogicalElement_Handle::get_TimeOfLastStateChange() const
{
    return ((CIM_EnabledLogicalElement*)_inst)->TimeOfLastStateChange;
}

inline void CIM_EnabledLogicalElement_Handle::set_TimeOfLastStateChange(const Datetime& x)
{
    _cow();
    ((CIM_EnabledLogicalElement*)_inst)->TimeOfLastStateChange.null = false;
    ((CIM_EnabledLogicalElement*)_inst)->TimeOfLastStateChange.value = x;
}

inline void CIM_EnabledLogicalElement_Handle::clear_TimeOfLastStateChange()
{
    _cow();
    ((CIM_EnabledLogicalElement*)_inst)->TimeOfLastStateChange.null = true;
    __clear(((CIM_EnabledLogicalElement*)_inst)->TimeOfLastStateChange.value);
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_CIM_EnabledLogicalElement_Handle_h */
