//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENCLASS.
//
//==============================================================================

#ifndef _cimple_CIM_ConcreteJob_Handle_h
#define _cimple_CIM_ConcreteJob_Handle_h

#include <cimple/cimple.h>
#include "CIM_ConcreteJob.h"
#include "CIM_Job_Handle.h"

CIMPLE_NAMESPACE_BEGIN

class CIM_ConcreteJob_Reference : public CIM_Job_Reference
{
public:

    typedef CIM_ConcreteJob Class;
    typedef CIM_ConcreteJob_Reference REFERENCE;

    CIM_ConcreteJob_Reference();

    CIM_ConcreteJob_Reference(const CIM_ConcreteJob_Reference& x);

    CIM_ConcreteJob_Reference(CIM_ConcreteJob* inst);

    template<class CLASS>
    explicit CIM_ConcreteJob_Reference(const CLASS& x);

    ~CIM_ConcreteJob_Reference();

    CIM_ConcreteJob_Reference& operator=(const CIM_ConcreteJob_Reference& x);

    // InstanceID:
    const Property<String>& get_InstanceID() const;
    void set_InstanceID(const String& x);
    void clear_InstanceID();
};

class CIM_ConcreteJob_Handle : public CIM_Job_Handle
{
public:

    typedef CIM_ConcreteJob Class;
    typedef CIM_ConcreteJob_Reference REFERENCE;

    CIM_ConcreteJob_Handle();

    CIM_ConcreteJob_Handle(const CIM_ConcreteJob_Handle& x);

    CIM_ConcreteJob_Handle(CIM_ConcreteJob* inst);

    template<class CLASS>
    explicit CIM_ConcreteJob_Handle(const CLASS& x);

    ~CIM_ConcreteJob_Handle();

    CIM_ConcreteJob_Handle& operator=(const CIM_ConcreteJob_Handle& x);

    // InstanceID:
    const Property<String>& get_InstanceID() const;
    void set_InstanceID(const String& x);
    void clear_InstanceID();

    // Name:
    const Property<String>& get_Name() const;
    void set_Name(const String& x);
    void clear_Name();

    // JobState:
    const Property<uint16>& get_JobState() const;
    void set_JobState(const uint16& x);
    void clear_JobState();

    // TimeOfLastStateChange:
    const Property<Datetime>& get_TimeOfLastStateChange() const;
    void set_TimeOfLastStateChange(const Datetime& x);
    void clear_TimeOfLastStateChange();

    // TimeBeforeRemoval:
    const Property<Datetime>& get_TimeBeforeRemoval() const;
    void set_TimeBeforeRemoval(const Datetime& x);
    void clear_TimeBeforeRemoval();
};

inline CIM_ConcreteJob_Reference::CIM_ConcreteJob_Reference()
{
    _inst = CIM_ConcreteJob::create(true);
}

inline CIM_ConcreteJob_Reference::CIM_ConcreteJob_Reference(const CIM_ConcreteJob_Reference& x) : CIM_Job_Reference(x)
{
}

inline CIM_ConcreteJob_Reference::CIM_ConcreteJob_Reference(CIM_ConcreteJob* inst)
{
    _inst = inst;
}

template<class CLASS>
inline CIM_ConcreteJob_Reference::CIM_ConcreteJob_Reference(const CLASS& x)
{
    _construct(*this, Class::static_meta_class, x);
}

inline CIM_ConcreteJob_Reference::~CIM_ConcreteJob_Reference()
{
}

inline CIM_ConcreteJob_Reference& CIM_ConcreteJob_Reference::operator=(const CIM_ConcreteJob_Reference& x)
{
    CIM_Job_Reference::operator=(x);
    return *this;
}

inline const Property<String>& CIM_ConcreteJob_Reference::get_InstanceID() const
{
    return ((CIM_ConcreteJob*)_inst)->InstanceID;
}

inline void CIM_ConcreteJob_Reference::set_InstanceID(const String& x)
{
    _cow();
    ((CIM_ConcreteJob*)_inst)->InstanceID.null = false;
    ((CIM_ConcreteJob*)_inst)->InstanceID.value = x;
}

inline void CIM_ConcreteJob_Reference::clear_InstanceID()
{
    _cow();
    ((CIM_ConcreteJob*)_inst)->InstanceID.null = true;
    __clear(((CIM_ConcreteJob*)_inst)->InstanceID.value);
}

inline CIM_ConcreteJob_Handle::CIM_ConcreteJob_Handle()
{
    _inst = CIM_ConcreteJob::create(true);
}

inline CIM_ConcreteJob_Handle::CIM_ConcreteJob_Handle(const CIM_ConcreteJob_Handle& x) : CIM_Job_Handle(x)
{
}

inline CIM_ConcreteJob_Handle::CIM_ConcreteJob_Handle(CIM_ConcreteJob* inst)
{
    _inst = inst;
}

template<class CLASS>
inline CIM_ConcreteJob_Handle::CIM_ConcreteJob_Handle(const CLASS& x)
{
    _construct(*this, Class::static_meta_class, x);
}

inline CIM_ConcreteJob_Handle::~CIM_ConcreteJob_Handle()
{
}

inline CIM_ConcreteJob_Handle& CIM_ConcreteJob_Handle::operator=(const CIM_ConcreteJob_Handle& x)
{
    CIM_Job_Handle::operator=(x);
    return *this;
}

inline const Property<String>& CIM_ConcreteJob_Handle::get_InstanceID() const
{
    return ((CIM_ConcreteJob*)_inst)->InstanceID;
}

inline void CIM_ConcreteJob_Handle::set_InstanceID(const String& x)
{
    _cow();
    ((CIM_ConcreteJob*)_inst)->InstanceID.null = false;
    ((CIM_ConcreteJob*)_inst)->InstanceID.value = x;
}

inline void CIM_ConcreteJob_Handle::clear_InstanceID()
{
    _cow();
    ((CIM_ConcreteJob*)_inst)->InstanceID.null = true;
    __clear(((CIM_ConcreteJob*)_inst)->InstanceID.value);
}

inline const Property<String>& CIM_ConcreteJob_Handle::get_Name() const
{
    return ((CIM_ConcreteJob*)_inst)->Name;
}

inline void CIM_ConcreteJob_Handle::set_Name(const String& x)
{
    _cow();
    ((CIM_ConcreteJob*)_inst)->Name.null = false;
    ((CIM_ConcreteJob*)_inst)->Name.value = x;
}

inline void CIM_ConcreteJob_Handle::clear_Name()
{
    _cow();
    ((CIM_ConcreteJob*)_inst)->Name.null = true;
    __clear(((CIM_ConcreteJob*)_inst)->Name.value);
}

inline const Property<uint16>& CIM_ConcreteJob_Handle::get_JobState() const
{
    return ((CIM_ConcreteJob*)_inst)->JobState;
}

inline void CIM_ConcreteJob_Handle::set_JobState(const uint16& x)
{
    _cow();
    ((CIM_ConcreteJob*)_inst)->JobState.null = false;
    ((CIM_ConcreteJob*)_inst)->JobState.value = x;
}

inline void CIM_ConcreteJob_Handle::clear_JobState()
{
    _cow();
    ((CIM_ConcreteJob*)_inst)->JobState.null = true;
    __clear(((CIM_ConcreteJob*)_inst)->JobState.value);
}

inline const Property<Datetime>& CIM_ConcreteJob_Handle::get_TimeOfLastStateChange() const
{
    return ((CIM_ConcreteJob*)_inst)->TimeOfLastStateChange;
}

inline void CIM_ConcreteJob_Handle::set_TimeOfLastStateChange(const Datetime& x)
{
    _cow();
    ((CIM_ConcreteJob*)_inst)->TimeOfLastStateChange.null = false;
    ((CIM_ConcreteJob*)_inst)->TimeOfLastStateChange.value = x;
}

inline void CIM_ConcreteJob_Handle::clear_TimeOfLastStateChange()
{
    _cow();
    ((CIM_ConcreteJob*)_inst)->TimeOfLastStateChange.null = true;
    __clear(((CIM_ConcreteJob*)_inst)->TimeOfLastStateChange.value);
}

inline const Property<Datetime>& CIM_ConcreteJob_Handle::get_TimeBeforeRemoval() const
{
    return ((CIM_ConcreteJob*)_inst)->TimeBeforeRemoval;
}

inline void CIM_ConcreteJob_Handle::set_TimeBeforeRemoval(const Datetime& x)
{
    _cow();
    ((CIM_ConcreteJob*)_inst)->TimeBeforeRemoval.null = false;
    ((CIM_ConcreteJob*)_inst)->TimeBeforeRemoval.value = x;
}

inline void CIM_ConcreteJob_Handle::clear_TimeBeforeRemoval()
{
    _cow();
    ((CIM_ConcreteJob*)_inst)->TimeBeforeRemoval.null = true;
    __clear(((CIM_ConcreteJob*)_inst)->TimeBeforeRemoval.value);
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_CIM_ConcreteJob_Handle_h */
