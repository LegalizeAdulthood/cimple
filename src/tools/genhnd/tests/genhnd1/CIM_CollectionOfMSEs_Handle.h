//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENCLASS.
//
//==============================================================================

#ifndef _cimple_CIM_CollectionOfMSEs_Handle_h
#define _cimple_CIM_CollectionOfMSEs_Handle_h

#include <cimple/cimple.h>
#include "CIM_CollectionOfMSEs.h"
#include "CIM_Collection_Handle.h"

CIMPLE_NAMESPACE_BEGIN

class CIM_CollectionOfMSEs_Reference : public CIM_Collection_Reference
{
public:

    typedef CIM_CollectionOfMSEs Class;
    typedef CIM_CollectionOfMSEs_Reference REFERENCE;

    CIM_CollectionOfMSEs_Reference();

    CIM_CollectionOfMSEs_Reference(const CIM_CollectionOfMSEs_Reference& x);

    CIM_CollectionOfMSEs_Reference(CIM_CollectionOfMSEs* inst);

    template<class CLASS>
    explicit CIM_CollectionOfMSEs_Reference(const CLASS& x);

    ~CIM_CollectionOfMSEs_Reference();

    CIM_CollectionOfMSEs_Reference& operator=(const CIM_CollectionOfMSEs_Reference& x);
};

class CIM_CollectionOfMSEs_Handle : public CIM_Collection_Handle
{
public:

    typedef CIM_CollectionOfMSEs Class;
    typedef CIM_CollectionOfMSEs_Reference REFERENCE;

    CIM_CollectionOfMSEs_Handle();

    CIM_CollectionOfMSEs_Handle(const CIM_CollectionOfMSEs_Handle& x);

    CIM_CollectionOfMSEs_Handle(CIM_CollectionOfMSEs* inst);

    template<class CLASS>
    explicit CIM_CollectionOfMSEs_Handle(const CLASS& x);

    ~CIM_CollectionOfMSEs_Handle();

    CIM_CollectionOfMSEs_Handle& operator=(const CIM_CollectionOfMSEs_Handle& x);

    // CollectionID:
    const Property<String>& get_CollectionID() const;
    void set_CollectionID(const String& x);
    void clear_CollectionID();
};

inline CIM_CollectionOfMSEs_Reference::CIM_CollectionOfMSEs_Reference()
{
    _inst = CIM_CollectionOfMSEs::create(true);
}

inline CIM_CollectionOfMSEs_Reference::CIM_CollectionOfMSEs_Reference(const CIM_CollectionOfMSEs_Reference& x) : CIM_Collection_Reference(x)
{
}

inline CIM_CollectionOfMSEs_Reference::CIM_CollectionOfMSEs_Reference(CIM_CollectionOfMSEs* inst)
{
    _inst = inst;
}

template<class CLASS>
inline CIM_CollectionOfMSEs_Reference::CIM_CollectionOfMSEs_Reference(const CLASS& x)
{
    _construct(*this, Class::static_meta_class, x);
}

inline CIM_CollectionOfMSEs_Reference::~CIM_CollectionOfMSEs_Reference()
{
}

inline CIM_CollectionOfMSEs_Reference& CIM_CollectionOfMSEs_Reference::operator=(const CIM_CollectionOfMSEs_Reference& x)
{
    CIM_Collection_Reference::operator=(x);
    return *this;
}

inline CIM_CollectionOfMSEs_Handle::CIM_CollectionOfMSEs_Handle()
{
    _inst = CIM_CollectionOfMSEs::create(true);
}

inline CIM_CollectionOfMSEs_Handle::CIM_CollectionOfMSEs_Handle(const CIM_CollectionOfMSEs_Handle& x) : CIM_Collection_Handle(x)
{
}

inline CIM_CollectionOfMSEs_Handle::CIM_CollectionOfMSEs_Handle(CIM_CollectionOfMSEs* inst)
{
    _inst = inst;
}

template<class CLASS>
inline CIM_CollectionOfMSEs_Handle::CIM_CollectionOfMSEs_Handle(const CLASS& x)
{
    _construct(*this, Class::static_meta_class, x);
}

inline CIM_CollectionOfMSEs_Handle::~CIM_CollectionOfMSEs_Handle()
{
}

inline CIM_CollectionOfMSEs_Handle& CIM_CollectionOfMSEs_Handle::operator=(const CIM_CollectionOfMSEs_Handle& x)
{
    CIM_Collection_Handle::operator=(x);
    return *this;
}

inline const Property<String>& CIM_CollectionOfMSEs_Handle::get_CollectionID() const
{
    return ((CIM_CollectionOfMSEs*)_inst)->CollectionID;
}

inline void CIM_CollectionOfMSEs_Handle::set_CollectionID(const String& x)
{
    _cow();
    ((CIM_CollectionOfMSEs*)_inst)->CollectionID.null = false;
    ((CIM_CollectionOfMSEs*)_inst)->CollectionID.value = x;
}

inline void CIM_CollectionOfMSEs_Handle::clear_CollectionID()
{
    _cow();
    ((CIM_CollectionOfMSEs*)_inst)->CollectionID.null = true;
    __clear(((CIM_CollectionOfMSEs*)_inst)->CollectionID.value);
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_CIM_CollectionOfMSEs_Handle_h */
