//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENHND.
//
//==============================================================================

#ifndef _cimple_Class3_Hnd
#define _cimple_Class3_Hnd

#include <cimple/cimple.h>
#include "Class3.h"
#include "Class1_Hnd.h"

CIMPLE_NAMESPACE_BEGIN

class Class3_Ref : public Instance_Ref
{
public:
    typedef Class3 Class;
    Class3_Ref();
    Class3_Ref(const Class3_Ref& x);
    Class3_Ref(Class3* inst);
    explicit Class3_Ref(const Instance_Ref& x);
    ~Class3_Ref();
    Class3_Ref& operator=(const Class3_Ref& x);
    static bool is_a(const Instance_Ref& x);

    // Key:
    const uint32& Key_value() const;
    void Key_value(const uint32& x);
    bool Key_null() const;
    void Key_clear();

    Arg<boolean> BooleanReturn(
        Ops& __ops,
        const String& __name_space);

    Arg<uint8> Uint8Return(
        Ops& __ops,
        const String& __name_space);

    Arg<sint8> Sint8Return(
        Ops& __ops,
        const String& __name_space);

    Arg<uint16> Uint16Return(
        Ops& __ops,
        const String& __name_space);

    Arg<sint16> Sint16Return(
        Ops& __ops,
        const String& __name_space);

    Arg<uint32> Uint32Return(
        Ops& __ops,
        const String& __name_space);

    Arg<sint32> Sint32Return(
        Ops& __ops,
        const String& __name_space);

    Arg<uint64> Uint64Return(
        Ops& __ops,
        const String& __name_space);

    Arg<sint64> Sint64Return(
        Ops& __ops,
        const String& __name_space);

    Arg<real32> Real32Return(
        Ops& __ops,
        const String& __name_space);

    Arg<real64> Real64Return(
        Ops& __ops,
        const String& __name_space);

    Arg<char16> Char16Return(
        Ops& __ops,
        const String& __name_space);

    Arg<String> StringReturn(
        Ops& __ops,
        const String& __name_space);

    Arg<Datetime> DatetimeReturn(
        Ops& __ops,
        const String& __name_space);

    Arg<Class1_Hnd> InstanceReturn(
        Ops& __ops,
        const String& __name_space);

    Arg<Instance_Hnd> ObjectReturn(
        Ops& __ops,
        const String& __name_space);

    Arg<uint32> BooleanScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<boolean>& p1,
        Arg<boolean>& p2);

    Arg<uint32> Uint8ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<uint8>& p1,
        Arg<uint8>& p2);

    Arg<uint32> Sint8ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<sint8>& p1,
        Arg<sint8>& p2);

    Arg<uint32> Uint16ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<uint16>& p1,
        Arg<uint16>& p2);

    Arg<uint32> Sint16ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<sint16>& p1,
        Arg<sint16>& p2);

    Arg<uint32> Uint32ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<uint32>& p1,
        Arg<uint32>& p2);

    Arg<uint32> Sint32ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<sint32>& p1,
        Arg<sint32>& p2);

    Arg<uint32> Uint64ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<uint64>& p1,
        Arg<uint64>& p2);

    Arg<uint32> Sint64ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<sint64>& p1,
        Arg<sint64>& p2);

    Arg<uint32> Real32ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<real32>& p1,
        Arg<real32>& p2);

    Arg<uint32> Real64ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<real64>& p1,
        Arg<real64>& p2);

    Arg<uint32> Char16ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<char16>& p1,
        Arg<char16>& p2);

    Arg<uint32> StringScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<String>& p1,
        Arg<String>& p2);

    Arg<uint32> DatetimeScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Datetime>& p1,
        Arg<Datetime>& p2);

    Arg<uint32> ObjectScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Instance_Hnd>& p1,
        Arg<Instance_Hnd>& p2);

    Arg<uint32> InstanceScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Class1_Hnd>& p1,
        Arg<Class1_Hnd>& p2);

    Arg<uint32> ReferenceScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Class1_Ref>& p1,
        Arg<Class1_Ref>& p2);

    Arg<uint32> BooleanArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_boolean>& p1,
        Arg<Array_boolean>& p2);

    Arg<uint32> Uint8ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_uint8>& p1,
        Arg<Array_uint8>& p2);

    Arg<uint32> Sint8ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_sint8>& p1,
        Arg<Array_sint8>& p2);

    Arg<uint32> Uint16ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_uint16>& p1,
        Arg<Array_uint16>& p2);

    Arg<uint32> Sint16ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_sint16>& p1,
        Arg<Array_sint16>& p2);

    Arg<uint32> Uint32ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_uint32>& p1,
        Arg<Array_uint32>& p2);

    Arg<uint32> Sint32ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_sint32>& p1,
        Arg<Array_sint32>& p2);

    Arg<uint32> Uint64ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_uint64>& p1,
        Arg<Array_uint64>& p2);

    Arg<uint32> Sint64ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_sint64>& p1,
        Arg<Array_sint64>& p2);

    Arg<uint32> Real32ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_real32>& p1,
        Arg<Array_real32>& p2);

    Arg<uint32> Real64ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_real64>& p1,
        Arg<Array_real64>& p2);

    Arg<uint32> Char16ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_char16>& p1,
        Arg<Array_char16>& p2);

    Arg<uint32> StringArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_String>& p1,
        Arg<Array_String>& p2);

    Arg<uint32> DatetimeArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_Datetime>& p1,
        Arg<Array_Datetime>& p2);

    Arg<uint32> ObjectArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg< Array<Instance_Hnd> >& p1,
        Arg< Array<Instance_Hnd> >& p2);

    Arg<uint32> InstanceArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg< Array<Class1_Hnd> >& p1,
        Arg< Array<Class1_Hnd> >& p2);

    Arg<uint32> ReferenceArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg< Array<Class1_Ref> >& p1,
        Arg< Array<Class1_Ref> >& p2);

protected:
    Class3_Ref(const Meta_Class* mc);
    Class3_Ref(const Meta_Class* mc, const Instance_Ref& x);
};

class Class3_Hnd : public Instance_Hnd
{
public:
    typedef Class3 Class;
    Class3_Hnd();
    Class3_Hnd(const Class3_Hnd& x);
    Class3_Hnd(Class3* inst);
    explicit Class3_Hnd(const Instance_Hnd& x);
    ~Class3_Hnd();
    Class3_Hnd& operator=(const Class3_Hnd& x);
    static bool is_a(const Instance_Hnd& x);
    Class3_Ref reference() const;

    // Key:
    const uint32& Key_value() const;
    void Key_value(const uint32& x);
    bool Key_null() const;
    void Key_clear();

    // BooleanScalar:
    const boolean& BooleanScalar_value() const;
    void BooleanScalar_value(const boolean& x);
    bool BooleanScalar_null() const;
    void BooleanScalar_clear();

    // Uint8Scalar:
    const uint8& Uint8Scalar_value() const;
    void Uint8Scalar_value(const uint8& x);
    bool Uint8Scalar_null() const;
    void Uint8Scalar_clear();

    // Sint8Scalar:
    const sint8& Sint8Scalar_value() const;
    void Sint8Scalar_value(const sint8& x);
    bool Sint8Scalar_null() const;
    void Sint8Scalar_clear();

    // Uint16Scalar:
    const uint16& Uint16Scalar_value() const;
    void Uint16Scalar_value(const uint16& x);
    bool Uint16Scalar_null() const;
    void Uint16Scalar_clear();

    // Sint16Scalar:
    const sint16& Sint16Scalar_value() const;
    void Sint16Scalar_value(const sint16& x);
    bool Sint16Scalar_null() const;
    void Sint16Scalar_clear();

    // Uint32Scalar:
    const uint32& Uint32Scalar_value() const;
    void Uint32Scalar_value(const uint32& x);
    bool Uint32Scalar_null() const;
    void Uint32Scalar_clear();

    // Sint32Scalar:
    const sint32& Sint32Scalar_value() const;
    void Sint32Scalar_value(const sint32& x);
    bool Sint32Scalar_null() const;
    void Sint32Scalar_clear();

    // Uint64Scalar:
    const uint64& Uint64Scalar_value() const;
    void Uint64Scalar_value(const uint64& x);
    bool Uint64Scalar_null() const;
    void Uint64Scalar_clear();

    // Sint64Scalar:
    const sint64& Sint64Scalar_value() const;
    void Sint64Scalar_value(const sint64& x);
    bool Sint64Scalar_null() const;
    void Sint64Scalar_clear();

    // Real32Scalar:
    const real32& Real32Scalar_value() const;
    void Real32Scalar_value(const real32& x);
    bool Real32Scalar_null() const;
    void Real32Scalar_clear();

    // Real64Scalar:
    const real64& Real64Scalar_value() const;
    void Real64Scalar_value(const real64& x);
    bool Real64Scalar_null() const;
    void Real64Scalar_clear();

    // Char16Scalar:
    const char16& Char16Scalar_value() const;
    void Char16Scalar_value(const char16& x);
    bool Char16Scalar_null() const;
    void Char16Scalar_clear();

    // StringScalar:
    const String& StringScalar_value() const;
    void StringScalar_value(const String& x);
    bool StringScalar_null() const;
    void StringScalar_clear();

    // DatetimeScalar:
    const Datetime& DatetimeScalar_value() const;
    void DatetimeScalar_value(const Datetime& x);
    bool DatetimeScalar_null() const;
    void DatetimeScalar_clear();

    // InstanceScalar:
    Class1_Hnd InstanceScalar_value() const;
    void InstanceScalar_value(const Class1_Hnd& x);
    bool InstanceScalar_null() const;
    void InstanceScalar_clear();

    // ObjectScalar:
    Instance_Hnd ObjectScalar_value() const;
    void ObjectScalar_value(const Instance_Hnd& x);
    bool ObjectScalar_null() const;
    void ObjectScalar_clear();

    // BooleanArray:
    const Array_boolean& BooleanArray_value() const;
    void BooleanArray_value(const Array_boolean& x);
    bool BooleanArray_null() const;
    void BooleanArray_clear();

    // Uint8Array:
    const Array_uint8& Uint8Array_value() const;
    void Uint8Array_value(const Array_uint8& x);
    bool Uint8Array_null() const;
    void Uint8Array_clear();

    // Sint8Array:
    const Array_sint8& Sint8Array_value() const;
    void Sint8Array_value(const Array_sint8& x);
    bool Sint8Array_null() const;
    void Sint8Array_clear();

    // Uint16Array:
    const Array_uint16& Uint16Array_value() const;
    void Uint16Array_value(const Array_uint16& x);
    bool Uint16Array_null() const;
    void Uint16Array_clear();

    // Sint16Array:
    const Array_sint16& Sint16Array_value() const;
    void Sint16Array_value(const Array_sint16& x);
    bool Sint16Array_null() const;
    void Sint16Array_clear();

    // Uint32Array:
    const Array_uint32& Uint32Array_value() const;
    void Uint32Array_value(const Array_uint32& x);
    bool Uint32Array_null() const;
    void Uint32Array_clear();

    // Sint32Array:
    const Array_sint32& Sint32Array_value() const;
    void Sint32Array_value(const Array_sint32& x);
    bool Sint32Array_null() const;
    void Sint32Array_clear();

    // Uint64Array:
    const Array_uint64& Uint64Array_value() const;
    void Uint64Array_value(const Array_uint64& x);
    bool Uint64Array_null() const;
    void Uint64Array_clear();

    // Sint64Array:
    const Array_sint64& Sint64Array_value() const;
    void Sint64Array_value(const Array_sint64& x);
    bool Sint64Array_null() const;
    void Sint64Array_clear();

    // Real32Array:
    const Array_real32& Real32Array_value() const;
    void Real32Array_value(const Array_real32& x);
    bool Real32Array_null() const;
    void Real32Array_clear();

    // Real64Array:
    const Array_real64& Real64Array_value() const;
    void Real64Array_value(const Array_real64& x);
    bool Real64Array_null() const;
    void Real64Array_clear();

    // Char16Array:
    const Array_char16& Char16Array_value() const;
    void Char16Array_value(const Array_char16& x);
    bool Char16Array_null() const;
    void Char16Array_clear();

    // StringArray:
    const Array_String& StringArray_value() const;
    void StringArray_value(const Array_String& x);
    bool StringArray_null() const;
    void StringArray_clear();

    // DatetimeArray:
    const Array_Datetime& DatetimeArray_value() const;
    void DatetimeArray_value(const Array_Datetime& x);
    bool DatetimeArray_null() const;
    void DatetimeArray_clear();

    // InstanceArray:
    Array<Class1_Hnd> InstanceArray_value() const;
    void InstanceArray_value(const Array<Class1_Hnd>& x);
    bool InstanceArray_null() const;
    void InstanceArray_clear();

    // ObjectArray:
    Array<Instance_Hnd> ObjectArray_value() const;
    void ObjectArray_value(const Array<Instance_Hnd>& x);
    bool ObjectArray_null() const;
    void ObjectArray_clear();

protected:
    Class3_Hnd(const Meta_Class* mc);
    Class3_Hnd(const Meta_Class* mc, const Instance_Hnd& x);
};

inline Class3_Ref::Class3_Ref() :
    Instance_Ref(&Class3::static_meta_class)
{
}

inline Class3_Ref::Class3_Ref(const Class3_Ref& x) :
    Instance_Ref(x)
{
}

inline Class3_Ref::Class3_Ref(Class3* inst) :
    Instance_Ref((Instance*)inst)
{
}

inline Class3_Ref::Class3_Ref(const Instance_Ref& x) : 
    Instance_Ref(&Class3::static_meta_class, x)
{
}

inline Class3_Ref::Class3_Ref(const Meta_Class* mc) : Instance_Ref(mc)
{
}

inline Class3_Ref::Class3_Ref(const Meta_Class* mc, const Instance_Ref& x) : Instance_Ref(mc, x)
{
}

inline Class3_Ref::~Class3_Ref()
{
}

inline Class3_Ref& Class3_Ref::operator=(const Class3_Ref& x)
{
    Instance_Ref::operator=(x);
    return *this;
}

inline bool Class3_Ref::is_a(const Instance_Ref& x)
{
    return is_subclass(&Class3::static_meta_class, x.meta_class());
}

inline const uint32& Class3_Ref::Key_value() const
{
    if (((Class*)_inst)->Key.null)
        _throw_null_access("Key");
   return ((Class*)_inst)->Key.value;
}

inline void Class3_Ref::Key_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->Key.value = x;
   ((Class*)_inst)->Key.null = false;
}

inline bool Class3_Ref::Key_null() const
{
   return ((Class*)_inst)->Key.null;
}

inline void Class3_Ref::Key_clear()
{
    _cow();
    __clear(((Class*)_inst)->Key.value);
    ((Class*)_inst)->Key.null = true;;
}

inline Arg<boolean> Class3_Ref::BooleanReturn(
    Ops& __ops,
    const String& __name_space)
{
    Arg<boolean> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_BooleanReturn_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<uint8> Class3_Ref::Uint8Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<uint8> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Uint8Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<sint8> Class3_Ref::Sint8Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<sint8> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Sint8Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<uint16> Class3_Ref::Uint16Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<uint16> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Uint16Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<sint16> Class3_Ref::Sint16Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<sint16> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Sint16Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Uint32Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Uint32Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<sint32> Class3_Ref::Sint32Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<sint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Sint32Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<uint64> Class3_Ref::Uint64Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<uint64> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Uint64Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<sint64> Class3_Ref::Sint64Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<sint64> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Sint64Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<real32> Class3_Ref::Real32Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<real32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Real32Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<real64> Class3_Ref::Real64Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<real64> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Real64Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<char16> Class3_Ref::Char16Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<char16> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Char16Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<String> Class3_Ref::StringReturn(
    Ops& __ops,
    const String& __name_space)
{
    Arg<String> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_StringReturn_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<Datetime> Class3_Ref::DatetimeReturn(
    Ops& __ops,
    const String& __name_space)
{
    Arg<Datetime> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_DatetimeReturn_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<Class1_Hnd> Class3_Ref::InstanceReturn(
    Ops& __ops,
    const String& __name_space)
{
    Arg<Class1_Hnd> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_InstanceReturn_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<Instance_Hnd> Class3_Ref::ObjectReturn(
    Ops& __ops,
    const String& __name_space)
{
    Arg<Instance_Hnd> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_ObjectReturn_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::BooleanScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<boolean>& p1,
    Arg<boolean>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_BooleanScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Uint8ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<uint8>& p1,
    Arg<uint8>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Uint8ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Sint8ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<sint8>& p1,
    Arg<sint8>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Sint8ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Uint16ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<uint16>& p1,
    Arg<uint16>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Uint16ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Sint16ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<sint16>& p1,
    Arg<sint16>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Sint16ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Uint32ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<uint32>& p1,
    Arg<uint32>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Uint32ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Sint32ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<sint32>& p1,
    Arg<sint32>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Sint32ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Uint64ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<uint64>& p1,
    Arg<uint64>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Uint64ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Sint64ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<sint64>& p1,
    Arg<sint64>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Sint64ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Real32ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<real32>& p1,
    Arg<real32>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Real32ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Real64ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<real64>& p1,
    Arg<real64>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Real64ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Char16ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<char16>& p1,
    Arg<char16>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Char16ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::StringScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<String>& p1,
    Arg<String>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_StringScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::DatetimeScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Datetime>& p1,
    Arg<Datetime>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_DatetimeScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::ObjectScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Instance_Hnd>& p1,
    Arg<Instance_Hnd>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_ObjectScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::InstanceScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Class1_Hnd>& p1,
    Arg<Class1_Hnd>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_InstanceScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::ReferenceScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Class1_Ref>& p1,
    Arg<Class1_Ref>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_ReferenceScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::BooleanArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_boolean>& p1,
    Arg<Array_boolean>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_BooleanArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Uint8ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_uint8>& p1,
    Arg<Array_uint8>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Uint8ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Sint8ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_sint8>& p1,
    Arg<Array_sint8>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Sint8ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Uint16ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_uint16>& p1,
    Arg<Array_uint16>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Uint16ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Sint16ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_sint16>& p1,
    Arg<Array_sint16>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Sint16ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Uint32ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_uint32>& p1,
    Arg<Array_uint32>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Uint32ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Sint32ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_sint32>& p1,
    Arg<Array_sint32>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Sint32ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Uint64ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_uint64>& p1,
    Arg<Array_uint64>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Uint64ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Sint64ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_sint64>& p1,
    Arg<Array_sint64>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Sint64ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Real32ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_real32>& p1,
    Arg<Array_real32>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Real32ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Real64ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_real64>& p1,
    Arg<Array_real64>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Real64ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::Char16ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_char16>& p1,
    Arg<Array_char16>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_Char16ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::StringArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_String>& p1,
    Arg<Array_String>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_StringArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::DatetimeArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_Datetime>& p1,
    Arg<Array_Datetime>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_DatetimeArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::ObjectArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg< Array<Instance_Hnd> >& p1,
    Arg< Array<Instance_Hnd> >& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_ObjectArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::InstanceArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg< Array<Class1_Hnd> >& p1,
    Arg< Array<Class1_Hnd> >& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_InstanceArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Class3_Ref::ReferenceArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg< Array<Class1_Ref> >& p1,
    Arg< Array<Class1_Ref> >& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Class3_ReferenceArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Class3_Hnd::Class3_Hnd() :
    Instance_Hnd(&Class3::static_meta_class)
{
}

inline Class3_Hnd::Class3_Hnd(const Class3_Hnd& x) :
    Instance_Hnd(x)
{
}

inline Class3_Hnd::Class3_Hnd(Class3* inst) :
    Instance_Hnd((Instance*)inst)
{
}

inline Class3_Hnd::Class3_Hnd(const Instance_Hnd& x) : 
    Instance_Hnd(&Class3::static_meta_class, x)
{
}

inline Class3_Hnd::Class3_Hnd(const Meta_Class* mc) : Instance_Hnd(mc)
{
}

inline Class3_Hnd::Class3_Hnd(const Meta_Class* mc, const Instance_Hnd& x) : Instance_Hnd(mc, x)
{
}

inline Class3_Hnd::~Class3_Hnd()
{
}

inline Class3_Hnd& Class3_Hnd::operator=(const Class3_Hnd& x)
{
    Instance_Hnd::operator=(x);
    return *this;
}

inline bool Class3_Hnd::is_a(const Instance_Hnd& x)
{
    return is_subclass(&Class3::static_meta_class, x.meta_class());
}

inline Class3_Ref Class3_Hnd::reference() const
{
    return Class3_Ref((Class3*)key_clone(_inst));
}

inline const uint32& Class3_Hnd::Key_value() const
{
    if (((Class*)_inst)->Key.null)
        _throw_null_access("Key");
   return ((Class*)_inst)->Key.value;
}

inline void Class3_Hnd::Key_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->Key.value = x;
   ((Class*)_inst)->Key.null = false;
}

inline bool Class3_Hnd::Key_null() const
{
   return ((Class*)_inst)->Key.null;
}

inline void Class3_Hnd::Key_clear()
{
    _cow();
    __clear(((Class*)_inst)->Key.value);
    ((Class*)_inst)->Key.null = true;;
}

inline const boolean& Class3_Hnd::BooleanScalar_value() const
{
    if (((Class*)_inst)->BooleanScalar.null)
        _throw_null_access("BooleanScalar");
   return ((Class*)_inst)->BooleanScalar.value;
}

inline void Class3_Hnd::BooleanScalar_value(const boolean& x)
{
    _cow();
   ((Class*)_inst)->BooleanScalar.value = x;
   ((Class*)_inst)->BooleanScalar.null = false;
}

inline bool Class3_Hnd::BooleanScalar_null() const
{
   return ((Class*)_inst)->BooleanScalar.null;
}

inline void Class3_Hnd::BooleanScalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->BooleanScalar.value);
    ((Class*)_inst)->BooleanScalar.null = true;;
}

inline const uint8& Class3_Hnd::Uint8Scalar_value() const
{
    if (((Class*)_inst)->Uint8Scalar.null)
        _throw_null_access("Uint8Scalar");
   return ((Class*)_inst)->Uint8Scalar.value;
}

inline void Class3_Hnd::Uint8Scalar_value(const uint8& x)
{
    _cow();
   ((Class*)_inst)->Uint8Scalar.value = x;
   ((Class*)_inst)->Uint8Scalar.null = false;
}

inline bool Class3_Hnd::Uint8Scalar_null() const
{
   return ((Class*)_inst)->Uint8Scalar.null;
}

inline void Class3_Hnd::Uint8Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->Uint8Scalar.value);
    ((Class*)_inst)->Uint8Scalar.null = true;;
}

inline const sint8& Class3_Hnd::Sint8Scalar_value() const
{
    if (((Class*)_inst)->Sint8Scalar.null)
        _throw_null_access("Sint8Scalar");
   return ((Class*)_inst)->Sint8Scalar.value;
}

inline void Class3_Hnd::Sint8Scalar_value(const sint8& x)
{
    _cow();
   ((Class*)_inst)->Sint8Scalar.value = x;
   ((Class*)_inst)->Sint8Scalar.null = false;
}

inline bool Class3_Hnd::Sint8Scalar_null() const
{
   return ((Class*)_inst)->Sint8Scalar.null;
}

inline void Class3_Hnd::Sint8Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->Sint8Scalar.value);
    ((Class*)_inst)->Sint8Scalar.null = true;;
}

inline const uint16& Class3_Hnd::Uint16Scalar_value() const
{
    if (((Class*)_inst)->Uint16Scalar.null)
        _throw_null_access("Uint16Scalar");
   return ((Class*)_inst)->Uint16Scalar.value;
}

inline void Class3_Hnd::Uint16Scalar_value(const uint16& x)
{
    _cow();
   ((Class*)_inst)->Uint16Scalar.value = x;
   ((Class*)_inst)->Uint16Scalar.null = false;
}

inline bool Class3_Hnd::Uint16Scalar_null() const
{
   return ((Class*)_inst)->Uint16Scalar.null;
}

inline void Class3_Hnd::Uint16Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->Uint16Scalar.value);
    ((Class*)_inst)->Uint16Scalar.null = true;;
}

inline const sint16& Class3_Hnd::Sint16Scalar_value() const
{
    if (((Class*)_inst)->Sint16Scalar.null)
        _throw_null_access("Sint16Scalar");
   return ((Class*)_inst)->Sint16Scalar.value;
}

inline void Class3_Hnd::Sint16Scalar_value(const sint16& x)
{
    _cow();
   ((Class*)_inst)->Sint16Scalar.value = x;
   ((Class*)_inst)->Sint16Scalar.null = false;
}

inline bool Class3_Hnd::Sint16Scalar_null() const
{
   return ((Class*)_inst)->Sint16Scalar.null;
}

inline void Class3_Hnd::Sint16Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->Sint16Scalar.value);
    ((Class*)_inst)->Sint16Scalar.null = true;;
}

inline const uint32& Class3_Hnd::Uint32Scalar_value() const
{
    if (((Class*)_inst)->Uint32Scalar.null)
        _throw_null_access("Uint32Scalar");
   return ((Class*)_inst)->Uint32Scalar.value;
}

inline void Class3_Hnd::Uint32Scalar_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->Uint32Scalar.value = x;
   ((Class*)_inst)->Uint32Scalar.null = false;
}

inline bool Class3_Hnd::Uint32Scalar_null() const
{
   return ((Class*)_inst)->Uint32Scalar.null;
}

inline void Class3_Hnd::Uint32Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->Uint32Scalar.value);
    ((Class*)_inst)->Uint32Scalar.null = true;;
}

inline const sint32& Class3_Hnd::Sint32Scalar_value() const
{
    if (((Class*)_inst)->Sint32Scalar.null)
        _throw_null_access("Sint32Scalar");
   return ((Class*)_inst)->Sint32Scalar.value;
}

inline void Class3_Hnd::Sint32Scalar_value(const sint32& x)
{
    _cow();
   ((Class*)_inst)->Sint32Scalar.value = x;
   ((Class*)_inst)->Sint32Scalar.null = false;
}

inline bool Class3_Hnd::Sint32Scalar_null() const
{
   return ((Class*)_inst)->Sint32Scalar.null;
}

inline void Class3_Hnd::Sint32Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->Sint32Scalar.value);
    ((Class*)_inst)->Sint32Scalar.null = true;;
}

inline const uint64& Class3_Hnd::Uint64Scalar_value() const
{
    if (((Class*)_inst)->Uint64Scalar.null)
        _throw_null_access("Uint64Scalar");
   return ((Class*)_inst)->Uint64Scalar.value;
}

inline void Class3_Hnd::Uint64Scalar_value(const uint64& x)
{
    _cow();
   ((Class*)_inst)->Uint64Scalar.value = x;
   ((Class*)_inst)->Uint64Scalar.null = false;
}

inline bool Class3_Hnd::Uint64Scalar_null() const
{
   return ((Class*)_inst)->Uint64Scalar.null;
}

inline void Class3_Hnd::Uint64Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->Uint64Scalar.value);
    ((Class*)_inst)->Uint64Scalar.null = true;;
}

inline const sint64& Class3_Hnd::Sint64Scalar_value() const
{
    if (((Class*)_inst)->Sint64Scalar.null)
        _throw_null_access("Sint64Scalar");
   return ((Class*)_inst)->Sint64Scalar.value;
}

inline void Class3_Hnd::Sint64Scalar_value(const sint64& x)
{
    _cow();
   ((Class*)_inst)->Sint64Scalar.value = x;
   ((Class*)_inst)->Sint64Scalar.null = false;
}

inline bool Class3_Hnd::Sint64Scalar_null() const
{
   return ((Class*)_inst)->Sint64Scalar.null;
}

inline void Class3_Hnd::Sint64Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->Sint64Scalar.value);
    ((Class*)_inst)->Sint64Scalar.null = true;;
}

inline const real32& Class3_Hnd::Real32Scalar_value() const
{
    if (((Class*)_inst)->Real32Scalar.null)
        _throw_null_access("Real32Scalar");
   return ((Class*)_inst)->Real32Scalar.value;
}

inline void Class3_Hnd::Real32Scalar_value(const real32& x)
{
    _cow();
   ((Class*)_inst)->Real32Scalar.value = x;
   ((Class*)_inst)->Real32Scalar.null = false;
}

inline bool Class3_Hnd::Real32Scalar_null() const
{
   return ((Class*)_inst)->Real32Scalar.null;
}

inline void Class3_Hnd::Real32Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->Real32Scalar.value);
    ((Class*)_inst)->Real32Scalar.null = true;;
}

inline const real64& Class3_Hnd::Real64Scalar_value() const
{
    if (((Class*)_inst)->Real64Scalar.null)
        _throw_null_access("Real64Scalar");
   return ((Class*)_inst)->Real64Scalar.value;
}

inline void Class3_Hnd::Real64Scalar_value(const real64& x)
{
    _cow();
   ((Class*)_inst)->Real64Scalar.value = x;
   ((Class*)_inst)->Real64Scalar.null = false;
}

inline bool Class3_Hnd::Real64Scalar_null() const
{
   return ((Class*)_inst)->Real64Scalar.null;
}

inline void Class3_Hnd::Real64Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->Real64Scalar.value);
    ((Class*)_inst)->Real64Scalar.null = true;;
}

inline const char16& Class3_Hnd::Char16Scalar_value() const
{
    if (((Class*)_inst)->Char16Scalar.null)
        _throw_null_access("Char16Scalar");
   return ((Class*)_inst)->Char16Scalar.value;
}

inline void Class3_Hnd::Char16Scalar_value(const char16& x)
{
    _cow();
   ((Class*)_inst)->Char16Scalar.value = x;
   ((Class*)_inst)->Char16Scalar.null = false;
}

inline bool Class3_Hnd::Char16Scalar_null() const
{
   return ((Class*)_inst)->Char16Scalar.null;
}

inline void Class3_Hnd::Char16Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->Char16Scalar.value);
    ((Class*)_inst)->Char16Scalar.null = true;;
}

inline const String& Class3_Hnd::StringScalar_value() const
{
    if (((Class*)_inst)->StringScalar.null)
        _throw_null_access("StringScalar");
   return ((Class*)_inst)->StringScalar.value;
}

inline void Class3_Hnd::StringScalar_value(const String& x)
{
    _cow();
   ((Class*)_inst)->StringScalar.value = x;
   ((Class*)_inst)->StringScalar.null = false;
}

inline bool Class3_Hnd::StringScalar_null() const
{
   return ((Class*)_inst)->StringScalar.null;
}

inline void Class3_Hnd::StringScalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->StringScalar.value);
    ((Class*)_inst)->StringScalar.null = true;;
}

inline const Datetime& Class3_Hnd::DatetimeScalar_value() const
{
    if (((Class*)_inst)->DatetimeScalar.null)
        _throw_null_access("DatetimeScalar");
   return ((Class*)_inst)->DatetimeScalar.value;
}

inline void Class3_Hnd::DatetimeScalar_value(const Datetime& x)
{
    _cow();
   ((Class*)_inst)->DatetimeScalar.value = x;
   ((Class*)_inst)->DatetimeScalar.null = false;
}

inline bool Class3_Hnd::DatetimeScalar_null() const
{
   return ((Class*)_inst)->DatetimeScalar.null;
}

inline void Class3_Hnd::DatetimeScalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->DatetimeScalar.value);
    ((Class*)_inst)->DatetimeScalar.null = true;;
}

inline Class1_Hnd Class3_Hnd::InstanceScalar_value() const
{
    if (!((Class*)_inst)->InstanceScalar)
        _throw_null_access("InstanceScalar");
    ref(((Class*)_inst)->InstanceScalar);
    return Class1_Hnd(((Class*)_inst)->InstanceScalar);
}

inline void Class3_Hnd::InstanceScalar_value(const Class1_Hnd& x)
{
    _cow();
    unref(((Class*)_inst)->InstanceScalar);
    ref(((Class*)_inst)->InstanceScalar = (Class1*)x.instance());
}

inline bool Class3_Hnd::InstanceScalar_null() const
{
    return ((Class*)_inst)->InstanceScalar == 0;
}

inline void Class3_Hnd::InstanceScalar_clear()
{
    _cow();
    unref(((Class*)_inst)->InstanceScalar);
    ((Class*)_inst)->InstanceScalar = 0;
}

inline Instance_Hnd Class3_Hnd::ObjectScalar_value() const
{
    if (!((Class*)_inst)->ObjectScalar)
        _throw_null_access("ObjectScalar");
    ref(((Class*)_inst)->ObjectScalar);
    return Instance_Hnd(((Class*)_inst)->ObjectScalar);
}

inline void Class3_Hnd::ObjectScalar_value(const Instance_Hnd& x)
{
    _cow();
    unref(((Class*)_inst)->ObjectScalar);
    ref(((Class*)_inst)->ObjectScalar = (Instance*)x.instance());
}

inline bool Class3_Hnd::ObjectScalar_null() const
{
    return ((Class*)_inst)->ObjectScalar == 0;
}

inline void Class3_Hnd::ObjectScalar_clear()
{
    _cow();
    unref(((Class*)_inst)->ObjectScalar);
    ((Class*)_inst)->ObjectScalar = 0;
}

inline const Array_boolean& Class3_Hnd::BooleanArray_value() const
{
    if (((Class*)_inst)->BooleanArray.null)
        _throw_null_access("BooleanArray");
   return ((Class*)_inst)->BooleanArray.value;
}

inline void Class3_Hnd::BooleanArray_value(const Array_boolean& x)
{
    _cow();
   ((Class*)_inst)->BooleanArray.value = x;
   ((Class*)_inst)->BooleanArray.null = false;
}

inline bool Class3_Hnd::BooleanArray_null() const
{
   return ((Class*)_inst)->BooleanArray.null;
}

inline void Class3_Hnd::BooleanArray_clear()
{
    _cow();
    __clear(((Class*)_inst)->BooleanArray.value);
    ((Class*)_inst)->BooleanArray.null = true;;
}

inline const Array_uint8& Class3_Hnd::Uint8Array_value() const
{
    if (((Class*)_inst)->Uint8Array.null)
        _throw_null_access("Uint8Array");
   return ((Class*)_inst)->Uint8Array.value;
}

inline void Class3_Hnd::Uint8Array_value(const Array_uint8& x)
{
    _cow();
   ((Class*)_inst)->Uint8Array.value = x;
   ((Class*)_inst)->Uint8Array.null = false;
}

inline bool Class3_Hnd::Uint8Array_null() const
{
   return ((Class*)_inst)->Uint8Array.null;
}

inline void Class3_Hnd::Uint8Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->Uint8Array.value);
    ((Class*)_inst)->Uint8Array.null = true;;
}

inline const Array_sint8& Class3_Hnd::Sint8Array_value() const
{
    if (((Class*)_inst)->Sint8Array.null)
        _throw_null_access("Sint8Array");
   return ((Class*)_inst)->Sint8Array.value;
}

inline void Class3_Hnd::Sint8Array_value(const Array_sint8& x)
{
    _cow();
   ((Class*)_inst)->Sint8Array.value = x;
   ((Class*)_inst)->Sint8Array.null = false;
}

inline bool Class3_Hnd::Sint8Array_null() const
{
   return ((Class*)_inst)->Sint8Array.null;
}

inline void Class3_Hnd::Sint8Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->Sint8Array.value);
    ((Class*)_inst)->Sint8Array.null = true;;
}

inline const Array_uint16& Class3_Hnd::Uint16Array_value() const
{
    if (((Class*)_inst)->Uint16Array.null)
        _throw_null_access("Uint16Array");
   return ((Class*)_inst)->Uint16Array.value;
}

inline void Class3_Hnd::Uint16Array_value(const Array_uint16& x)
{
    _cow();
   ((Class*)_inst)->Uint16Array.value = x;
   ((Class*)_inst)->Uint16Array.null = false;
}

inline bool Class3_Hnd::Uint16Array_null() const
{
   return ((Class*)_inst)->Uint16Array.null;
}

inline void Class3_Hnd::Uint16Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->Uint16Array.value);
    ((Class*)_inst)->Uint16Array.null = true;;
}

inline const Array_sint16& Class3_Hnd::Sint16Array_value() const
{
    if (((Class*)_inst)->Sint16Array.null)
        _throw_null_access("Sint16Array");
   return ((Class*)_inst)->Sint16Array.value;
}

inline void Class3_Hnd::Sint16Array_value(const Array_sint16& x)
{
    _cow();
   ((Class*)_inst)->Sint16Array.value = x;
   ((Class*)_inst)->Sint16Array.null = false;
}

inline bool Class3_Hnd::Sint16Array_null() const
{
   return ((Class*)_inst)->Sint16Array.null;
}

inline void Class3_Hnd::Sint16Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->Sint16Array.value);
    ((Class*)_inst)->Sint16Array.null = true;;
}

inline const Array_uint32& Class3_Hnd::Uint32Array_value() const
{
    if (((Class*)_inst)->Uint32Array.null)
        _throw_null_access("Uint32Array");
   return ((Class*)_inst)->Uint32Array.value;
}

inline void Class3_Hnd::Uint32Array_value(const Array_uint32& x)
{
    _cow();
   ((Class*)_inst)->Uint32Array.value = x;
   ((Class*)_inst)->Uint32Array.null = false;
}

inline bool Class3_Hnd::Uint32Array_null() const
{
   return ((Class*)_inst)->Uint32Array.null;
}

inline void Class3_Hnd::Uint32Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->Uint32Array.value);
    ((Class*)_inst)->Uint32Array.null = true;;
}

inline const Array_sint32& Class3_Hnd::Sint32Array_value() const
{
    if (((Class*)_inst)->Sint32Array.null)
        _throw_null_access("Sint32Array");
   return ((Class*)_inst)->Sint32Array.value;
}

inline void Class3_Hnd::Sint32Array_value(const Array_sint32& x)
{
    _cow();
   ((Class*)_inst)->Sint32Array.value = x;
   ((Class*)_inst)->Sint32Array.null = false;
}

inline bool Class3_Hnd::Sint32Array_null() const
{
   return ((Class*)_inst)->Sint32Array.null;
}

inline void Class3_Hnd::Sint32Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->Sint32Array.value);
    ((Class*)_inst)->Sint32Array.null = true;;
}

inline const Array_uint64& Class3_Hnd::Uint64Array_value() const
{
    if (((Class*)_inst)->Uint64Array.null)
        _throw_null_access("Uint64Array");
   return ((Class*)_inst)->Uint64Array.value;
}

inline void Class3_Hnd::Uint64Array_value(const Array_uint64& x)
{
    _cow();
   ((Class*)_inst)->Uint64Array.value = x;
   ((Class*)_inst)->Uint64Array.null = false;
}

inline bool Class3_Hnd::Uint64Array_null() const
{
   return ((Class*)_inst)->Uint64Array.null;
}

inline void Class3_Hnd::Uint64Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->Uint64Array.value);
    ((Class*)_inst)->Uint64Array.null = true;;
}

inline const Array_sint64& Class3_Hnd::Sint64Array_value() const
{
    if (((Class*)_inst)->Sint64Array.null)
        _throw_null_access("Sint64Array");
   return ((Class*)_inst)->Sint64Array.value;
}

inline void Class3_Hnd::Sint64Array_value(const Array_sint64& x)
{
    _cow();
   ((Class*)_inst)->Sint64Array.value = x;
   ((Class*)_inst)->Sint64Array.null = false;
}

inline bool Class3_Hnd::Sint64Array_null() const
{
   return ((Class*)_inst)->Sint64Array.null;
}

inline void Class3_Hnd::Sint64Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->Sint64Array.value);
    ((Class*)_inst)->Sint64Array.null = true;;
}

inline const Array_real32& Class3_Hnd::Real32Array_value() const
{
    if (((Class*)_inst)->Real32Array.null)
        _throw_null_access("Real32Array");
   return ((Class*)_inst)->Real32Array.value;
}

inline void Class3_Hnd::Real32Array_value(const Array_real32& x)
{
    _cow();
   ((Class*)_inst)->Real32Array.value = x;
   ((Class*)_inst)->Real32Array.null = false;
}

inline bool Class3_Hnd::Real32Array_null() const
{
   return ((Class*)_inst)->Real32Array.null;
}

inline void Class3_Hnd::Real32Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->Real32Array.value);
    ((Class*)_inst)->Real32Array.null = true;;
}

inline const Array_real64& Class3_Hnd::Real64Array_value() const
{
    if (((Class*)_inst)->Real64Array.null)
        _throw_null_access("Real64Array");
   return ((Class*)_inst)->Real64Array.value;
}

inline void Class3_Hnd::Real64Array_value(const Array_real64& x)
{
    _cow();
   ((Class*)_inst)->Real64Array.value = x;
   ((Class*)_inst)->Real64Array.null = false;
}

inline bool Class3_Hnd::Real64Array_null() const
{
   return ((Class*)_inst)->Real64Array.null;
}

inline void Class3_Hnd::Real64Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->Real64Array.value);
    ((Class*)_inst)->Real64Array.null = true;;
}

inline const Array_char16& Class3_Hnd::Char16Array_value() const
{
    if (((Class*)_inst)->Char16Array.null)
        _throw_null_access("Char16Array");
   return ((Class*)_inst)->Char16Array.value;
}

inline void Class3_Hnd::Char16Array_value(const Array_char16& x)
{
    _cow();
   ((Class*)_inst)->Char16Array.value = x;
   ((Class*)_inst)->Char16Array.null = false;
}

inline bool Class3_Hnd::Char16Array_null() const
{
   return ((Class*)_inst)->Char16Array.null;
}

inline void Class3_Hnd::Char16Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->Char16Array.value);
    ((Class*)_inst)->Char16Array.null = true;;
}

inline const Array_String& Class3_Hnd::StringArray_value() const
{
    if (((Class*)_inst)->StringArray.null)
        _throw_null_access("StringArray");
   return ((Class*)_inst)->StringArray.value;
}

inline void Class3_Hnd::StringArray_value(const Array_String& x)
{
    _cow();
   ((Class*)_inst)->StringArray.value = x;
   ((Class*)_inst)->StringArray.null = false;
}

inline bool Class3_Hnd::StringArray_null() const
{
   return ((Class*)_inst)->StringArray.null;
}

inline void Class3_Hnd::StringArray_clear()
{
    _cow();
    __clear(((Class*)_inst)->StringArray.value);
    ((Class*)_inst)->StringArray.null = true;;
}

inline const Array_Datetime& Class3_Hnd::DatetimeArray_value() const
{
    if (((Class*)_inst)->DatetimeArray.null)
        _throw_null_access("DatetimeArray");
   return ((Class*)_inst)->DatetimeArray.value;
}

inline void Class3_Hnd::DatetimeArray_value(const Array_Datetime& x)
{
    _cow();
   ((Class*)_inst)->DatetimeArray.value = x;
   ((Class*)_inst)->DatetimeArray.null = false;
}

inline bool Class3_Hnd::DatetimeArray_null() const
{
   return ((Class*)_inst)->DatetimeArray.null;
}

inline void Class3_Hnd::DatetimeArray_clear()
{
    _cow();
    __clear(((Class*)_inst)->DatetimeArray.value);
    ((Class*)_inst)->DatetimeArray.null = true;;
}

inline Array<Class1_Hnd> Class3_Hnd::InstanceArray_value() const
{
    Array<Class1_Hnd> tmp;
    _get_inst_array(&((Class*)_inst)->InstanceArray, &tmp);
    return tmp;
}

inline void Class3_Hnd::InstanceArray_value(const Array<Class1_Hnd>& x)
{
    _cow();
    _set_inst_array(&((Class*)_inst)->InstanceArray, &x);
    ((Class*)_inst)->InstanceArray.null = 0;
}

inline bool Class3_Hnd::InstanceArray_null() const
{
    return ((Class*)_inst)->InstanceArray.null;
}

inline void Class3_Hnd::InstanceArray_clear()
{
    _cow();
    _clear_inst_array(&((Class*)_inst)->InstanceArray);
    ((Class*)_inst)->InstanceArray.null = 1;
}

inline Array<Instance_Hnd> Class3_Hnd::ObjectArray_value() const
{
    Array<Instance_Hnd> tmp;
    _get_inst_array(&((Class*)_inst)->ObjectArray, &tmp);
    return tmp;
}

inline void Class3_Hnd::ObjectArray_value(const Array<Instance_Hnd>& x)
{
    _cow();
    _set_inst_array(&((Class*)_inst)->ObjectArray, &x);
    ((Class*)_inst)->ObjectArray.null = 0;
}

inline bool Class3_Hnd::ObjectArray_null() const
{
    return ((Class*)_inst)->ObjectArray.null;
}

inline void Class3_Hnd::ObjectArray_clear()
{
    _cow();
    _clear_inst_array(&((Class*)_inst)->ObjectArray);
    ((Class*)_inst)->ObjectArray.null = 1;
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_Class3_Hnd_h */
