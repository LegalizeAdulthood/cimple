//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENHND.
//
//==============================================================================

#ifndef _cimple_President_Hnd
#define _cimple_President_Hnd

#include <cimple/cimple.h>
#include "President.h"

CIMPLE_NAMESPACE_BEGIN

class President_Ref : public Instance_Ref
{
public:
    typedef President Class;
    President_Ref();
    President_Ref(const President_Ref& x);
    President_Ref(President* inst);
    explicit President_Ref(const Instance_Ref& x);
    ~President_Ref();
    President_Ref& operator=(const President_Ref& x);

    // Number:
    const uint32& Number_value() const;
    void Number_value(const uint32& x);
    bool Number_null() const;
    void Number_clear();

protected:
    President_Ref(const Meta_Class* mc);
    President_Ref(const Meta_Class* mc, const Instance_Ref& x);
};

inline President_Ref::President_Ref() :
    Instance_Ref(&President::static_meta_class)
{
}

inline President_Ref::President_Ref(const President_Ref& x) :
    Instance_Ref(x)
{
}

inline President_Ref::President_Ref(President* inst) :
    Instance_Ref((Instance*)inst)
{
}

inline President_Ref::President_Ref(const Instance_Ref& x) : 
    Instance_Ref(&President::static_meta_class, x)
{
}

inline President_Ref::President_Ref(const Meta_Class* mc) : Instance_Ref(mc)
{
}

inline President_Ref::President_Ref(const Meta_Class* mc, const Instance_Ref& x) : Instance_Ref(mc, x)
{
}

inline President_Ref::~President_Ref()
{
}

inline President_Ref& President_Ref::operator=(const President_Ref& x)
{
    Instance_Ref::operator=(x);
    return *this;
}

inline const uint32& President_Ref::Number_value() const
{
    if (((Class*)_inst)->Number.null)
        _throw_null_access("Number");
   return ((Class*)_inst)->Number.value;
}

inline void President_Ref::Number_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->Number.value = x;
   ((Class*)_inst)->Number.null = false;
}

inline bool President_Ref::Number_null() const
{
   return ((Class*)_inst)->Number.null;
}

inline void President_Ref::Number_clear()
{
    _cow();
    __clear(((Class*)_inst)->Number.value);
    ((Class*)_inst)->Number.null = true;;
}

class President_Hnd : public Instance_Hnd
{
public:
    typedef President Class;
    President_Hnd();
    President_Hnd(const President_Hnd& x);
    President_Hnd(President* inst);
    explicit President_Hnd(const Instance_Hnd& x);
    ~President_Hnd();
    President_Hnd& operator=(const President_Hnd& x);
    President_Ref reference() const;

    // Number:
    const uint32& Number_value() const;
    void Number_value(const uint32& x);
    bool Number_null() const;
    void Number_clear();

    // First:
    const String& First_value() const;
    void First_value(const String& x);
    bool First_null() const;
    void First_clear();

    // Last:
    const String& Last_value() const;
    void Last_value(const String& x);
    bool Last_null() const;
    void Last_clear();

protected:
    President_Hnd(const Meta_Class* mc);
    President_Hnd(const Meta_Class* mc, const Instance_Hnd& x);
};

inline President_Hnd::President_Hnd() :
    Instance_Hnd(&President::static_meta_class)
{
}

inline President_Hnd::President_Hnd(const President_Hnd& x) :
    Instance_Hnd(x)
{
}

inline President_Hnd::President_Hnd(President* inst) :
    Instance_Hnd((Instance*)inst)
{
}

inline President_Hnd::President_Hnd(const Instance_Hnd& x) : 
    Instance_Hnd(&President::static_meta_class, x)
{
}

inline President_Hnd::President_Hnd(const Meta_Class* mc) : Instance_Hnd(mc)
{
}

inline President_Hnd::President_Hnd(const Meta_Class* mc, const Instance_Hnd& x) : Instance_Hnd(mc, x)
{
}

inline President_Hnd::~President_Hnd()
{
}

inline President_Hnd& President_Hnd::operator=(const President_Hnd& x)
{
    Instance_Hnd::operator=(x);
    return *this;
}

inline President_Ref President_Hnd::reference() const
{
    return President_Ref((President*)key_clone(_inst));
}

inline const uint32& President_Hnd::Number_value() const
{
    if (((Class*)_inst)->Number.null)
        _throw_null_access("Number");
   return ((Class*)_inst)->Number.value;
}

inline void President_Hnd::Number_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->Number.value = x;
   ((Class*)_inst)->Number.null = false;
}

inline bool President_Hnd::Number_null() const
{
   return ((Class*)_inst)->Number.null;
}

inline void President_Hnd::Number_clear()
{
    _cow();
    __clear(((Class*)_inst)->Number.value);
    ((Class*)_inst)->Number.null = true;;
}

inline const String& President_Hnd::First_value() const
{
    if (((Class*)_inst)->First.null)
        _throw_null_access("First");
   return ((Class*)_inst)->First.value;
}

inline void President_Hnd::First_value(const String& x)
{
    _cow();
   ((Class*)_inst)->First.value = x;
   ((Class*)_inst)->First.null = false;
}

inline bool President_Hnd::First_null() const
{
   return ((Class*)_inst)->First.null;
}

inline void President_Hnd::First_clear()
{
    _cow();
    __clear(((Class*)_inst)->First.value);
    ((Class*)_inst)->First.null = true;;
}

inline const String& President_Hnd::Last_value() const
{
    if (((Class*)_inst)->Last.null)
        _throw_null_access("Last");
   return ((Class*)_inst)->Last.value;
}

inline void President_Hnd::Last_value(const String& x)
{
    _cow();
   ((Class*)_inst)->Last.value = x;
   ((Class*)_inst)->Last.null = false;
}

inline bool President_Hnd::Last_null() const
{
   return ((Class*)_inst)->Last.null;
}

inline void President_Hnd::Last_clear()
{
    _cow();
    __clear(((Class*)_inst)->Last.value);
    ((Class*)_inst)->Last.null = true;;
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_President_Hnd_h */
