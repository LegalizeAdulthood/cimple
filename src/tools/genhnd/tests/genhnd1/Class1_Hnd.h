//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENHND.
//
//==============================================================================

#ifndef _cimple_Class1_Hnd
#define _cimple_Class1_Hnd

#include <cimple/cimple.h>
#include "Class1.h"

CIMPLE_NAMESPACE_BEGIN

class Class1_Ref : public Instance_Ref
{
public:
    typedef Class1 Class;
    Class1_Ref();
    Class1_Ref(const Class1_Ref& x);
    Class1_Ref(Class1* inst);
    explicit Class1_Ref(const Instance_Ref& x);
    ~Class1_Ref();
    Class1_Ref& operator=(const Class1_Ref& x);
    static bool is_a(const Instance_Ref& x);

    // Key:
    const uint32& Key_value() const;
    void Key_value(const uint32& x);
    bool Key_null() const;
    void Key_clear();

protected:
    Class1_Ref(const Meta_Class* mc);
    Class1_Ref(const Meta_Class* mc, const Instance_Ref& x);
};

class Class1_Hnd : public Instance_Hnd
{
public:
    typedef Class1 Class;
    Class1_Hnd();
    Class1_Hnd(const Class1_Hnd& x);
    Class1_Hnd(Class1* inst);
    explicit Class1_Hnd(const Instance_Hnd& x);
    ~Class1_Hnd();
    Class1_Hnd& operator=(const Class1_Hnd& x);
    static bool is_a(const Instance_Hnd& x);
    Class1_Ref reference() const;

    // Key:
    const uint32& Key_value() const;
    void Key_value(const uint32& x);
    bool Key_null() const;
    void Key_clear();

protected:
    Class1_Hnd(const Meta_Class* mc);
    Class1_Hnd(const Meta_Class* mc, const Instance_Hnd& x);
};

inline Class1_Ref::Class1_Ref() :
    Instance_Ref(&Class1::static_meta_class)
{
}

inline Class1_Ref::Class1_Ref(const Class1_Ref& x) :
    Instance_Ref(x)
{
}

inline Class1_Ref::Class1_Ref(Class1* inst) :
    Instance_Ref((Instance*)inst)
{
}

inline Class1_Ref::Class1_Ref(const Instance_Ref& x) : 
    Instance_Ref(&Class1::static_meta_class, x)
{
}

inline Class1_Ref::Class1_Ref(const Meta_Class* mc) : Instance_Ref(mc)
{
}

inline Class1_Ref::Class1_Ref(const Meta_Class* mc, const Instance_Ref& x) : Instance_Ref(mc, x)
{
}

inline Class1_Ref::~Class1_Ref()
{
}

inline Class1_Ref& Class1_Ref::operator=(const Class1_Ref& x)
{
    Instance_Ref::operator=(x);
    return *this;
}

inline bool Class1_Ref::is_a(const Instance_Ref& x)
{
    return is_subclass(&Class1::static_meta_class, x.meta_class());
}

inline const uint32& Class1_Ref::Key_value() const
{
    if (((Class*)_inst)->Key.null)
        _throw_null_access("Key");
   return ((Class*)_inst)->Key.value;
}

inline void Class1_Ref::Key_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->Key.value = x;
   ((Class*)_inst)->Key.null = false;
}

inline bool Class1_Ref::Key_null() const
{
   return ((Class*)_inst)->Key.null;
}

inline void Class1_Ref::Key_clear()
{
    _cow();
    __clear(((Class*)_inst)->Key.value);
    ((Class*)_inst)->Key.null = true;;
}

inline Class1_Hnd::Class1_Hnd() :
    Instance_Hnd(&Class1::static_meta_class)
{
}

inline Class1_Hnd::Class1_Hnd(const Class1_Hnd& x) :
    Instance_Hnd(x)
{
}

inline Class1_Hnd::Class1_Hnd(Class1* inst) :
    Instance_Hnd((Instance*)inst)
{
}

inline Class1_Hnd::Class1_Hnd(const Instance_Hnd& x) : 
    Instance_Hnd(&Class1::static_meta_class, x)
{
}

inline Class1_Hnd::Class1_Hnd(const Meta_Class* mc) : Instance_Hnd(mc)
{
}

inline Class1_Hnd::Class1_Hnd(const Meta_Class* mc, const Instance_Hnd& x) : Instance_Hnd(mc, x)
{
}

inline Class1_Hnd::~Class1_Hnd()
{
}

inline Class1_Hnd& Class1_Hnd::operator=(const Class1_Hnd& x)
{
    Instance_Hnd::operator=(x);
    return *this;
}

inline bool Class1_Hnd::is_a(const Instance_Hnd& x)
{
    return is_subclass(&Class1::static_meta_class, x.meta_class());
}

inline Class1_Ref Class1_Hnd::reference() const
{
    return Class1_Ref((Class1*)key_clone(_inst));
}

inline const uint32& Class1_Hnd::Key_value() const
{
    if (((Class*)_inst)->Key.null)
        _throw_null_access("Key");
   return ((Class*)_inst)->Key.value;
}

inline void Class1_Hnd::Key_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->Key.value = x;
   ((Class*)_inst)->Key.null = false;
}

inline bool Class1_Hnd::Key_null() const
{
   return ((Class*)_inst)->Key.null;
}

inline void Class1_Hnd::Key_clear()
{
    _cow();
    __clear(((Class*)_inst)->Key.value);
    ((Class*)_inst)->Key.null = true;;
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_Class1_Hnd_h */
