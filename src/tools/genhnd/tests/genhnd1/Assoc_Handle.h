//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENCLASS.
//
//==============================================================================

#ifndef _cimple_Assoc_Handle_h
#define _cimple_Assoc_Handle_h

#include <cimple/cimple.h>
#include "Assoc.h"
#include "CIM_Job_Handle.h"
#include "CIM_Job_Handle.h"

CIMPLE_NAMESPACE_BEGIN

class Assoc_Reference : public Reference
{
public:

    typedef Assoc Class;
    typedef Assoc_Reference REFERENCE;

    Assoc_Reference();

    Assoc_Reference(const Assoc_Reference& x);

    Assoc_Reference(Assoc* inst);

    template<class CLASS>
    explicit Assoc_Reference(const CLASS& x);

    ~Assoc_Reference();

    Assoc_Reference& operator=(const Assoc_Reference& x);

    // Left:
    CIM_Job_Reference get_Left() const;
    void set_Left(const CIM_Job_Reference& x);

    // Right:
    CIM_Job_Reference get_Right() const;
    void set_Right(const CIM_Job_Reference& x);
};

class Assoc_Handle : public Handle
{
public:

    typedef Assoc Class;
    typedef Assoc_Reference REFERENCE;

    Assoc_Handle();

    Assoc_Handle(const Assoc_Handle& x);

    Assoc_Handle(Assoc* inst);

    template<class CLASS>
    explicit Assoc_Handle(const CLASS& x);

    ~Assoc_Handle();

    Assoc_Handle& operator=(const Assoc_Handle& x);

    // Left:
    CIM_Job_Reference get_Left() const;
    void set_Left(const CIM_Job_Reference& x);

    // Right:
    CIM_Job_Reference get_Right() const;
    void set_Right(const CIM_Job_Reference& x);
};

inline Assoc_Reference::Assoc_Reference()
{
    _inst = Assoc::create(true);
    __create_refs(_inst);
}

inline Assoc_Reference::Assoc_Reference(const Assoc_Reference& x) : Reference(x)
{
}

inline Assoc_Reference::Assoc_Reference(Assoc* inst)
{
    _inst = inst;
    __create_refs(_inst);
}

template<class CLASS>
inline Assoc_Reference::Assoc_Reference(const CLASS& x)
{
    _construct(*this, Class::static_meta_class, x);
}

inline Assoc_Reference::~Assoc_Reference()
{
}

inline Assoc_Reference& Assoc_Reference::operator=(const Assoc_Reference& x)
{
    Reference::operator=(x);
    return *this;
}

inline CIM_Job_Reference Assoc_Reference::get_Left() const
{
    ref(((Assoc*)_inst)->Left);
    return CIM_Job_Reference(((Assoc*)_inst)->Left);
}

inline void Assoc_Reference::set_Left(const CIM_Job_Reference& x)
{
    _cow();
    unref(((Assoc*)_inst)->Left);
    ref(((Assoc*)_inst)->Left = (CIM_Job*)x.instance());
}

inline CIM_Job_Reference Assoc_Reference::get_Right() const
{
    ref(((Assoc*)_inst)->Right);
    return CIM_Job_Reference(((Assoc*)_inst)->Right);
}

inline void Assoc_Reference::set_Right(const CIM_Job_Reference& x)
{
    _cow();
    unref(((Assoc*)_inst)->Right);
    ref(((Assoc*)_inst)->Right = (CIM_Job*)x.instance());
}

inline Assoc_Handle::Assoc_Handle()
{
    _inst = Assoc::create(true);
    __create_refs(_inst);
}

inline Assoc_Handle::Assoc_Handle(const Assoc_Handle& x) : Handle(x)
{
}

inline Assoc_Handle::Assoc_Handle(Assoc* inst)
{
    _inst = inst;
    __create_refs(_inst);
}

template<class CLASS>
inline Assoc_Handle::Assoc_Handle(const CLASS& x)
{
    _construct(*this, Class::static_meta_class, x);
}

inline Assoc_Handle::~Assoc_Handle()
{
}

inline Assoc_Handle& Assoc_Handle::operator=(const Assoc_Handle& x)
{
    Handle::operator=(x);
    return *this;
}

inline CIM_Job_Reference Assoc_Handle::get_Left() const
{
    ref(((Assoc*)_inst)->Left);
    return CIM_Job_Reference(((Assoc*)_inst)->Left);
}

inline void Assoc_Handle::set_Left(const CIM_Job_Reference& x)
{
    _cow();
    unref(((Assoc*)_inst)->Left);
    ref(((Assoc*)_inst)->Left = (CIM_Job*)x.instance());
}

inline CIM_Job_Reference Assoc_Handle::get_Right() const
{
    ref(((Assoc*)_inst)->Right);
    return CIM_Job_Reference(((Assoc*)_inst)->Right);
}

inline void Assoc_Handle::set_Right(const CIM_Job_Reference& x)
{
    _cow();
    unref(((Assoc*)_inst)->Right);
    ref(((Assoc*)_inst)->Right = (CIM_Job*)x.instance());
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_Assoc_Handle_h */
