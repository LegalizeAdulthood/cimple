//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENCLASS.
//
//==============================================================================

#ifndef _cimple_CIM_Job_Handle_h
#define _cimple_CIM_Job_Handle_h

#include <cimple/cimple.h>
#include "CIM_Job.h"
#include "CIM_LogicalElement_Handle.h"

CIMPLE_NAMESPACE_BEGIN

class CIM_Job_Reference : public CIM_LogicalElement_Reference
{
public:

    typedef CIM_Job Class;
    typedef CIM_Job_Reference REFERENCE;

    CIM_Job_Reference();

    CIM_Job_Reference(const CIM_Job_Reference& x);

    CIM_Job_Reference(CIM_Job* inst);

    template<class CLASS>
    explicit CIM_Job_Reference(const CLASS& x);

    ~CIM_Job_Reference();

    CIM_Job_Reference& operator=(const CIM_Job_Reference& x);
};

class CIM_Job_Handle : public CIM_LogicalElement_Handle
{
public:

    typedef CIM_Job Class;
    typedef CIM_Job_Reference REFERENCE;

    CIM_Job_Handle();

    CIM_Job_Handle(const CIM_Job_Handle& x);

    CIM_Job_Handle(CIM_Job* inst);

    template<class CLASS>
    explicit CIM_Job_Handle(const CLASS& x);

    ~CIM_Job_Handle();

    CIM_Job_Handle& operator=(const CIM_Job_Handle& x);

    // JobStatus:
    const Property<String>& get_JobStatus() const;
    void set_JobStatus(const String& x);
    void clear_JobStatus();

    // TimeSubmitted:
    const Property<Datetime>& get_TimeSubmitted() const;
    void set_TimeSubmitted(const Datetime& x);
    void clear_TimeSubmitted();

    // ScheduledStartTime:
    const Property<Datetime>& get_ScheduledStartTime() const;
    void set_ScheduledStartTime(const Datetime& x);
    void clear_ScheduledStartTime();

    // StartTime:
    const Property<Datetime>& get_StartTime() const;
    void set_StartTime(const Datetime& x);
    void clear_StartTime();

    // ElapsedTime:
    const Property<Datetime>& get_ElapsedTime() const;
    void set_ElapsedTime(const Datetime& x);
    void clear_ElapsedTime();

    // JobRunTimes:
    const Property<uint32>& get_JobRunTimes() const;
    void set_JobRunTimes(const uint32& x);
    void clear_JobRunTimes();

    // RunMonth:
    const Property<uint8>& get_RunMonth() const;
    void set_RunMonth(const uint8& x);
    void clear_RunMonth();

    // RunDay:
    const Property<sint8>& get_RunDay() const;
    void set_RunDay(const sint8& x);
    void clear_RunDay();

    // RunDayOfWeek:
    const Property<sint8>& get_RunDayOfWeek() const;
    void set_RunDayOfWeek(const sint8& x);
    void clear_RunDayOfWeek();

    // RunStartInterval:
    const Property<Datetime>& get_RunStartInterval() const;
    void set_RunStartInterval(const Datetime& x);
    void clear_RunStartInterval();

    // LocalOrUtcTime:
    const Property<uint16>& get_LocalOrUtcTime() const;
    void set_LocalOrUtcTime(const uint16& x);
    void clear_LocalOrUtcTime();

    // UntilTime:
    const Property<Datetime>& get_UntilTime() const;
    void set_UntilTime(const Datetime& x);
    void clear_UntilTime();

    // Notify:
    const Property<String>& get_Notify() const;
    void set_Notify(const String& x);
    void clear_Notify();

    // Owner:
    const Property<String>& get_Owner() const;
    void set_Owner(const String& x);
    void clear_Owner();

    // Priority:
    const Property<uint32>& get_Priority() const;
    void set_Priority(const uint32& x);
    void clear_Priority();

    // PercentComplete:
    const Property<uint16>& get_PercentComplete() const;
    void set_PercentComplete(const uint16& x);
    void clear_PercentComplete();

    // DeleteOnCompletion:
    const Property<boolean>& get_DeleteOnCompletion() const;
    void set_DeleteOnCompletion(const boolean& x);
    void clear_DeleteOnCompletion();

    // ErrorCode:
    const Property<uint16>& get_ErrorCode() const;
    void set_ErrorCode(const uint16& x);
    void clear_ErrorCode();

    // ErrorDescription:
    const Property<String>& get_ErrorDescription() const;
    void set_ErrorDescription(const String& x);
    void clear_ErrorDescription();

    // RecoveryAction:
    const Property<uint16>& get_RecoveryAction() const;
    void set_RecoveryAction(const uint16& x);
    void clear_RecoveryAction();

    // OtherRecoveryAction:
    const Property<String>& get_OtherRecoveryAction() const;
    void set_OtherRecoveryAction(const String& x);
    void clear_OtherRecoveryAction();
};

inline CIM_Job_Reference::CIM_Job_Reference()
{
    _inst = CIM_Job::create(true);
}

inline CIM_Job_Reference::CIM_Job_Reference(const CIM_Job_Reference& x) : CIM_LogicalElement_Reference(x)
{
}

inline CIM_Job_Reference::CIM_Job_Reference(CIM_Job* inst)
{
    _inst = inst;
}

template<class CLASS>
inline CIM_Job_Reference::CIM_Job_Reference(const CLASS& x)
{
    _construct(*this, Class::static_meta_class, x);
}

inline CIM_Job_Reference::~CIM_Job_Reference()
{
}

inline CIM_Job_Reference& CIM_Job_Reference::operator=(const CIM_Job_Reference& x)
{
    CIM_LogicalElement_Reference::operator=(x);
    return *this;
}

inline CIM_Job_Handle::CIM_Job_Handle()
{
    _inst = CIM_Job::create(true);
}

inline CIM_Job_Handle::CIM_Job_Handle(const CIM_Job_Handle& x) : CIM_LogicalElement_Handle(x)
{
}

inline CIM_Job_Handle::CIM_Job_Handle(CIM_Job* inst)
{
    _inst = inst;
}

template<class CLASS>
inline CIM_Job_Handle::CIM_Job_Handle(const CLASS& x)
{
    _construct(*this, Class::static_meta_class, x);
}

inline CIM_Job_Handle::~CIM_Job_Handle()
{
}

inline CIM_Job_Handle& CIM_Job_Handle::operator=(const CIM_Job_Handle& x)
{
    CIM_LogicalElement_Handle::operator=(x);
    return *this;
}

inline const Property<String>& CIM_Job_Handle::get_JobStatus() const
{
    return ((CIM_Job*)_inst)->JobStatus;
}

inline void CIM_Job_Handle::set_JobStatus(const String& x)
{
    _cow();
    ((CIM_Job*)_inst)->JobStatus.null = false;
    ((CIM_Job*)_inst)->JobStatus.value = x;
}

inline void CIM_Job_Handle::clear_JobStatus()
{
    _cow();
    ((CIM_Job*)_inst)->JobStatus.null = true;
    __clear(((CIM_Job*)_inst)->JobStatus.value);
}

inline const Property<Datetime>& CIM_Job_Handle::get_TimeSubmitted() const
{
    return ((CIM_Job*)_inst)->TimeSubmitted;
}

inline void CIM_Job_Handle::set_TimeSubmitted(const Datetime& x)
{
    _cow();
    ((CIM_Job*)_inst)->TimeSubmitted.null = false;
    ((CIM_Job*)_inst)->TimeSubmitted.value = x;
}

inline void CIM_Job_Handle::clear_TimeSubmitted()
{
    _cow();
    ((CIM_Job*)_inst)->TimeSubmitted.null = true;
    __clear(((CIM_Job*)_inst)->TimeSubmitted.value);
}

inline const Property<Datetime>& CIM_Job_Handle::get_ScheduledStartTime() const
{
    return ((CIM_Job*)_inst)->ScheduledStartTime;
}

inline void CIM_Job_Handle::set_ScheduledStartTime(const Datetime& x)
{
    _cow();
    ((CIM_Job*)_inst)->ScheduledStartTime.null = false;
    ((CIM_Job*)_inst)->ScheduledStartTime.value = x;
}

inline void CIM_Job_Handle::clear_ScheduledStartTime()
{
    _cow();
    ((CIM_Job*)_inst)->ScheduledStartTime.null = true;
    __clear(((CIM_Job*)_inst)->ScheduledStartTime.value);
}

inline const Property<Datetime>& CIM_Job_Handle::get_StartTime() const
{
    return ((CIM_Job*)_inst)->StartTime;
}

inline void CIM_Job_Handle::set_StartTime(const Datetime& x)
{
    _cow();
    ((CIM_Job*)_inst)->StartTime.null = false;
    ((CIM_Job*)_inst)->StartTime.value = x;
}

inline void CIM_Job_Handle::clear_StartTime()
{
    _cow();
    ((CIM_Job*)_inst)->StartTime.null = true;
    __clear(((CIM_Job*)_inst)->StartTime.value);
}

inline const Property<Datetime>& CIM_Job_Handle::get_ElapsedTime() const
{
    return ((CIM_Job*)_inst)->ElapsedTime;
}

inline void CIM_Job_Handle::set_ElapsedTime(const Datetime& x)
{
    _cow();
    ((CIM_Job*)_inst)->ElapsedTime.null = false;
    ((CIM_Job*)_inst)->ElapsedTime.value = x;
}

inline void CIM_Job_Handle::clear_ElapsedTime()
{
    _cow();
    ((CIM_Job*)_inst)->ElapsedTime.null = true;
    __clear(((CIM_Job*)_inst)->ElapsedTime.value);
}

inline const Property<uint32>& CIM_Job_Handle::get_JobRunTimes() const
{
    return ((CIM_Job*)_inst)->JobRunTimes;
}

inline void CIM_Job_Handle::set_JobRunTimes(const uint32& x)
{
    _cow();
    ((CIM_Job*)_inst)->JobRunTimes.null = false;
    ((CIM_Job*)_inst)->JobRunTimes.value = x;
}

inline void CIM_Job_Handle::clear_JobRunTimes()
{
    _cow();
    ((CIM_Job*)_inst)->JobRunTimes.null = true;
    __clear(((CIM_Job*)_inst)->JobRunTimes.value);
}

inline const Property<uint8>& CIM_Job_Handle::get_RunMonth() const
{
    return ((CIM_Job*)_inst)->RunMonth;
}

inline void CIM_Job_Handle::set_RunMonth(const uint8& x)
{
    _cow();
    ((CIM_Job*)_inst)->RunMonth.null = false;
    ((CIM_Job*)_inst)->RunMonth.value = x;
}

inline void CIM_Job_Handle::clear_RunMonth()
{
    _cow();
    ((CIM_Job*)_inst)->RunMonth.null = true;
    __clear(((CIM_Job*)_inst)->RunMonth.value);
}

inline const Property<sint8>& CIM_Job_Handle::get_RunDay() const
{
    return ((CIM_Job*)_inst)->RunDay;
}

inline void CIM_Job_Handle::set_RunDay(const sint8& x)
{
    _cow();
    ((CIM_Job*)_inst)->RunDay.null = false;
    ((CIM_Job*)_inst)->RunDay.value = x;
}

inline void CIM_Job_Handle::clear_RunDay()
{
    _cow();
    ((CIM_Job*)_inst)->RunDay.null = true;
    __clear(((CIM_Job*)_inst)->RunDay.value);
}

inline const Property<sint8>& CIM_Job_Handle::get_RunDayOfWeek() const
{
    return ((CIM_Job*)_inst)->RunDayOfWeek;
}

inline void CIM_Job_Handle::set_RunDayOfWeek(const sint8& x)
{
    _cow();
    ((CIM_Job*)_inst)->RunDayOfWeek.null = false;
    ((CIM_Job*)_inst)->RunDayOfWeek.value = x;
}

inline void CIM_Job_Handle::clear_RunDayOfWeek()
{
    _cow();
    ((CIM_Job*)_inst)->RunDayOfWeek.null = true;
    __clear(((CIM_Job*)_inst)->RunDayOfWeek.value);
}

inline const Property<Datetime>& CIM_Job_Handle::get_RunStartInterval() const
{
    return ((CIM_Job*)_inst)->RunStartInterval;
}

inline void CIM_Job_Handle::set_RunStartInterval(const Datetime& x)
{
    _cow();
    ((CIM_Job*)_inst)->RunStartInterval.null = false;
    ((CIM_Job*)_inst)->RunStartInterval.value = x;
}

inline void CIM_Job_Handle::clear_RunStartInterval()
{
    _cow();
    ((CIM_Job*)_inst)->RunStartInterval.null = true;
    __clear(((CIM_Job*)_inst)->RunStartInterval.value);
}

inline const Property<uint16>& CIM_Job_Handle::get_LocalOrUtcTime() const
{
    return ((CIM_Job*)_inst)->LocalOrUtcTime;
}

inline void CIM_Job_Handle::set_LocalOrUtcTime(const uint16& x)
{
    _cow();
    ((CIM_Job*)_inst)->LocalOrUtcTime.null = false;
    ((CIM_Job*)_inst)->LocalOrUtcTime.value = x;
}

inline void CIM_Job_Handle::clear_LocalOrUtcTime()
{
    _cow();
    ((CIM_Job*)_inst)->LocalOrUtcTime.null = true;
    __clear(((CIM_Job*)_inst)->LocalOrUtcTime.value);
}

inline const Property<Datetime>& CIM_Job_Handle::get_UntilTime() const
{
    return ((CIM_Job*)_inst)->UntilTime;
}

inline void CIM_Job_Handle::set_UntilTime(const Datetime& x)
{
    _cow();
    ((CIM_Job*)_inst)->UntilTime.null = false;
    ((CIM_Job*)_inst)->UntilTime.value = x;
}

inline void CIM_Job_Handle::clear_UntilTime()
{
    _cow();
    ((CIM_Job*)_inst)->UntilTime.null = true;
    __clear(((CIM_Job*)_inst)->UntilTime.value);
}

inline const Property<String>& CIM_Job_Handle::get_Notify() const
{
    return ((CIM_Job*)_inst)->Notify;
}

inline void CIM_Job_Handle::set_Notify(const String& x)
{
    _cow();
    ((CIM_Job*)_inst)->Notify.null = false;
    ((CIM_Job*)_inst)->Notify.value = x;
}

inline void CIM_Job_Handle::clear_Notify()
{
    _cow();
    ((CIM_Job*)_inst)->Notify.null = true;
    __clear(((CIM_Job*)_inst)->Notify.value);
}

inline const Property<String>& CIM_Job_Handle::get_Owner() const
{
    return ((CIM_Job*)_inst)->Owner;
}

inline void CIM_Job_Handle::set_Owner(const String& x)
{
    _cow();
    ((CIM_Job*)_inst)->Owner.null = false;
    ((CIM_Job*)_inst)->Owner.value = x;
}

inline void CIM_Job_Handle::clear_Owner()
{
    _cow();
    ((CIM_Job*)_inst)->Owner.null = true;
    __clear(((CIM_Job*)_inst)->Owner.value);
}

inline const Property<uint32>& CIM_Job_Handle::get_Priority() const
{
    return ((CIM_Job*)_inst)->Priority;
}

inline void CIM_Job_Handle::set_Priority(const uint32& x)
{
    _cow();
    ((CIM_Job*)_inst)->Priority.null = false;
    ((CIM_Job*)_inst)->Priority.value = x;
}

inline void CIM_Job_Handle::clear_Priority()
{
    _cow();
    ((CIM_Job*)_inst)->Priority.null = true;
    __clear(((CIM_Job*)_inst)->Priority.value);
}

inline const Property<uint16>& CIM_Job_Handle::get_PercentComplete() const
{
    return ((CIM_Job*)_inst)->PercentComplete;
}

inline void CIM_Job_Handle::set_PercentComplete(const uint16& x)
{
    _cow();
    ((CIM_Job*)_inst)->PercentComplete.null = false;
    ((CIM_Job*)_inst)->PercentComplete.value = x;
}

inline void CIM_Job_Handle::clear_PercentComplete()
{
    _cow();
    ((CIM_Job*)_inst)->PercentComplete.null = true;
    __clear(((CIM_Job*)_inst)->PercentComplete.value);
}

inline const Property<boolean>& CIM_Job_Handle::get_DeleteOnCompletion() const
{
    return ((CIM_Job*)_inst)->DeleteOnCompletion;
}

inline void CIM_Job_Handle::set_DeleteOnCompletion(const boolean& x)
{
    _cow();
    ((CIM_Job*)_inst)->DeleteOnCompletion.null = false;
    ((CIM_Job*)_inst)->DeleteOnCompletion.value = x;
}

inline void CIM_Job_Handle::clear_DeleteOnCompletion()
{
    _cow();
    ((CIM_Job*)_inst)->DeleteOnCompletion.null = true;
    __clear(((CIM_Job*)_inst)->DeleteOnCompletion.value);
}

inline const Property<uint16>& CIM_Job_Handle::get_ErrorCode() const
{
    return ((CIM_Job*)_inst)->ErrorCode;
}

inline void CIM_Job_Handle::set_ErrorCode(const uint16& x)
{
    _cow();
    ((CIM_Job*)_inst)->ErrorCode.null = false;
    ((CIM_Job*)_inst)->ErrorCode.value = x;
}

inline void CIM_Job_Handle::clear_ErrorCode()
{
    _cow();
    ((CIM_Job*)_inst)->ErrorCode.null = true;
    __clear(((CIM_Job*)_inst)->ErrorCode.value);
}

inline const Property<String>& CIM_Job_Handle::get_ErrorDescription() const
{
    return ((CIM_Job*)_inst)->ErrorDescription;
}

inline void CIM_Job_Handle::set_ErrorDescription(const String& x)
{
    _cow();
    ((CIM_Job*)_inst)->ErrorDescription.null = false;
    ((CIM_Job*)_inst)->ErrorDescription.value = x;
}

inline void CIM_Job_Handle::clear_ErrorDescription()
{
    _cow();
    ((CIM_Job*)_inst)->ErrorDescription.null = true;
    __clear(((CIM_Job*)_inst)->ErrorDescription.value);
}

inline const Property<uint16>& CIM_Job_Handle::get_RecoveryAction() const
{
    return ((CIM_Job*)_inst)->RecoveryAction;
}

inline void CIM_Job_Handle::set_RecoveryAction(const uint16& x)
{
    _cow();
    ((CIM_Job*)_inst)->RecoveryAction.null = false;
    ((CIM_Job*)_inst)->RecoveryAction.value = x;
}

inline void CIM_Job_Handle::clear_RecoveryAction()
{
    _cow();
    ((CIM_Job*)_inst)->RecoveryAction.null = true;
    __clear(((CIM_Job*)_inst)->RecoveryAction.value);
}

inline const Property<String>& CIM_Job_Handle::get_OtherRecoveryAction() const
{
    return ((CIM_Job*)_inst)->OtherRecoveryAction;
}

inline void CIM_Job_Handle::set_OtherRecoveryAction(const String& x)
{
    _cow();
    ((CIM_Job*)_inst)->OtherRecoveryAction.null = false;
    ((CIM_Job*)_inst)->OtherRecoveryAction.value = x;
}

inline void CIM_Job_Handle::clear_OtherRecoveryAction()
{
    _cow();
    ((CIM_Job*)_inst)->OtherRecoveryAction.null = true;
    __clear(((CIM_Job*)_inst)->OtherRecoveryAction.value);
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_CIM_Job_Handle_h */
