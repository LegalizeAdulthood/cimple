//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENCLASS.
//
//==============================================================================

#ifndef _Person_h
#define _Person_h

#include <cimple/cimple.h>

CIMPLE_NAMESPACE_BEGIN

class Person : public Instance
{
public:
    // Person features:
    Property<uint32> Id;
    Property<String> LastName;
    Property<char16> MiddleInitial;
    Property<String> FirstName;
    Property<uint16> Age;

    CIMPLE_CLASS(Person)
};

class Person_Ref
{
public:
    Person_Ref();
    Person_Ref(const Person_Ref& x);
    ~Person_Ref();
    Person_Ref& operator=(const Person_Ref& x);
    Person_Ref clone() const;

private:

    Person_Ref(Instance* instance);
    Instance* _instance;
};

inline Person_Ref::Person_Ref() 
{
    _instance = Person::create();
}

inline Person_Ref::Person_Ref(const Person_Ref& x) 
{
    ref(_instance = x._instance);
}

inline Person_Ref::~Person_Ref() 
{
    unref(_instance);
}

inline Person_Ref& Person_Ref::operator=(const Person_Ref& x)
{
    if (_instance != x._instance)
        ref(_instance = x._instance);

    return *this;
}

inline Person_Ref Person_Ref::clone() const
{
    ref(_instance);
    return Person_Ref((Instance*)_instance);
}

inline Person_Ref::Person_Ref(Instance* instance) : _instance(instance)
{
}

CIMPLE_NAMESPACE_END

#endif /* _Person_h */
