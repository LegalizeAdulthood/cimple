/*NOCHKSRC*/
//==============================================================================
//
// PLEASE DO NOT EDIT; THIS FILE WAS AUTOMATICALLY GENERATED BY GENCLASS 1.0.11
//
//==============================================================================

#include <cimple/Meta_Class.h>
#include <cimple/Meta_Property.h>
#include <cimple/Meta_Reference.h>
#include "X.h"

CIMPLE_NAMESPACE_BEGIN

using namespace cimple;

extern const Meta_Repository __meta_repository_5C7103F7C4341D52A28330CB065B06FC;

extern const Meta_Reference
_X_a;

const Meta_Reference _X_a =
{
    { 0 }, /* refs */
    CIMPLE_FLAG_REFERENCE|CIMPLE_FLAG_EMBEDDED_INSTANCE,
    "a",
    0, /* meta_qualifiers */
    0, /* num_meta_qualifiers */
    0, /* subscript */
    &A::static_meta_class,
    CIMPLE_OFF(X,a)
};

static const Meta_Reference
_X_foo1_return_value =
{
    { 0 }, /* refs */
    CIMPLE_FLAG_REFERENCE|CIMPLE_FLAG_EMBEDDED_INSTANCE,
    "foo1",
    0, /* meta_qualifiers */
    0, /* num_meta_qualifiers */
    0, /* subscript */
    &B::static_meta_class,
    CIMPLE_OFF(X_foo1_method, return_value),
};

static Meta_Feature* _X_foo1_MFA[] =
{
    (Meta_Feature*)(void*)&_X_foo1_return_value
};

const Meta_Method
X_foo1_method::static_meta_class =
{
    { 0 }, /* refs */
    CIMPLE_FLAG_METHOD,
    "foo1",
    0, /* meta_qualifiers */
    0, /* num_meta_qaulifiers */
    _X_foo1_MFA,
    CIMPLE_ARRAY_SIZE(_X_foo1_MFA),
    sizeof(X_foo1_method),
    STRING,
};

static const Meta_Reference
_X_foo2_c =
{
    { 0 }, /* refs */
    CIMPLE_FLAG_REFERENCE|CIMPLE_FLAG_EMBEDDED_INSTANCE|CIMPLE_FLAG_IN|CIMPLE_FLAG_OUT,
    "c",
    0, /* meta_qualifiers */
    0, /* num_meta_qaulifiers */
    0, /* subscript */
    &C::static_meta_class,
    CIMPLE_OFF(X_foo2_method,c)
};

static const Meta_Property
_X_foo2_return_value =
{
    { 0 }, /* refs */
    CIMPLE_FLAG_PROPERTY|CIMPLE_FLAG_OUT,
    "return_value",
    0, /* meta_qualifiers */
    0, /* num_meta_qaulifiers */
    STRING,
    0,
    CIMPLE_OFF(X_foo2_method,return_value),
    0, /* value */
};

static Meta_Feature* _X_foo2_MFA[] =
{
    (Meta_Feature*)(void*)&_X_foo2_c,
    (Meta_Feature*)(void*)&_X_foo2_return_value
};

const Meta_Method
X_foo2_method::static_meta_class =
{
    { 0 }, /* refs */
    CIMPLE_FLAG_METHOD,
    "foo2",
    0, /* meta_qualifiers */
    0, /* num_meta_qaulifiers */
    _X_foo2_MFA,
    CIMPLE_ARRAY_SIZE(_X_foo2_MFA),
    sizeof(X_foo2_method),
    STRING,
};

static Meta_Feature* _X_MFA[] =
{
    (Meta_Feature*)(void*)&_X_a,
    (Meta_Feature*)(void*)&X_foo1_method::static_meta_class,
    (Meta_Feature*)(void*)&X_foo2_method::static_meta_class,
};

static const Meta_Feature_Local _locals[] =
{
    {1},
    {1},
    {1},
};

const Meta_Class X::static_meta_class =
{
    { 0 }, /* refs */
    CIMPLE_FLAG_CLASS,
    "X",
    0, /* meta_qualifiers */
    0, /* num_meta_qaulifiers */
    _X_MFA,
    CIMPLE_ARRAY_SIZE(_X_MFA),
    sizeof(X),
    _locals,
    0, /* super_class */ 
    0, /* num_keys */
    &__meta_repository_5C7103F7C4341D52A28330CB065B06FC,
};

CIMPLE_NAMESPACE_END

