//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENHND.
//
//==============================================================================

#ifndef _cimple_CIM_ConcreteJob_Hnd
#define _cimple_CIM_ConcreteJob_Hnd

#include <cimple/cimple.h>
#include "CIM_ConcreteJob.h"
#include "CIM_Job_Hnd.h"

CIMPLE_NAMESPACE_BEGIN

class CIM_ConcreteJob_Ref : public CIM_Job_Ref
{
public:
    typedef CIM_ConcreteJob Class;
    CIM_ConcreteJob_Ref();
    CIM_ConcreteJob_Ref(const CIM_ConcreteJob_Ref& x);
    CIM_ConcreteJob_Ref(CIM_ConcreteJob* inst);
    explicit CIM_ConcreteJob_Ref(const Instance_Ref& x);
    ~CIM_ConcreteJob_Ref();
    CIM_ConcreteJob_Ref& operator=(const CIM_ConcreteJob_Ref& x);
    static bool is_a(const Instance_Ref& x);

    // InstanceID:
    const String& InstanceID_value() const;
    void InstanceID_value(const String& x);
    bool InstanceID_null() const;
    void InstanceID_clear();

    Arg<uint32> RequestStateChange(
        Ops& __ops,
        const String& __name_space,
        const Arg<uint16>& RequestedState,
        const Arg<Datetime>& TimeoutPeriod);

protected:
    CIM_ConcreteJob_Ref(const Meta_Class* mc);
    CIM_ConcreteJob_Ref(const Meta_Class* mc, const Instance_Ref& x);
};

class CIM_ConcreteJob_Hnd : public CIM_Job_Hnd
{
public:
    typedef CIM_ConcreteJob Class;
    CIM_ConcreteJob_Hnd();
    CIM_ConcreteJob_Hnd(const CIM_ConcreteJob_Hnd& x);
    CIM_ConcreteJob_Hnd(CIM_ConcreteJob* inst);
    explicit CIM_ConcreteJob_Hnd(const Instance_Hnd& x);
    ~CIM_ConcreteJob_Hnd();
    CIM_ConcreteJob_Hnd& operator=(const CIM_ConcreteJob_Hnd& x);
    static bool is_a(const Instance_Hnd& x);
    CIM_ConcreteJob_Ref reference() const;

    // InstanceID:
    const String& InstanceID_value() const;
    void InstanceID_value(const String& x);
    bool InstanceID_null() const;
    void InstanceID_clear();

    // Name:
    const String& Name_value() const;
    void Name_value(const String& x);
    bool Name_null() const;
    void Name_clear();

    // JobState:
    const uint16& JobState_value() const;
    void JobState_value(const uint16& x);
    bool JobState_null() const;
    void JobState_clear();

    // TimeOfLastStateChange:
    const Datetime& TimeOfLastStateChange_value() const;
    void TimeOfLastStateChange_value(const Datetime& x);
    bool TimeOfLastStateChange_null() const;
    void TimeOfLastStateChange_clear();

    // TimeBeforeRemoval:
    const Datetime& TimeBeforeRemoval_value() const;
    void TimeBeforeRemoval_value(const Datetime& x);
    bool TimeBeforeRemoval_null() const;
    void TimeBeforeRemoval_clear();

protected:
    CIM_ConcreteJob_Hnd(const Meta_Class* mc);
    CIM_ConcreteJob_Hnd(const Meta_Class* mc, const Instance_Hnd& x);
};

inline CIM_ConcreteJob_Ref::CIM_ConcreteJob_Ref() :
    CIM_Job_Ref(&CIM_ConcreteJob::static_meta_class)
{
}

inline CIM_ConcreteJob_Ref::CIM_ConcreteJob_Ref(const CIM_ConcreteJob_Ref& x) :
    CIM_Job_Ref(x)
{
}

inline CIM_ConcreteJob_Ref::CIM_ConcreteJob_Ref(CIM_ConcreteJob* inst) :
    CIM_Job_Ref((CIM_Job*)inst)
{
}

inline CIM_ConcreteJob_Ref::CIM_ConcreteJob_Ref(const Instance_Ref& x) : 
    CIM_Job_Ref(&CIM_ConcreteJob::static_meta_class, x)
{
}

inline CIM_ConcreteJob_Ref::CIM_ConcreteJob_Ref(const Meta_Class* mc) : CIM_Job_Ref(mc)
{
}

inline CIM_ConcreteJob_Ref::CIM_ConcreteJob_Ref(const Meta_Class* mc, const Instance_Ref& x) : CIM_Job_Ref(mc, x)
{
}

inline CIM_ConcreteJob_Ref::~CIM_ConcreteJob_Ref()
{
}

inline CIM_ConcreteJob_Ref& CIM_ConcreteJob_Ref::operator=(const CIM_ConcreteJob_Ref& x)
{
    CIM_Job_Ref::operator=(x);
    return *this;
}

inline bool CIM_ConcreteJob_Ref::is_a(const Instance_Ref& x)
{
    return is_subclass(&CIM_ConcreteJob::static_meta_class, x.meta_class());
}

inline const String& CIM_ConcreteJob_Ref::InstanceID_value() const
{
    if (((Class*)_inst)->InstanceID.null)
        _throw_null_access("InstanceID");
   return ((Class*)_inst)->InstanceID.value;
}

inline void CIM_ConcreteJob_Ref::InstanceID_value(const String& x)
{
    _cow();
   ((Class*)_inst)->InstanceID.value = x;
   ((Class*)_inst)->InstanceID.null = false;
}

inline bool CIM_ConcreteJob_Ref::InstanceID_null() const
{
   return ((Class*)_inst)->InstanceID.null;
}

inline void CIM_ConcreteJob_Ref::InstanceID_clear()
{
    _cow();
    __clear(((Class*)_inst)->InstanceID.value);
    ((Class*)_inst)->InstanceID.null = true;;
}

inline Arg<uint32> CIM_ConcreteJob_Ref::RequestStateChange(
    Ops& __ops,
    const String& __name_space,
    const Arg<uint16>& RequestedState,
    const Arg<Datetime>& TimeoutPeriod)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &CIM_ConcreteJob_RequestStateChange_method::static_meta_class,
        &RequestedState,
        &TimeoutPeriod,
        &__return_value);
    return __return_value;
}

inline CIM_ConcreteJob_Hnd::CIM_ConcreteJob_Hnd() :
    CIM_Job_Hnd(&CIM_ConcreteJob::static_meta_class)
{
}

inline CIM_ConcreteJob_Hnd::CIM_ConcreteJob_Hnd(const CIM_ConcreteJob_Hnd& x) :
    CIM_Job_Hnd(x)
{
}

inline CIM_ConcreteJob_Hnd::CIM_ConcreteJob_Hnd(CIM_ConcreteJob* inst) :
    CIM_Job_Hnd((CIM_Job*)inst)
{
}

inline CIM_ConcreteJob_Hnd::CIM_ConcreteJob_Hnd(const Instance_Hnd& x) : 
    CIM_Job_Hnd(&CIM_ConcreteJob::static_meta_class, x)
{
}

inline CIM_ConcreteJob_Hnd::CIM_ConcreteJob_Hnd(const Meta_Class* mc) : CIM_Job_Hnd(mc)
{
}

inline CIM_ConcreteJob_Hnd::CIM_ConcreteJob_Hnd(const Meta_Class* mc, const Instance_Hnd& x) : CIM_Job_Hnd(mc, x)
{
}

inline CIM_ConcreteJob_Hnd::~CIM_ConcreteJob_Hnd()
{
}

inline CIM_ConcreteJob_Hnd& CIM_ConcreteJob_Hnd::operator=(const CIM_ConcreteJob_Hnd& x)
{
    CIM_Job_Hnd::operator=(x);
    return *this;
}

inline bool CIM_ConcreteJob_Hnd::is_a(const Instance_Hnd& x)
{
    return is_subclass(&CIM_ConcreteJob::static_meta_class, x.meta_class());
}

inline CIM_ConcreteJob_Ref CIM_ConcreteJob_Hnd::reference() const
{
    return CIM_ConcreteJob_Ref((CIM_ConcreteJob*)key_clone(_inst));
}

inline const String& CIM_ConcreteJob_Hnd::InstanceID_value() const
{
    if (((Class*)_inst)->InstanceID.null)
        _throw_null_access("InstanceID");
   return ((Class*)_inst)->InstanceID.value;
}

inline void CIM_ConcreteJob_Hnd::InstanceID_value(const String& x)
{
    _cow();
   ((Class*)_inst)->InstanceID.value = x;
   ((Class*)_inst)->InstanceID.null = false;
}

inline bool CIM_ConcreteJob_Hnd::InstanceID_null() const
{
   return ((Class*)_inst)->InstanceID.null;
}

inline void CIM_ConcreteJob_Hnd::InstanceID_clear()
{
    _cow();
    __clear(((Class*)_inst)->InstanceID.value);
    ((Class*)_inst)->InstanceID.null = true;;
}

inline const String& CIM_ConcreteJob_Hnd::Name_value() const
{
    if (((Class*)_inst)->Name.null)
        _throw_null_access("Name");
   return ((Class*)_inst)->Name.value;
}

inline void CIM_ConcreteJob_Hnd::Name_value(const String& x)
{
    _cow();
   ((Class*)_inst)->Name.value = x;
   ((Class*)_inst)->Name.null = false;
}

inline bool CIM_ConcreteJob_Hnd::Name_null() const
{
   return ((Class*)_inst)->Name.null;
}

inline void CIM_ConcreteJob_Hnd::Name_clear()
{
    _cow();
    __clear(((Class*)_inst)->Name.value);
    ((Class*)_inst)->Name.null = true;;
}

inline const uint16& CIM_ConcreteJob_Hnd::JobState_value() const
{
    if (((Class*)_inst)->JobState.null)
        _throw_null_access("JobState");
   return ((Class*)_inst)->JobState.value;
}

inline void CIM_ConcreteJob_Hnd::JobState_value(const uint16& x)
{
    _cow();
   ((Class*)_inst)->JobState.value = x;
   ((Class*)_inst)->JobState.null = false;
}

inline bool CIM_ConcreteJob_Hnd::JobState_null() const
{
   return ((Class*)_inst)->JobState.null;
}

inline void CIM_ConcreteJob_Hnd::JobState_clear()
{
    _cow();
    __clear(((Class*)_inst)->JobState.value);
    ((Class*)_inst)->JobState.null = true;;
}

inline const Datetime& CIM_ConcreteJob_Hnd::TimeOfLastStateChange_value() const
{
    if (((Class*)_inst)->TimeOfLastStateChange.null)
        _throw_null_access("TimeOfLastStateChange");
   return ((Class*)_inst)->TimeOfLastStateChange.value;
}

inline void CIM_ConcreteJob_Hnd::TimeOfLastStateChange_value(const Datetime& x)
{
    _cow();
   ((Class*)_inst)->TimeOfLastStateChange.value = x;
   ((Class*)_inst)->TimeOfLastStateChange.null = false;
}

inline bool CIM_ConcreteJob_Hnd::TimeOfLastStateChange_null() const
{
   return ((Class*)_inst)->TimeOfLastStateChange.null;
}

inline void CIM_ConcreteJob_Hnd::TimeOfLastStateChange_clear()
{
    _cow();
    __clear(((Class*)_inst)->TimeOfLastStateChange.value);
    ((Class*)_inst)->TimeOfLastStateChange.null = true;;
}

inline const Datetime& CIM_ConcreteJob_Hnd::TimeBeforeRemoval_value() const
{
    if (((Class*)_inst)->TimeBeforeRemoval.null)
        _throw_null_access("TimeBeforeRemoval");
   return ((Class*)_inst)->TimeBeforeRemoval.value;
}

inline void CIM_ConcreteJob_Hnd::TimeBeforeRemoval_value(const Datetime& x)
{
    _cow();
   ((Class*)_inst)->TimeBeforeRemoval.value = x;
   ((Class*)_inst)->TimeBeforeRemoval.null = false;
}

inline bool CIM_ConcreteJob_Hnd::TimeBeforeRemoval_null() const
{
   return ((Class*)_inst)->TimeBeforeRemoval.null;
}

inline void CIM_ConcreteJob_Hnd::TimeBeforeRemoval_clear()
{
    _cow();
    __clear(((Class*)_inst)->TimeBeforeRemoval.value);
    ((Class*)_inst)->TimeBeforeRemoval.null = true;;
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_CIM_ConcreteJob_Hnd_h */
