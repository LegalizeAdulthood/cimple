//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENHND.
//
//==============================================================================

#ifndef _cimple_CIM_EnabledLogicalElement_Hnd
#define _cimple_CIM_EnabledLogicalElement_Hnd

#include <cimple/cimple.h>
#include "CIM_EnabledLogicalElement.h"
#include "CIM_LogicalElement_Hnd.h"
#include "CIM_ConcreteJob_Hnd.h"

CIMPLE_NAMESPACE_BEGIN

class CIM_EnabledLogicalElement_Ref : public CIM_LogicalElement_Ref
{
public:
    typedef CIM_EnabledLogicalElement Class;
    CIM_EnabledLogicalElement_Ref();
    CIM_EnabledLogicalElement_Ref(const CIM_EnabledLogicalElement_Ref& x);
    CIM_EnabledLogicalElement_Ref(CIM_EnabledLogicalElement* inst);
    explicit CIM_EnabledLogicalElement_Ref(const Instance_Ref& x);
    ~CIM_EnabledLogicalElement_Ref();
    CIM_EnabledLogicalElement_Ref& operator=(const CIM_EnabledLogicalElement_Ref& x);
    static bool is_a(const Instance_Ref& x);

    Arg<uint32> RequestStateChange(
        Ops& __ops,
        const String& __name_space,
        const Arg<uint16>& RequestedState,
        Arg<CIM_ConcreteJob_Ref>& Job,
        const Arg<Datetime>& TimeoutPeriod);

protected:
    CIM_EnabledLogicalElement_Ref(const Meta_Class* mc);
    CIM_EnabledLogicalElement_Ref(const Meta_Class* mc, const Instance_Ref& x);
};

class CIM_EnabledLogicalElement_Hnd : public CIM_LogicalElement_Hnd
{
public:
    typedef CIM_EnabledLogicalElement Class;
    CIM_EnabledLogicalElement_Hnd();
    CIM_EnabledLogicalElement_Hnd(const CIM_EnabledLogicalElement_Hnd& x);
    CIM_EnabledLogicalElement_Hnd(CIM_EnabledLogicalElement* inst);
    explicit CIM_EnabledLogicalElement_Hnd(const Instance_Hnd& x);
    ~CIM_EnabledLogicalElement_Hnd();
    CIM_EnabledLogicalElement_Hnd& operator=(const CIM_EnabledLogicalElement_Hnd& x);
    static bool is_a(const Instance_Hnd& x);
    CIM_EnabledLogicalElement_Ref reference() const;

    // EnabledState:
    const uint16& EnabledState_value() const;
    void EnabledState_value(const uint16& x);
    bool EnabledState_null() const;
    void EnabledState_clear();

    // OtherEnabledState:
    const String& OtherEnabledState_value() const;
    void OtherEnabledState_value(const String& x);
    bool OtherEnabledState_null() const;
    void OtherEnabledState_clear();

    // RequestedState:
    const uint16& RequestedState_value() const;
    void RequestedState_value(const uint16& x);
    bool RequestedState_null() const;
    void RequestedState_clear();

    // EnabledDefault:
    const uint16& EnabledDefault_value() const;
    void EnabledDefault_value(const uint16& x);
    bool EnabledDefault_null() const;
    void EnabledDefault_clear();

    // TimeOfLastStateChange:
    const Datetime& TimeOfLastStateChange_value() const;
    void TimeOfLastStateChange_value(const Datetime& x);
    bool TimeOfLastStateChange_null() const;
    void TimeOfLastStateChange_clear();

protected:
    CIM_EnabledLogicalElement_Hnd(const Meta_Class* mc);
    CIM_EnabledLogicalElement_Hnd(const Meta_Class* mc, const Instance_Hnd& x);
};

inline CIM_EnabledLogicalElement_Ref::CIM_EnabledLogicalElement_Ref() :
    CIM_LogicalElement_Ref(&CIM_EnabledLogicalElement::static_meta_class)
{
}

inline CIM_EnabledLogicalElement_Ref::CIM_EnabledLogicalElement_Ref(const CIM_EnabledLogicalElement_Ref& x) :
    CIM_LogicalElement_Ref(x)
{
}

inline CIM_EnabledLogicalElement_Ref::CIM_EnabledLogicalElement_Ref(CIM_EnabledLogicalElement* inst) :
    CIM_LogicalElement_Ref((CIM_LogicalElement*)inst)
{
}

inline CIM_EnabledLogicalElement_Ref::CIM_EnabledLogicalElement_Ref(const Instance_Ref& x) : 
    CIM_LogicalElement_Ref(&CIM_EnabledLogicalElement::static_meta_class, x)
{
}

inline CIM_EnabledLogicalElement_Ref::CIM_EnabledLogicalElement_Ref(const Meta_Class* mc) : CIM_LogicalElement_Ref(mc)
{
}

inline CIM_EnabledLogicalElement_Ref::CIM_EnabledLogicalElement_Ref(const Meta_Class* mc, const Instance_Ref& x) : CIM_LogicalElement_Ref(mc, x)
{
}

inline CIM_EnabledLogicalElement_Ref::~CIM_EnabledLogicalElement_Ref()
{
}

inline CIM_EnabledLogicalElement_Ref& CIM_EnabledLogicalElement_Ref::operator=(const CIM_EnabledLogicalElement_Ref& x)
{
    CIM_LogicalElement_Ref::operator=(x);
    return *this;
}

inline bool CIM_EnabledLogicalElement_Ref::is_a(const Instance_Ref& x)
{
    return is_subclass(&CIM_EnabledLogicalElement::static_meta_class, x.meta_class());
}

inline Arg<uint32> CIM_EnabledLogicalElement_Ref::RequestStateChange(
    Ops& __ops,
    const String& __name_space,
    const Arg<uint16>& RequestedState,
    Arg<CIM_ConcreteJob_Ref>& Job,
    const Arg<Datetime>& TimeoutPeriod)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &CIM_EnabledLogicalElement_RequestStateChange_method::static_meta_class,
        &RequestedState,
        &Job,
        &TimeoutPeriod,
        &__return_value);
    return __return_value;
}

inline CIM_EnabledLogicalElement_Hnd::CIM_EnabledLogicalElement_Hnd() :
    CIM_LogicalElement_Hnd(&CIM_EnabledLogicalElement::static_meta_class)
{
}

inline CIM_EnabledLogicalElement_Hnd::CIM_EnabledLogicalElement_Hnd(const CIM_EnabledLogicalElement_Hnd& x) :
    CIM_LogicalElement_Hnd(x)
{
}

inline CIM_EnabledLogicalElement_Hnd::CIM_EnabledLogicalElement_Hnd(CIM_EnabledLogicalElement* inst) :
    CIM_LogicalElement_Hnd((CIM_LogicalElement*)inst)
{
}

inline CIM_EnabledLogicalElement_Hnd::CIM_EnabledLogicalElement_Hnd(const Instance_Hnd& x) : 
    CIM_LogicalElement_Hnd(&CIM_EnabledLogicalElement::static_meta_class, x)
{
}

inline CIM_EnabledLogicalElement_Hnd::CIM_EnabledLogicalElement_Hnd(const Meta_Class* mc) : CIM_LogicalElement_Hnd(mc)
{
}

inline CIM_EnabledLogicalElement_Hnd::CIM_EnabledLogicalElement_Hnd(const Meta_Class* mc, const Instance_Hnd& x) : CIM_LogicalElement_Hnd(mc, x)
{
}

inline CIM_EnabledLogicalElement_Hnd::~CIM_EnabledLogicalElement_Hnd()
{
}

inline CIM_EnabledLogicalElement_Hnd& CIM_EnabledLogicalElement_Hnd::operator=(const CIM_EnabledLogicalElement_Hnd& x)
{
    CIM_LogicalElement_Hnd::operator=(x);
    return *this;
}

inline bool CIM_EnabledLogicalElement_Hnd::is_a(const Instance_Hnd& x)
{
    return is_subclass(&CIM_EnabledLogicalElement::static_meta_class, x.meta_class());
}

inline CIM_EnabledLogicalElement_Ref CIM_EnabledLogicalElement_Hnd::reference() const
{
    return CIM_EnabledLogicalElement_Ref((CIM_EnabledLogicalElement*)key_clone(_inst));
}

inline const uint16& CIM_EnabledLogicalElement_Hnd::EnabledState_value() const
{
    if (((Class*)_inst)->EnabledState.null)
        _throw_null_access("EnabledState");
   return ((Class*)_inst)->EnabledState.value;
}

inline void CIM_EnabledLogicalElement_Hnd::EnabledState_value(const uint16& x)
{
    _cow();
   ((Class*)_inst)->EnabledState.value = x;
   ((Class*)_inst)->EnabledState.null = false;
}

inline bool CIM_EnabledLogicalElement_Hnd::EnabledState_null() const
{
   return ((Class*)_inst)->EnabledState.null;
}

inline void CIM_EnabledLogicalElement_Hnd::EnabledState_clear()
{
    _cow();
    __clear(((Class*)_inst)->EnabledState.value);
    ((Class*)_inst)->EnabledState.null = true;;
}

inline const String& CIM_EnabledLogicalElement_Hnd::OtherEnabledState_value() const
{
    if (((Class*)_inst)->OtherEnabledState.null)
        _throw_null_access("OtherEnabledState");
   return ((Class*)_inst)->OtherEnabledState.value;
}

inline void CIM_EnabledLogicalElement_Hnd::OtherEnabledState_value(const String& x)
{
    _cow();
   ((Class*)_inst)->OtherEnabledState.value = x;
   ((Class*)_inst)->OtherEnabledState.null = false;
}

inline bool CIM_EnabledLogicalElement_Hnd::OtherEnabledState_null() const
{
   return ((Class*)_inst)->OtherEnabledState.null;
}

inline void CIM_EnabledLogicalElement_Hnd::OtherEnabledState_clear()
{
    _cow();
    __clear(((Class*)_inst)->OtherEnabledState.value);
    ((Class*)_inst)->OtherEnabledState.null = true;;
}

inline const uint16& CIM_EnabledLogicalElement_Hnd::RequestedState_value() const
{
    if (((Class*)_inst)->RequestedState.null)
        _throw_null_access("RequestedState");
   return ((Class*)_inst)->RequestedState.value;
}

inline void CIM_EnabledLogicalElement_Hnd::RequestedState_value(const uint16& x)
{
    _cow();
   ((Class*)_inst)->RequestedState.value = x;
   ((Class*)_inst)->RequestedState.null = false;
}

inline bool CIM_EnabledLogicalElement_Hnd::RequestedState_null() const
{
   return ((Class*)_inst)->RequestedState.null;
}

inline void CIM_EnabledLogicalElement_Hnd::RequestedState_clear()
{
    _cow();
    __clear(((Class*)_inst)->RequestedState.value);
    ((Class*)_inst)->RequestedState.null = true;;
}

inline const uint16& CIM_EnabledLogicalElement_Hnd::EnabledDefault_value() const
{
    if (((Class*)_inst)->EnabledDefault.null)
        _throw_null_access("EnabledDefault");
   return ((Class*)_inst)->EnabledDefault.value;
}

inline void CIM_EnabledLogicalElement_Hnd::EnabledDefault_value(const uint16& x)
{
    _cow();
   ((Class*)_inst)->EnabledDefault.value = x;
   ((Class*)_inst)->EnabledDefault.null = false;
}

inline bool CIM_EnabledLogicalElement_Hnd::EnabledDefault_null() const
{
   return ((Class*)_inst)->EnabledDefault.null;
}

inline void CIM_EnabledLogicalElement_Hnd::EnabledDefault_clear()
{
    _cow();
    __clear(((Class*)_inst)->EnabledDefault.value);
    ((Class*)_inst)->EnabledDefault.null = true;;
}

inline const Datetime& CIM_EnabledLogicalElement_Hnd::TimeOfLastStateChange_value() const
{
    if (((Class*)_inst)->TimeOfLastStateChange.null)
        _throw_null_access("TimeOfLastStateChange");
   return ((Class*)_inst)->TimeOfLastStateChange.value;
}

inline void CIM_EnabledLogicalElement_Hnd::TimeOfLastStateChange_value(const Datetime& x)
{
    _cow();
   ((Class*)_inst)->TimeOfLastStateChange.value = x;
   ((Class*)_inst)->TimeOfLastStateChange.null = false;
}

inline bool CIM_EnabledLogicalElement_Hnd::TimeOfLastStateChange_null() const
{
   return ((Class*)_inst)->TimeOfLastStateChange.null;
}

inline void CIM_EnabledLogicalElement_Hnd::TimeOfLastStateChange_clear()
{
    _cow();
    __clear(((Class*)_inst)->TimeOfLastStateChange.value);
    ((Class*)_inst)->TimeOfLastStateChange.null = true;;
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_CIM_EnabledLogicalElement_Hnd_h */
