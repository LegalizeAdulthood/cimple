//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENHND.
//
//==============================================================================

#ifndef _cimple_CIM_Fan_Hnd
#define _cimple_CIM_Fan_Hnd

#include <cimple/cimple.h>
#include "CIM_Fan.h"
#include "CIM_CoolingDevice_Hnd.h"

CIMPLE_NAMESPACE_BEGIN

class CIM_Fan_Ref : public CIM_CoolingDevice_Ref
{
public:
    typedef CIM_Fan Class;
    CIM_Fan_Ref();
    CIM_Fan_Ref(const CIM_Fan_Ref& x);
    CIM_Fan_Ref(CIM_Fan* inst);
    explicit CIM_Fan_Ref(const Instance_Ref& x);
    ~CIM_Fan_Ref();
    CIM_Fan_Ref& operator=(const CIM_Fan_Ref& x);
    static bool is_a(const Instance_Ref& x);

    Arg<uint32> SetSpeed(
        Ops& __ops,
        const String& __name_space,
        const Arg<uint64>& DesiredSpeed);

protected:
    CIM_Fan_Ref(const Meta_Class* mc);
    CIM_Fan_Ref(const Meta_Class* mc, const Instance_Ref& x);
};

class CIM_Fan_Hnd : public CIM_CoolingDevice_Hnd
{
public:
    typedef CIM_Fan Class;
    CIM_Fan_Hnd();
    CIM_Fan_Hnd(const CIM_Fan_Hnd& x);
    CIM_Fan_Hnd(CIM_Fan* inst);
    explicit CIM_Fan_Hnd(const Instance_Hnd& x);
    ~CIM_Fan_Hnd();
    CIM_Fan_Hnd& operator=(const CIM_Fan_Hnd& x);
    static bool is_a(const Instance_Hnd& x);
    CIM_Fan_Ref reference() const;

    // VariableSpeed:
    const boolean& VariableSpeed_value() const;
    void VariableSpeed_value(const boolean& x);
    bool VariableSpeed_null() const;
    void VariableSpeed_clear();

    // DesiredSpeed:
    const uint64& DesiredSpeed_value() const;
    void DesiredSpeed_value(const uint64& x);
    bool DesiredSpeed_null() const;
    void DesiredSpeed_clear();

protected:
    CIM_Fan_Hnd(const Meta_Class* mc);
    CIM_Fan_Hnd(const Meta_Class* mc, const Instance_Hnd& x);
};

inline CIM_Fan_Ref::CIM_Fan_Ref() :
    CIM_CoolingDevice_Ref(&CIM_Fan::static_meta_class)
{
}

inline CIM_Fan_Ref::CIM_Fan_Ref(const CIM_Fan_Ref& x) :
    CIM_CoolingDevice_Ref(x)
{
}

inline CIM_Fan_Ref::CIM_Fan_Ref(CIM_Fan* inst) :
    CIM_CoolingDevice_Ref((CIM_CoolingDevice*)inst)
{
}

inline CIM_Fan_Ref::CIM_Fan_Ref(const Instance_Ref& x) : 
    CIM_CoolingDevice_Ref(&CIM_Fan::static_meta_class, x)
{
}

inline CIM_Fan_Ref::CIM_Fan_Ref(const Meta_Class* mc) : CIM_CoolingDevice_Ref(mc)
{
}

inline CIM_Fan_Ref::CIM_Fan_Ref(const Meta_Class* mc, const Instance_Ref& x) : CIM_CoolingDevice_Ref(mc, x)
{
}

inline CIM_Fan_Ref::~CIM_Fan_Ref()
{
}

inline CIM_Fan_Ref& CIM_Fan_Ref::operator=(const CIM_Fan_Ref& x)
{
    CIM_CoolingDevice_Ref::operator=(x);
    return *this;
}

inline bool CIM_Fan_Ref::is_a(const Instance_Ref& x)
{
    return is_subclass(&CIM_Fan::static_meta_class, x.meta_class());
}

inline Arg<uint32> CIM_Fan_Ref::SetSpeed(
    Ops& __ops,
    const String& __name_space,
    const Arg<uint64>& DesiredSpeed)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &CIM_Fan_SetSpeed_method::static_meta_class,
        &DesiredSpeed,
        &__return_value);
    return __return_value;
}

inline CIM_Fan_Hnd::CIM_Fan_Hnd() :
    CIM_CoolingDevice_Hnd(&CIM_Fan::static_meta_class)
{
}

inline CIM_Fan_Hnd::CIM_Fan_Hnd(const CIM_Fan_Hnd& x) :
    CIM_CoolingDevice_Hnd(x)
{
}

inline CIM_Fan_Hnd::CIM_Fan_Hnd(CIM_Fan* inst) :
    CIM_CoolingDevice_Hnd((CIM_CoolingDevice*)inst)
{
}

inline CIM_Fan_Hnd::CIM_Fan_Hnd(const Instance_Hnd& x) : 
    CIM_CoolingDevice_Hnd(&CIM_Fan::static_meta_class, x)
{
}

inline CIM_Fan_Hnd::CIM_Fan_Hnd(const Meta_Class* mc) : CIM_CoolingDevice_Hnd(mc)
{
}

inline CIM_Fan_Hnd::CIM_Fan_Hnd(const Meta_Class* mc, const Instance_Hnd& x) : CIM_CoolingDevice_Hnd(mc, x)
{
}

inline CIM_Fan_Hnd::~CIM_Fan_Hnd()
{
}

inline CIM_Fan_Hnd& CIM_Fan_Hnd::operator=(const CIM_Fan_Hnd& x)
{
    CIM_CoolingDevice_Hnd::operator=(x);
    return *this;
}

inline bool CIM_Fan_Hnd::is_a(const Instance_Hnd& x)
{
    return is_subclass(&CIM_Fan::static_meta_class, x.meta_class());
}

inline CIM_Fan_Ref CIM_Fan_Hnd::reference() const
{
    return CIM_Fan_Ref((CIM_Fan*)key_clone(_inst));
}

inline const boolean& CIM_Fan_Hnd::VariableSpeed_value() const
{
    if (((Class*)_inst)->VariableSpeed.null)
        _throw_null_access("VariableSpeed");
   return ((Class*)_inst)->VariableSpeed.value;
}

inline void CIM_Fan_Hnd::VariableSpeed_value(const boolean& x)
{
    _cow();
   ((Class*)_inst)->VariableSpeed.value = x;
   ((Class*)_inst)->VariableSpeed.null = false;
}

inline bool CIM_Fan_Hnd::VariableSpeed_null() const
{
   return ((Class*)_inst)->VariableSpeed.null;
}

inline void CIM_Fan_Hnd::VariableSpeed_clear()
{
    _cow();
    __clear(((Class*)_inst)->VariableSpeed.value);
    ((Class*)_inst)->VariableSpeed.null = true;;
}

inline const uint64& CIM_Fan_Hnd::DesiredSpeed_value() const
{
    if (((Class*)_inst)->DesiredSpeed.null)
        _throw_null_access("DesiredSpeed");
   return ((Class*)_inst)->DesiredSpeed.value;
}

inline void CIM_Fan_Hnd::DesiredSpeed_value(const uint64& x)
{
    _cow();
   ((Class*)_inst)->DesiredSpeed.value = x;
   ((Class*)_inst)->DesiredSpeed.null = false;
}

inline bool CIM_Fan_Hnd::DesiredSpeed_null() const
{
   return ((Class*)_inst)->DesiredSpeed.null;
}

inline void CIM_Fan_Hnd::DesiredSpeed_clear()
{
    _cow();
    __clear(((Class*)_inst)->DesiredSpeed.value);
    ((Class*)_inst)->DesiredSpeed.null = true;;
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_CIM_Fan_Hnd_h */
