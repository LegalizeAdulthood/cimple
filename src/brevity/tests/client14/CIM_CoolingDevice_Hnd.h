//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENHND.
//
//==============================================================================

#ifndef _cimple_CIM_CoolingDevice_Hnd
#define _cimple_CIM_CoolingDevice_Hnd

#include <cimple/cimple.h>
#include "CIM_CoolingDevice.h"
#include "CIM_LogicalDevice_Hnd.h"

CIMPLE_NAMESPACE_BEGIN

class CIM_CoolingDevice_Ref : public CIM_LogicalDevice_Ref
{
public:
    typedef CIM_CoolingDevice Class;
    CIM_CoolingDevice_Ref();
    CIM_CoolingDevice_Ref(const CIM_CoolingDevice_Ref& x);
    CIM_CoolingDevice_Ref(CIM_CoolingDevice* inst);
    explicit CIM_CoolingDevice_Ref(const Instance_Ref& x);
    ~CIM_CoolingDevice_Ref();
    CIM_CoolingDevice_Ref& operator=(const CIM_CoolingDevice_Ref& x);
    static bool is_a(const Instance_Ref& x);

protected:
    CIM_CoolingDevice_Ref(const Meta_Class* mc);
    CIM_CoolingDevice_Ref(const Meta_Class* mc, const Instance_Ref& x);
};

class CIM_CoolingDevice_Hnd : public CIM_LogicalDevice_Hnd
{
public:
    typedef CIM_CoolingDevice Class;
    CIM_CoolingDevice_Hnd();
    CIM_CoolingDevice_Hnd(const CIM_CoolingDevice_Hnd& x);
    CIM_CoolingDevice_Hnd(CIM_CoolingDevice* inst);
    explicit CIM_CoolingDevice_Hnd(const Instance_Hnd& x);
    ~CIM_CoolingDevice_Hnd();
    CIM_CoolingDevice_Hnd& operator=(const CIM_CoolingDevice_Hnd& x);
    static bool is_a(const Instance_Hnd& x);
    CIM_CoolingDevice_Ref reference() const;

    // ActiveCooling:
    const boolean& ActiveCooling_value() const;
    void ActiveCooling_value(const boolean& x);
    bool ActiveCooling_null() const;
    void ActiveCooling_clear();

protected:
    CIM_CoolingDevice_Hnd(const Meta_Class* mc);
    CIM_CoolingDevice_Hnd(const Meta_Class* mc, const Instance_Hnd& x);
};

inline CIM_CoolingDevice_Ref::CIM_CoolingDevice_Ref() :
    CIM_LogicalDevice_Ref(&CIM_CoolingDevice::static_meta_class)
{
}

inline CIM_CoolingDevice_Ref::CIM_CoolingDevice_Ref(const CIM_CoolingDevice_Ref& x) :
    CIM_LogicalDevice_Ref(x)
{
}

inline CIM_CoolingDevice_Ref::CIM_CoolingDevice_Ref(CIM_CoolingDevice* inst) :
    CIM_LogicalDevice_Ref((CIM_LogicalDevice*)inst)
{
}

inline CIM_CoolingDevice_Ref::CIM_CoolingDevice_Ref(const Instance_Ref& x) : 
    CIM_LogicalDevice_Ref(&CIM_CoolingDevice::static_meta_class, x)
{
}

inline CIM_CoolingDevice_Ref::CIM_CoolingDevice_Ref(const Meta_Class* mc) : CIM_LogicalDevice_Ref(mc)
{
}

inline CIM_CoolingDevice_Ref::CIM_CoolingDevice_Ref(const Meta_Class* mc, const Instance_Ref& x) : CIM_LogicalDevice_Ref(mc, x)
{
}

inline CIM_CoolingDevice_Ref::~CIM_CoolingDevice_Ref()
{
}

inline CIM_CoolingDevice_Ref& CIM_CoolingDevice_Ref::operator=(const CIM_CoolingDevice_Ref& x)
{
    CIM_LogicalDevice_Ref::operator=(x);
    return *this;
}

inline bool CIM_CoolingDevice_Ref::is_a(const Instance_Ref& x)
{
    return is_subclass(&CIM_CoolingDevice::static_meta_class, x.meta_class());
}

inline CIM_CoolingDevice_Hnd::CIM_CoolingDevice_Hnd() :
    CIM_LogicalDevice_Hnd(&CIM_CoolingDevice::static_meta_class)
{
}

inline CIM_CoolingDevice_Hnd::CIM_CoolingDevice_Hnd(const CIM_CoolingDevice_Hnd& x) :
    CIM_LogicalDevice_Hnd(x)
{
}

inline CIM_CoolingDevice_Hnd::CIM_CoolingDevice_Hnd(CIM_CoolingDevice* inst) :
    CIM_LogicalDevice_Hnd((CIM_LogicalDevice*)inst)
{
}

inline CIM_CoolingDevice_Hnd::CIM_CoolingDevice_Hnd(const Instance_Hnd& x) : 
    CIM_LogicalDevice_Hnd(&CIM_CoolingDevice::static_meta_class, x)
{
}

inline CIM_CoolingDevice_Hnd::CIM_CoolingDevice_Hnd(const Meta_Class* mc) : CIM_LogicalDevice_Hnd(mc)
{
}

inline CIM_CoolingDevice_Hnd::CIM_CoolingDevice_Hnd(const Meta_Class* mc, const Instance_Hnd& x) : CIM_LogicalDevice_Hnd(mc, x)
{
}

inline CIM_CoolingDevice_Hnd::~CIM_CoolingDevice_Hnd()
{
}

inline CIM_CoolingDevice_Hnd& CIM_CoolingDevice_Hnd::operator=(const CIM_CoolingDevice_Hnd& x)
{
    CIM_LogicalDevice_Hnd::operator=(x);
    return *this;
}

inline bool CIM_CoolingDevice_Hnd::is_a(const Instance_Hnd& x)
{
    return is_subclass(&CIM_CoolingDevice::static_meta_class, x.meta_class());
}

inline CIM_CoolingDevice_Ref CIM_CoolingDevice_Hnd::reference() const
{
    return CIM_CoolingDevice_Ref((CIM_CoolingDevice*)key_clone(_inst));
}

inline const boolean& CIM_CoolingDevice_Hnd::ActiveCooling_value() const
{
    if (((Class*)_inst)->ActiveCooling.null)
        _throw_null_access("ActiveCooling");
   return ((Class*)_inst)->ActiveCooling.value;
}

inline void CIM_CoolingDevice_Hnd::ActiveCooling_value(const boolean& x)
{
    _cow();
   ((Class*)_inst)->ActiveCooling.value = x;
   ((Class*)_inst)->ActiveCooling.null = false;
}

inline bool CIM_CoolingDevice_Hnd::ActiveCooling_null() const
{
   return ((Class*)_inst)->ActiveCooling.null;
}

inline void CIM_CoolingDevice_Hnd::ActiveCooling_clear()
{
    _cow();
    __clear(((Class*)_inst)->ActiveCooling.value);
    ((Class*)_inst)->ActiveCooling.null = true;;
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_CIM_CoolingDevice_Hnd_h */
