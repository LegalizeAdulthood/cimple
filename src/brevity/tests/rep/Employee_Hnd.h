//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENHND.
//
//==============================================================================

#ifndef _cimple_Employee_Hnd
#define _cimple_Employee_Hnd

#include <cimple/cimple.h>
#include "Employee.h"

CIMPLE_NAMESPACE_BEGIN

class Employee_Ref : public Instance_Ref
{
public:
    typedef Employee Class;
    Employee_Ref();
    Employee_Ref(const Employee_Ref& x);
    Employee_Ref(Employee* inst);
    explicit Employee_Ref(const Instance_Ref& x);
    ~Employee_Ref();
    Employee_Ref& operator=(const Employee_Ref& x);
    static bool is_a(const Instance_Ref& x);

    // Id:
    const uint32& Id_value() const;
    void Id_value(const uint32& x);
    bool Id_null() const;
    void Id_clear();

    Arg<uint32> SetOutOfOfficeState(
        Ops& __ops,
        const String& __name_space,
        const Arg<boolean>& OutOfOfficeState,
        Arg<boolean>& PreviousOutOfOfficeState);

    static Arg<uint32> GetEmployeeCount(
        Ops& __ops,
        const String& __name_space);

protected:
    Employee_Ref(const Meta_Class* mc);
    Employee_Ref(const Meta_Class* mc, const Instance_Ref& x);
};

class Employee_Hnd : public Instance_Hnd
{
public:
    typedef Employee Class;
    Employee_Hnd();
    Employee_Hnd(const Employee_Hnd& x);
    Employee_Hnd(Employee* inst);
    explicit Employee_Hnd(const Instance_Hnd& x);
    ~Employee_Hnd();
    Employee_Hnd& operator=(const Employee_Hnd& x);
    static bool is_a(const Instance_Hnd& x);
    Employee_Ref reference() const;

    // Id:
    const uint32& Id_value() const;
    void Id_value(const uint32& x);
    bool Id_null() const;
    void Id_clear();

    // First:
    const String& First_value() const;
    void First_value(const String& x);
    bool First_null() const;
    void First_clear();

    // Last:
    const String& Last_value() const;
    void Last_value(const String& x);
    bool Last_null() const;
    void Last_clear();

    // Gender:
    const uint32& Gender_value() const;
    void Gender_value(const uint32& x);
    bool Gender_null() const;
    void Gender_clear();

    // Active:
    const boolean& Active_value() const;
    void Active_value(const boolean& x);
    bool Active_null() const;
    void Active_clear();

    // OutOfOffice:
    const boolean& OutOfOffice_value() const;
    void OutOfOffice_value(const boolean& x);
    bool OutOfOffice_null() const;
    void OutOfOffice_clear();

protected:
    Employee_Hnd(const Meta_Class* mc);
    Employee_Hnd(const Meta_Class* mc, const Instance_Hnd& x);
};

inline Employee_Ref::Employee_Ref() :
    Instance_Ref(&Employee::static_meta_class)
{
}

inline Employee_Ref::Employee_Ref(const Employee_Ref& x) :
    Instance_Ref(x)
{
}

inline Employee_Ref::Employee_Ref(Employee* inst) :
    Instance_Ref((Instance*)inst)
{
}

inline Employee_Ref::Employee_Ref(const Instance_Ref& x) : 
    Instance_Ref(&Employee::static_meta_class, x)
{
}

inline Employee_Ref::Employee_Ref(const Meta_Class* mc) : Instance_Ref(mc)
{
}

inline Employee_Ref::Employee_Ref(const Meta_Class* mc, const Instance_Ref& x) : Instance_Ref(mc, x)
{
}

inline Employee_Ref::~Employee_Ref()
{
}

inline Employee_Ref& Employee_Ref::operator=(const Employee_Ref& x)
{
    Instance_Ref::operator=(x);
    return *this;
}

inline bool Employee_Ref::is_a(const Instance_Ref& x)
{
    return is_subclass(&Employee::static_meta_class, x.meta_class());
}

inline const uint32& Employee_Ref::Id_value() const
{
    if (((Class*)_inst)->Id.null)
        _throw_null_access("Id");
   return ((Class*)_inst)->Id.value;
}

inline void Employee_Ref::Id_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->Id.value = x;
   ((Class*)_inst)->Id.null = false;
}

inline bool Employee_Ref::Id_null() const
{
   return ((Class*)_inst)->Id.null;
}

inline void Employee_Ref::Id_clear()
{
    _cow();
    __clear(((Class*)_inst)->Id.value);
    ((Class*)_inst)->Id.null = true;;
}

inline Arg<uint32> Employee_Ref::SetOutOfOfficeState(
    Ops& __ops,
    const String& __name_space,
    const Arg<boolean>& OutOfOfficeState,
    Arg<boolean>& PreviousOutOfOfficeState)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &Employee_SetOutOfOfficeState_method::static_meta_class,
        &OutOfOfficeState,
        &PreviousOutOfOfficeState,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> Employee_Ref::GetEmployeeCount(
    Ops& __ops,
    const String& __name_space)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        Employee_Ref(),
        &Employee_GetEmployeeCount_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Employee_Hnd::Employee_Hnd() :
    Instance_Hnd(&Employee::static_meta_class)
{
}

inline Employee_Hnd::Employee_Hnd(const Employee_Hnd& x) :
    Instance_Hnd(x)
{
}

inline Employee_Hnd::Employee_Hnd(Employee* inst) :
    Instance_Hnd((Instance*)inst)
{
}

inline Employee_Hnd::Employee_Hnd(const Instance_Hnd& x) : 
    Instance_Hnd(&Employee::static_meta_class, x)
{
}

inline Employee_Hnd::Employee_Hnd(const Meta_Class* mc) : Instance_Hnd(mc)
{
}

inline Employee_Hnd::Employee_Hnd(const Meta_Class* mc, const Instance_Hnd& x) : Instance_Hnd(mc, x)
{
}

inline Employee_Hnd::~Employee_Hnd()
{
}

inline Employee_Hnd& Employee_Hnd::operator=(const Employee_Hnd& x)
{
    Instance_Hnd::operator=(x);
    return *this;
}

inline bool Employee_Hnd::is_a(const Instance_Hnd& x)
{
    return is_subclass(&Employee::static_meta_class, x.meta_class());
}

inline Employee_Ref Employee_Hnd::reference() const
{
    return Employee_Ref((Employee*)key_clone(_inst));
}

inline const uint32& Employee_Hnd::Id_value() const
{
    if (((Class*)_inst)->Id.null)
        _throw_null_access("Id");
   return ((Class*)_inst)->Id.value;
}

inline void Employee_Hnd::Id_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->Id.value = x;
   ((Class*)_inst)->Id.null = false;
}

inline bool Employee_Hnd::Id_null() const
{
   return ((Class*)_inst)->Id.null;
}

inline void Employee_Hnd::Id_clear()
{
    _cow();
    __clear(((Class*)_inst)->Id.value);
    ((Class*)_inst)->Id.null = true;;
}

inline const String& Employee_Hnd::First_value() const
{
    if (((Class*)_inst)->First.null)
        _throw_null_access("First");
   return ((Class*)_inst)->First.value;
}

inline void Employee_Hnd::First_value(const String& x)
{
    _cow();
   ((Class*)_inst)->First.value = x;
   ((Class*)_inst)->First.null = false;
}

inline bool Employee_Hnd::First_null() const
{
   return ((Class*)_inst)->First.null;
}

inline void Employee_Hnd::First_clear()
{
    _cow();
    __clear(((Class*)_inst)->First.value);
    ((Class*)_inst)->First.null = true;;
}

inline const String& Employee_Hnd::Last_value() const
{
    if (((Class*)_inst)->Last.null)
        _throw_null_access("Last");
   return ((Class*)_inst)->Last.value;
}

inline void Employee_Hnd::Last_value(const String& x)
{
    _cow();
   ((Class*)_inst)->Last.value = x;
   ((Class*)_inst)->Last.null = false;
}

inline bool Employee_Hnd::Last_null() const
{
   return ((Class*)_inst)->Last.null;
}

inline void Employee_Hnd::Last_clear()
{
    _cow();
    __clear(((Class*)_inst)->Last.value);
    ((Class*)_inst)->Last.null = true;;
}

inline const uint32& Employee_Hnd::Gender_value() const
{
    if (((Class*)_inst)->Gender.null)
        _throw_null_access("Gender");
   return ((Class*)_inst)->Gender.value;
}

inline void Employee_Hnd::Gender_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->Gender.value = x;
   ((Class*)_inst)->Gender.null = false;
}

inline bool Employee_Hnd::Gender_null() const
{
   return ((Class*)_inst)->Gender.null;
}

inline void Employee_Hnd::Gender_clear()
{
    _cow();
    __clear(((Class*)_inst)->Gender.value);
    ((Class*)_inst)->Gender.null = true;;
}

inline const boolean& Employee_Hnd::Active_value() const
{
    if (((Class*)_inst)->Active.null)
        _throw_null_access("Active");
   return ((Class*)_inst)->Active.value;
}

inline void Employee_Hnd::Active_value(const boolean& x)
{
    _cow();
   ((Class*)_inst)->Active.value = x;
   ((Class*)_inst)->Active.null = false;
}

inline bool Employee_Hnd::Active_null() const
{
   return ((Class*)_inst)->Active.null;
}

inline void Employee_Hnd::Active_clear()
{
    _cow();
    __clear(((Class*)_inst)->Active.value);
    ((Class*)_inst)->Active.null = true;;
}

inline const boolean& Employee_Hnd::OutOfOffice_value() const
{
    if (((Class*)_inst)->OutOfOffice.null)
        _throw_null_access("OutOfOffice");
   return ((Class*)_inst)->OutOfOffice.value;
}

inline void Employee_Hnd::OutOfOffice_value(const boolean& x)
{
    _cow();
   ((Class*)_inst)->OutOfOffice.value = x;
   ((Class*)_inst)->OutOfOffice.null = false;
}

inline bool Employee_Hnd::OutOfOffice_null() const
{
   return ((Class*)_inst)->OutOfOffice.null;
}

inline void Employee_Hnd::OutOfOffice_clear()
{
    _cow();
    __clear(((Class*)_inst)->OutOfOffice.value);
    ((Class*)_inst)->OutOfOffice.null = true;;
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_Employee_Hnd_h */
