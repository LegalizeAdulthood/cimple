//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENHND.
//
//==============================================================================

#ifndef _cimple_All_Class_Hnd
#define _cimple_All_Class_Hnd

#include <cimple/cimple.h>
#include "All_Class.h"
#include "All_Part_Hnd.h"

CIMPLE_NAMESPACE_BEGIN

class All_Class_Ref : public Instance_Ref
{
public:
    typedef All_Class Class;
    All_Class_Ref();
    All_Class_Ref(const All_Class_Ref& x);
    All_Class_Ref(All_Class* inst);
    explicit All_Class_Ref(const Instance_Ref& x);
    ~All_Class_Ref();
    All_Class_Ref& operator=(const All_Class_Ref& x);
    static bool is_a(const Instance_Ref& x);

    // Key:
    const uint32& Key_value() const;
    void Key_value(const uint32& x);
    bool Key_null() const;
    void Key_clear();

    Arg<boolean> booleanReturn(
        Ops& __ops,
        const String& __name_space);

    Arg<uint8> uint8Return(
        Ops& __ops,
        const String& __name_space);

    Arg<sint8> sint8Return(
        Ops& __ops,
        const String& __name_space);

    Arg<uint16> uint16Return(
        Ops& __ops,
        const String& __name_space);

    Arg<sint16> sint16Return(
        Ops& __ops,
        const String& __name_space);

    Arg<uint32> uint32Return(
        Ops& __ops,
        const String& __name_space);

    Arg<sint32> sint32Return(
        Ops& __ops,
        const String& __name_space);

    Arg<uint64> uint64Return(
        Ops& __ops,
        const String& __name_space);

    Arg<sint64> sint64Return(
        Ops& __ops,
        const String& __name_space);

    Arg<real32> real32Return(
        Ops& __ops,
        const String& __name_space);

    Arg<real64> real64Return(
        Ops& __ops,
        const String& __name_space);

    Arg<char16> char16Return(
        Ops& __ops,
        const String& __name_space);

    Arg<String> stringReturn(
        Ops& __ops,
        const String& __name_space);

    Arg<Datetime> datetimeReturn(
        Ops& __ops,
        const String& __name_space);

    Arg<All_Part_Hnd> instanceReturn(
        Ops& __ops,
        const String& __name_space);

    Arg<Instance_Hnd> objectReturn(
        Ops& __ops,
        const String& __name_space);

    Arg<uint32> booleanScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<boolean>& p1,
        Arg<boolean>& p2);

    Arg<uint32> uint8ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<uint8>& p1,
        Arg<uint8>& p2);

    Arg<uint32> sint8ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<sint8>& p1,
        Arg<sint8>& p2);

    Arg<uint32> uint16ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<uint16>& p1,
        Arg<uint16>& p2);

    Arg<uint32> sint16ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<sint16>& p1,
        Arg<sint16>& p2);

    Arg<uint32> uint32ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<uint32>& p1,
        Arg<uint32>& p2);

    Arg<uint32> sint32ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<sint32>& p1,
        Arg<sint32>& p2);

    Arg<uint32> uint64ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<uint64>& p1,
        Arg<uint64>& p2);

    Arg<uint32> sint64ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<sint64>& p1,
        Arg<sint64>& p2);

    Arg<uint32> real32ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<real32>& p1,
        Arg<real32>& p2);

    Arg<uint32> real64ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<real64>& p1,
        Arg<real64>& p2);

    Arg<uint32> char16ScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<char16>& p1,
        Arg<char16>& p2);

    Arg<uint32> stringScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<String>& p1,
        Arg<String>& p2);

    Arg<uint32> datetimeScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Datetime>& p1,
        Arg<Datetime>& p2);

    Arg<uint32> objectScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Instance_Hnd>& p1,
        Arg<Instance_Hnd>& p2);

    Arg<uint32> instanceScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<All_Part_Hnd>& p1,
        Arg<All_Part_Hnd>& p2);

    Arg<uint32> referenceScalarParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<All_Part_Ref>& p1,
        Arg<All_Part_Ref>& p2);

    Arg<uint32> booleanArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_boolean>& p1,
        Arg<Array_boolean>& p2);

    Arg<uint32> uint8ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_uint8>& p1,
        Arg<Array_uint8>& p2);

    Arg<uint32> sint8ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_sint8>& p1,
        Arg<Array_sint8>& p2);

    Arg<uint32> uint16ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_uint16>& p1,
        Arg<Array_uint16>& p2);

    Arg<uint32> sint16ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_sint16>& p1,
        Arg<Array_sint16>& p2);

    Arg<uint32> uint32ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_uint32>& p1,
        Arg<Array_uint32>& p2);

    Arg<uint32> sint32ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_sint32>& p1,
        Arg<Array_sint32>& p2);

    Arg<uint32> uint64ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_uint64>& p1,
        Arg<Array_uint64>& p2);

    Arg<uint32> sint64ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_sint64>& p1,
        Arg<Array_sint64>& p2);

    Arg<uint32> real32ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_real32>& p1,
        Arg<Array_real32>& p2);

    Arg<uint32> real64ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_real64>& p1,
        Arg<Array_real64>& p2);

    Arg<uint32> char16ArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_char16>& p1,
        Arg<Array_char16>& p2);

    Arg<uint32> stringArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_String>& p1,
        Arg<Array_String>& p2);

    Arg<uint32> datetimeArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg<Array_Datetime>& p1,
        Arg<Array_Datetime>& p2);

    Arg<uint32> objectArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg< Array<Instance_Hnd> >& p1,
        Arg< Array<Instance_Hnd> >& p2);

    Arg<uint32> instanceArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg< Array<All_Part_Hnd> >& p1,
        Arg< Array<All_Part_Hnd> >& p2);

    Arg<uint32> referenceArrayParams(
        Ops& __ops,
        const String& __name_space,
        const Arg< Array<All_Part_Ref> >& p1,
        Arg< Array<All_Part_Ref> >& p2);

protected:
    All_Class_Ref(const Meta_Class* mc);
    All_Class_Ref(const Meta_Class* mc, const Instance_Ref& x);
};

class All_Class_Hnd : public Instance_Hnd
{
public:
    typedef All_Class Class;
    All_Class_Hnd();
    All_Class_Hnd(const All_Class_Hnd& x);
    All_Class_Hnd(All_Class* inst);
    explicit All_Class_Hnd(const Instance_Hnd& x);
    ~All_Class_Hnd();
    All_Class_Hnd& operator=(const All_Class_Hnd& x);
    static bool is_a(const Instance_Hnd& x);
    All_Class_Ref reference() const;

    // Key:
    const uint32& Key_value() const;
    void Key_value(const uint32& x);
    bool Key_null() const;
    void Key_clear();

    // booleanScalar:
    const boolean& booleanScalar_value() const;
    void booleanScalar_value(const boolean& x);
    bool booleanScalar_null() const;
    void booleanScalar_clear();

    // uint8Scalar:
    const uint8& uint8Scalar_value() const;
    void uint8Scalar_value(const uint8& x);
    bool uint8Scalar_null() const;
    void uint8Scalar_clear();

    // sint8Scalar:
    const sint8& sint8Scalar_value() const;
    void sint8Scalar_value(const sint8& x);
    bool sint8Scalar_null() const;
    void sint8Scalar_clear();

    // uint16Scalar:
    const uint16& uint16Scalar_value() const;
    void uint16Scalar_value(const uint16& x);
    bool uint16Scalar_null() const;
    void uint16Scalar_clear();

    // sint16Scalar:
    const sint16& sint16Scalar_value() const;
    void sint16Scalar_value(const sint16& x);
    bool sint16Scalar_null() const;
    void sint16Scalar_clear();

    // uint32Scalar:
    const uint32& uint32Scalar_value() const;
    void uint32Scalar_value(const uint32& x);
    bool uint32Scalar_null() const;
    void uint32Scalar_clear();

    // sint32Scalar:
    const sint32& sint32Scalar_value() const;
    void sint32Scalar_value(const sint32& x);
    bool sint32Scalar_null() const;
    void sint32Scalar_clear();

    // uint64Scalar:
    const uint64& uint64Scalar_value() const;
    void uint64Scalar_value(const uint64& x);
    bool uint64Scalar_null() const;
    void uint64Scalar_clear();

    // sint64Scalar:
    const sint64& sint64Scalar_value() const;
    void sint64Scalar_value(const sint64& x);
    bool sint64Scalar_null() const;
    void sint64Scalar_clear();

    // real32Scalar:
    const real32& real32Scalar_value() const;
    void real32Scalar_value(const real32& x);
    bool real32Scalar_null() const;
    void real32Scalar_clear();

    // real64Scalar:
    const real64& real64Scalar_value() const;
    void real64Scalar_value(const real64& x);
    bool real64Scalar_null() const;
    void real64Scalar_clear();

    // char16Scalar:
    const char16& char16Scalar_value() const;
    void char16Scalar_value(const char16& x);
    bool char16Scalar_null() const;
    void char16Scalar_clear();

    // stringScalar:
    const String& stringScalar_value() const;
    void stringScalar_value(const String& x);
    bool stringScalar_null() const;
    void stringScalar_clear();

    // datetimeScalar:
    const Datetime& datetimeScalar_value() const;
    void datetimeScalar_value(const Datetime& x);
    bool datetimeScalar_null() const;
    void datetimeScalar_clear();

    // instanceScalar:
    All_Part_Hnd instanceScalar_value() const;
    void instanceScalar_value(const All_Part_Hnd& x);
    bool instanceScalar_null() const;
    void instanceScalar_clear();

    // objectScalar:
    Instance_Hnd objectScalar_value() const;
    void objectScalar_value(const Instance_Hnd& x);
    bool objectScalar_null() const;
    void objectScalar_clear();

    // booleanArray:
    const Array_boolean& booleanArray_value() const;
    void booleanArray_value(const Array_boolean& x);
    bool booleanArray_null() const;
    void booleanArray_clear();

    // uint8Array:
    const Array_uint8& uint8Array_value() const;
    void uint8Array_value(const Array_uint8& x);
    bool uint8Array_null() const;
    void uint8Array_clear();

    // sint8Array:
    const Array_sint8& sint8Array_value() const;
    void sint8Array_value(const Array_sint8& x);
    bool sint8Array_null() const;
    void sint8Array_clear();

    // uint16Array:
    const Array_uint16& uint16Array_value() const;
    void uint16Array_value(const Array_uint16& x);
    bool uint16Array_null() const;
    void uint16Array_clear();

    // sint16Array:
    const Array_sint16& sint16Array_value() const;
    void sint16Array_value(const Array_sint16& x);
    bool sint16Array_null() const;
    void sint16Array_clear();

    // uint32Array:
    const Array_uint32& uint32Array_value() const;
    void uint32Array_value(const Array_uint32& x);
    bool uint32Array_null() const;
    void uint32Array_clear();

    // sint32Array:
    const Array_sint32& sint32Array_value() const;
    void sint32Array_value(const Array_sint32& x);
    bool sint32Array_null() const;
    void sint32Array_clear();

    // uint64Array:
    const Array_uint64& uint64Array_value() const;
    void uint64Array_value(const Array_uint64& x);
    bool uint64Array_null() const;
    void uint64Array_clear();

    // sint64Array:
    const Array_sint64& sint64Array_value() const;
    void sint64Array_value(const Array_sint64& x);
    bool sint64Array_null() const;
    void sint64Array_clear();

    // real32Array:
    const Array_real32& real32Array_value() const;
    void real32Array_value(const Array_real32& x);
    bool real32Array_null() const;
    void real32Array_clear();

    // real64Array:
    const Array_real64& real64Array_value() const;
    void real64Array_value(const Array_real64& x);
    bool real64Array_null() const;
    void real64Array_clear();

    // char16Array:
    const Array_char16& char16Array_value() const;
    void char16Array_value(const Array_char16& x);
    bool char16Array_null() const;
    void char16Array_clear();

    // stringArray:
    const Array_String& stringArray_value() const;
    void stringArray_value(const Array_String& x);
    bool stringArray_null() const;
    void stringArray_clear();

    // datetimeArray:
    const Array_Datetime& datetimeArray_value() const;
    void datetimeArray_value(const Array_Datetime& x);
    bool datetimeArray_null() const;
    void datetimeArray_clear();

protected:
    All_Class_Hnd(const Meta_Class* mc);
    All_Class_Hnd(const Meta_Class* mc, const Instance_Hnd& x);
};

inline All_Class_Ref::All_Class_Ref() :
    Instance_Ref(&All_Class::static_meta_class)
{
}

inline All_Class_Ref::All_Class_Ref(const All_Class_Ref& x) :
    Instance_Ref(x)
{
}

inline All_Class_Ref::All_Class_Ref(All_Class* inst) :
    Instance_Ref((Instance*)inst)
{
}

inline All_Class_Ref::All_Class_Ref(const Instance_Ref& x) : 
    Instance_Ref(&All_Class::static_meta_class, x)
{
}

inline All_Class_Ref::All_Class_Ref(const Meta_Class* mc) : Instance_Ref(mc)
{
}

inline All_Class_Ref::All_Class_Ref(const Meta_Class* mc, const Instance_Ref& x) : Instance_Ref(mc, x)
{
}

inline All_Class_Ref::~All_Class_Ref()
{
}

inline All_Class_Ref& All_Class_Ref::operator=(const All_Class_Ref& x)
{
    Instance_Ref::operator=(x);
    return *this;
}

inline bool All_Class_Ref::is_a(const Instance_Ref& x)
{
    return is_subclass(&All_Class::static_meta_class, x.meta_class());
}

inline const uint32& All_Class_Ref::Key_value() const
{
    if (((Class*)_inst)->Key.null)
        _throw_null_access("Key");
   return ((Class*)_inst)->Key.value;
}

inline void All_Class_Ref::Key_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->Key.value = x;
   ((Class*)_inst)->Key.null = false;
}

inline bool All_Class_Ref::Key_null() const
{
   return ((Class*)_inst)->Key.null;
}

inline void All_Class_Ref::Key_clear()
{
    _cow();
    __clear(((Class*)_inst)->Key.value);
    ((Class*)_inst)->Key.null = true;;
}

inline Arg<boolean> All_Class_Ref::booleanReturn(
    Ops& __ops,
    const String& __name_space)
{
    Arg<boolean> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_booleanReturn_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<uint8> All_Class_Ref::uint8Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<uint8> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_uint8Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<sint8> All_Class_Ref::sint8Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<sint8> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_sint8Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<uint16> All_Class_Ref::uint16Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<uint16> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_uint16Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<sint16> All_Class_Ref::sint16Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<sint16> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_sint16Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::uint32Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_uint32Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<sint32> All_Class_Ref::sint32Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<sint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_sint32Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<uint64> All_Class_Ref::uint64Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<uint64> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_uint64Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<sint64> All_Class_Ref::sint64Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<sint64> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_sint64Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<real32> All_Class_Ref::real32Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<real32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_real32Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<real64> All_Class_Ref::real64Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<real64> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_real64Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<char16> All_Class_Ref::char16Return(
    Ops& __ops,
    const String& __name_space)
{
    Arg<char16> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_char16Return_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<String> All_Class_Ref::stringReturn(
    Ops& __ops,
    const String& __name_space)
{
    Arg<String> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_stringReturn_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<Datetime> All_Class_Ref::datetimeReturn(
    Ops& __ops,
    const String& __name_space)
{
    Arg<Datetime> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_datetimeReturn_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<All_Part_Hnd> All_Class_Ref::instanceReturn(
    Ops& __ops,
    const String& __name_space)
{
    Arg<All_Part_Hnd> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_instanceReturn_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<Instance_Hnd> All_Class_Ref::objectReturn(
    Ops& __ops,
    const String& __name_space)
{
    Arg<Instance_Hnd> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_objectReturn_method::static_meta_class,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::booleanScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<boolean>& p1,
    Arg<boolean>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_booleanScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::uint8ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<uint8>& p1,
    Arg<uint8>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_uint8ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::sint8ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<sint8>& p1,
    Arg<sint8>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_sint8ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::uint16ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<uint16>& p1,
    Arg<uint16>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_uint16ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::sint16ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<sint16>& p1,
    Arg<sint16>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_sint16ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::uint32ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<uint32>& p1,
    Arg<uint32>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_uint32ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::sint32ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<sint32>& p1,
    Arg<sint32>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_sint32ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::uint64ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<uint64>& p1,
    Arg<uint64>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_uint64ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::sint64ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<sint64>& p1,
    Arg<sint64>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_sint64ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::real32ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<real32>& p1,
    Arg<real32>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_real32ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::real64ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<real64>& p1,
    Arg<real64>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_real64ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::char16ScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<char16>& p1,
    Arg<char16>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_char16ScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::stringScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<String>& p1,
    Arg<String>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_stringScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::datetimeScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Datetime>& p1,
    Arg<Datetime>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_datetimeScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::objectScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Instance_Hnd>& p1,
    Arg<Instance_Hnd>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_objectScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::instanceScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<All_Part_Hnd>& p1,
    Arg<All_Part_Hnd>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_instanceScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::referenceScalarParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<All_Part_Ref>& p1,
    Arg<All_Part_Ref>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_referenceScalarParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::booleanArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_boolean>& p1,
    Arg<Array_boolean>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_booleanArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::uint8ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_uint8>& p1,
    Arg<Array_uint8>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_uint8ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::sint8ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_sint8>& p1,
    Arg<Array_sint8>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_sint8ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::uint16ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_uint16>& p1,
    Arg<Array_uint16>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_uint16ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::sint16ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_sint16>& p1,
    Arg<Array_sint16>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_sint16ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::uint32ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_uint32>& p1,
    Arg<Array_uint32>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_uint32ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::sint32ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_sint32>& p1,
    Arg<Array_sint32>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_sint32ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::uint64ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_uint64>& p1,
    Arg<Array_uint64>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_uint64ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::sint64ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_sint64>& p1,
    Arg<Array_sint64>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_sint64ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::real32ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_real32>& p1,
    Arg<Array_real32>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_real32ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::real64ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_real64>& p1,
    Arg<Array_real64>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_real64ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::char16ArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_char16>& p1,
    Arg<Array_char16>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_char16ArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::stringArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_String>& p1,
    Arg<Array_String>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_stringArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::datetimeArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg<Array_Datetime>& p1,
    Arg<Array_Datetime>& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_datetimeArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::objectArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg< Array<Instance_Hnd> >& p1,
    Arg< Array<Instance_Hnd> >& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_objectArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::instanceArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg< Array<All_Part_Hnd> >& p1,
    Arg< Array<All_Part_Hnd> >& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_instanceArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline Arg<uint32> All_Class_Ref::referenceArrayParams(
    Ops& __ops,
    const String& __name_space,
    const Arg< Array<All_Part_Ref> >& p1,
    Arg< Array<All_Part_Ref> >& p2)
{
    Arg<uint32> __return_value;
    __invoke(
        __ops,
        __name_space,
        *this,
        &All_Class_referenceArrayParams_method::static_meta_class,
        &p1,
        &p2,
        &__return_value);
    return __return_value;
}

inline All_Class_Hnd::All_Class_Hnd() :
    Instance_Hnd(&All_Class::static_meta_class)
{
}

inline All_Class_Hnd::All_Class_Hnd(const All_Class_Hnd& x) :
    Instance_Hnd(x)
{
}

inline All_Class_Hnd::All_Class_Hnd(All_Class* inst) :
    Instance_Hnd((Instance*)inst)
{
}

inline All_Class_Hnd::All_Class_Hnd(const Instance_Hnd& x) : 
    Instance_Hnd(&All_Class::static_meta_class, x)
{
}

inline All_Class_Hnd::All_Class_Hnd(const Meta_Class* mc) : Instance_Hnd(mc)
{
}

inline All_Class_Hnd::All_Class_Hnd(const Meta_Class* mc, const Instance_Hnd& x) : Instance_Hnd(mc, x)
{
}

inline All_Class_Hnd::~All_Class_Hnd()
{
}

inline All_Class_Hnd& All_Class_Hnd::operator=(const All_Class_Hnd& x)
{
    Instance_Hnd::operator=(x);
    return *this;
}

inline bool All_Class_Hnd::is_a(const Instance_Hnd& x)
{
    return is_subclass(&All_Class::static_meta_class, x.meta_class());
}

inline All_Class_Ref All_Class_Hnd::reference() const
{
    return All_Class_Ref((All_Class*)key_clone(_inst));
}

inline const uint32& All_Class_Hnd::Key_value() const
{
    if (((Class*)_inst)->Key.null)
        _throw_null_access("Key");
   return ((Class*)_inst)->Key.value;
}

inline void All_Class_Hnd::Key_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->Key.value = x;
   ((Class*)_inst)->Key.null = false;
}

inline bool All_Class_Hnd::Key_null() const
{
   return ((Class*)_inst)->Key.null;
}

inline void All_Class_Hnd::Key_clear()
{
    _cow();
    __clear(((Class*)_inst)->Key.value);
    ((Class*)_inst)->Key.null = true;;
}

inline const boolean& All_Class_Hnd::booleanScalar_value() const
{
    if (((Class*)_inst)->booleanScalar.null)
        _throw_null_access("booleanScalar");
   return ((Class*)_inst)->booleanScalar.value;
}

inline void All_Class_Hnd::booleanScalar_value(const boolean& x)
{
    _cow();
   ((Class*)_inst)->booleanScalar.value = x;
   ((Class*)_inst)->booleanScalar.null = false;
}

inline bool All_Class_Hnd::booleanScalar_null() const
{
   return ((Class*)_inst)->booleanScalar.null;
}

inline void All_Class_Hnd::booleanScalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->booleanScalar.value);
    ((Class*)_inst)->booleanScalar.null = true;;
}

inline const uint8& All_Class_Hnd::uint8Scalar_value() const
{
    if (((Class*)_inst)->uint8Scalar.null)
        _throw_null_access("uint8Scalar");
   return ((Class*)_inst)->uint8Scalar.value;
}

inline void All_Class_Hnd::uint8Scalar_value(const uint8& x)
{
    _cow();
   ((Class*)_inst)->uint8Scalar.value = x;
   ((Class*)_inst)->uint8Scalar.null = false;
}

inline bool All_Class_Hnd::uint8Scalar_null() const
{
   return ((Class*)_inst)->uint8Scalar.null;
}

inline void All_Class_Hnd::uint8Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->uint8Scalar.value);
    ((Class*)_inst)->uint8Scalar.null = true;;
}

inline const sint8& All_Class_Hnd::sint8Scalar_value() const
{
    if (((Class*)_inst)->sint8Scalar.null)
        _throw_null_access("sint8Scalar");
   return ((Class*)_inst)->sint8Scalar.value;
}

inline void All_Class_Hnd::sint8Scalar_value(const sint8& x)
{
    _cow();
   ((Class*)_inst)->sint8Scalar.value = x;
   ((Class*)_inst)->sint8Scalar.null = false;
}

inline bool All_Class_Hnd::sint8Scalar_null() const
{
   return ((Class*)_inst)->sint8Scalar.null;
}

inline void All_Class_Hnd::sint8Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->sint8Scalar.value);
    ((Class*)_inst)->sint8Scalar.null = true;;
}

inline const uint16& All_Class_Hnd::uint16Scalar_value() const
{
    if (((Class*)_inst)->uint16Scalar.null)
        _throw_null_access("uint16Scalar");
   return ((Class*)_inst)->uint16Scalar.value;
}

inline void All_Class_Hnd::uint16Scalar_value(const uint16& x)
{
    _cow();
   ((Class*)_inst)->uint16Scalar.value = x;
   ((Class*)_inst)->uint16Scalar.null = false;
}

inline bool All_Class_Hnd::uint16Scalar_null() const
{
   return ((Class*)_inst)->uint16Scalar.null;
}

inline void All_Class_Hnd::uint16Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->uint16Scalar.value);
    ((Class*)_inst)->uint16Scalar.null = true;;
}

inline const sint16& All_Class_Hnd::sint16Scalar_value() const
{
    if (((Class*)_inst)->sint16Scalar.null)
        _throw_null_access("sint16Scalar");
   return ((Class*)_inst)->sint16Scalar.value;
}

inline void All_Class_Hnd::sint16Scalar_value(const sint16& x)
{
    _cow();
   ((Class*)_inst)->sint16Scalar.value = x;
   ((Class*)_inst)->sint16Scalar.null = false;
}

inline bool All_Class_Hnd::sint16Scalar_null() const
{
   return ((Class*)_inst)->sint16Scalar.null;
}

inline void All_Class_Hnd::sint16Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->sint16Scalar.value);
    ((Class*)_inst)->sint16Scalar.null = true;;
}

inline const uint32& All_Class_Hnd::uint32Scalar_value() const
{
    if (((Class*)_inst)->uint32Scalar.null)
        _throw_null_access("uint32Scalar");
   return ((Class*)_inst)->uint32Scalar.value;
}

inline void All_Class_Hnd::uint32Scalar_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->uint32Scalar.value = x;
   ((Class*)_inst)->uint32Scalar.null = false;
}

inline bool All_Class_Hnd::uint32Scalar_null() const
{
   return ((Class*)_inst)->uint32Scalar.null;
}

inline void All_Class_Hnd::uint32Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->uint32Scalar.value);
    ((Class*)_inst)->uint32Scalar.null = true;;
}

inline const sint32& All_Class_Hnd::sint32Scalar_value() const
{
    if (((Class*)_inst)->sint32Scalar.null)
        _throw_null_access("sint32Scalar");
   return ((Class*)_inst)->sint32Scalar.value;
}

inline void All_Class_Hnd::sint32Scalar_value(const sint32& x)
{
    _cow();
   ((Class*)_inst)->sint32Scalar.value = x;
   ((Class*)_inst)->sint32Scalar.null = false;
}

inline bool All_Class_Hnd::sint32Scalar_null() const
{
   return ((Class*)_inst)->sint32Scalar.null;
}

inline void All_Class_Hnd::sint32Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->sint32Scalar.value);
    ((Class*)_inst)->sint32Scalar.null = true;;
}

inline const uint64& All_Class_Hnd::uint64Scalar_value() const
{
    if (((Class*)_inst)->uint64Scalar.null)
        _throw_null_access("uint64Scalar");
   return ((Class*)_inst)->uint64Scalar.value;
}

inline void All_Class_Hnd::uint64Scalar_value(const uint64& x)
{
    _cow();
   ((Class*)_inst)->uint64Scalar.value = x;
   ((Class*)_inst)->uint64Scalar.null = false;
}

inline bool All_Class_Hnd::uint64Scalar_null() const
{
   return ((Class*)_inst)->uint64Scalar.null;
}

inline void All_Class_Hnd::uint64Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->uint64Scalar.value);
    ((Class*)_inst)->uint64Scalar.null = true;;
}

inline const sint64& All_Class_Hnd::sint64Scalar_value() const
{
    if (((Class*)_inst)->sint64Scalar.null)
        _throw_null_access("sint64Scalar");
   return ((Class*)_inst)->sint64Scalar.value;
}

inline void All_Class_Hnd::sint64Scalar_value(const sint64& x)
{
    _cow();
   ((Class*)_inst)->sint64Scalar.value = x;
   ((Class*)_inst)->sint64Scalar.null = false;
}

inline bool All_Class_Hnd::sint64Scalar_null() const
{
   return ((Class*)_inst)->sint64Scalar.null;
}

inline void All_Class_Hnd::sint64Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->sint64Scalar.value);
    ((Class*)_inst)->sint64Scalar.null = true;;
}

inline const real32& All_Class_Hnd::real32Scalar_value() const
{
    if (((Class*)_inst)->real32Scalar.null)
        _throw_null_access("real32Scalar");
   return ((Class*)_inst)->real32Scalar.value;
}

inline void All_Class_Hnd::real32Scalar_value(const real32& x)
{
    _cow();
   ((Class*)_inst)->real32Scalar.value = x;
   ((Class*)_inst)->real32Scalar.null = false;
}

inline bool All_Class_Hnd::real32Scalar_null() const
{
   return ((Class*)_inst)->real32Scalar.null;
}

inline void All_Class_Hnd::real32Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->real32Scalar.value);
    ((Class*)_inst)->real32Scalar.null = true;;
}

inline const real64& All_Class_Hnd::real64Scalar_value() const
{
    if (((Class*)_inst)->real64Scalar.null)
        _throw_null_access("real64Scalar");
   return ((Class*)_inst)->real64Scalar.value;
}

inline void All_Class_Hnd::real64Scalar_value(const real64& x)
{
    _cow();
   ((Class*)_inst)->real64Scalar.value = x;
   ((Class*)_inst)->real64Scalar.null = false;
}

inline bool All_Class_Hnd::real64Scalar_null() const
{
   return ((Class*)_inst)->real64Scalar.null;
}

inline void All_Class_Hnd::real64Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->real64Scalar.value);
    ((Class*)_inst)->real64Scalar.null = true;;
}

inline const char16& All_Class_Hnd::char16Scalar_value() const
{
    if (((Class*)_inst)->char16Scalar.null)
        _throw_null_access("char16Scalar");
   return ((Class*)_inst)->char16Scalar.value;
}

inline void All_Class_Hnd::char16Scalar_value(const char16& x)
{
    _cow();
   ((Class*)_inst)->char16Scalar.value = x;
   ((Class*)_inst)->char16Scalar.null = false;
}

inline bool All_Class_Hnd::char16Scalar_null() const
{
   return ((Class*)_inst)->char16Scalar.null;
}

inline void All_Class_Hnd::char16Scalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->char16Scalar.value);
    ((Class*)_inst)->char16Scalar.null = true;;
}

inline const String& All_Class_Hnd::stringScalar_value() const
{
    if (((Class*)_inst)->stringScalar.null)
        _throw_null_access("stringScalar");
   return ((Class*)_inst)->stringScalar.value;
}

inline void All_Class_Hnd::stringScalar_value(const String& x)
{
    _cow();
   ((Class*)_inst)->stringScalar.value = x;
   ((Class*)_inst)->stringScalar.null = false;
}

inline bool All_Class_Hnd::stringScalar_null() const
{
   return ((Class*)_inst)->stringScalar.null;
}

inline void All_Class_Hnd::stringScalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->stringScalar.value);
    ((Class*)_inst)->stringScalar.null = true;;
}

inline const Datetime& All_Class_Hnd::datetimeScalar_value() const
{
    if (((Class*)_inst)->datetimeScalar.null)
        _throw_null_access("datetimeScalar");
   return ((Class*)_inst)->datetimeScalar.value;
}

inline void All_Class_Hnd::datetimeScalar_value(const Datetime& x)
{
    _cow();
   ((Class*)_inst)->datetimeScalar.value = x;
   ((Class*)_inst)->datetimeScalar.null = false;
}

inline bool All_Class_Hnd::datetimeScalar_null() const
{
   return ((Class*)_inst)->datetimeScalar.null;
}

inline void All_Class_Hnd::datetimeScalar_clear()
{
    _cow();
    __clear(((Class*)_inst)->datetimeScalar.value);
    ((Class*)_inst)->datetimeScalar.null = true;;
}

inline All_Part_Hnd All_Class_Hnd::instanceScalar_value() const
{
    if (!((Class*)_inst)->instanceScalar)
        _throw_null_access("instanceScalar");
    ref(((Class*)_inst)->instanceScalar);
    return All_Part_Hnd(((Class*)_inst)->instanceScalar);
}

inline void All_Class_Hnd::instanceScalar_value(const All_Part_Hnd& x)
{
    _cow();
    unref(((Class*)_inst)->instanceScalar);
    ref(((Class*)_inst)->instanceScalar = (All_Part*)x.instance());
}

inline bool All_Class_Hnd::instanceScalar_null() const
{
    return ((Class*)_inst)->instanceScalar == 0;
}

inline void All_Class_Hnd::instanceScalar_clear()
{
    _cow();
    unref(((Class*)_inst)->instanceScalar);
    ((Class*)_inst)->instanceScalar = 0;
}

inline Instance_Hnd All_Class_Hnd::objectScalar_value() const
{
    if (!((Class*)_inst)->objectScalar)
        _throw_null_access("objectScalar");
    ref(((Class*)_inst)->objectScalar);
    return Instance_Hnd(((Class*)_inst)->objectScalar);
}

inline void All_Class_Hnd::objectScalar_value(const Instance_Hnd& x)
{
    _cow();
    unref(((Class*)_inst)->objectScalar);
    ref(((Class*)_inst)->objectScalar = (Instance*)x.instance());
}

inline bool All_Class_Hnd::objectScalar_null() const
{
    return ((Class*)_inst)->objectScalar == 0;
}

inline void All_Class_Hnd::objectScalar_clear()
{
    _cow();
    unref(((Class*)_inst)->objectScalar);
    ((Class*)_inst)->objectScalar = 0;
}

inline const Array_boolean& All_Class_Hnd::booleanArray_value() const
{
    if (((Class*)_inst)->booleanArray.null)
        _throw_null_access("booleanArray");
   return ((Class*)_inst)->booleanArray.value;
}

inline void All_Class_Hnd::booleanArray_value(const Array_boolean& x)
{
    _cow();
   ((Class*)_inst)->booleanArray.value = x;
   ((Class*)_inst)->booleanArray.null = false;
}

inline bool All_Class_Hnd::booleanArray_null() const
{
   return ((Class*)_inst)->booleanArray.null;
}

inline void All_Class_Hnd::booleanArray_clear()
{
    _cow();
    __clear(((Class*)_inst)->booleanArray.value);
    ((Class*)_inst)->booleanArray.null = true;;
}

inline const Array_uint8& All_Class_Hnd::uint8Array_value() const
{
    if (((Class*)_inst)->uint8Array.null)
        _throw_null_access("uint8Array");
   return ((Class*)_inst)->uint8Array.value;
}

inline void All_Class_Hnd::uint8Array_value(const Array_uint8& x)
{
    _cow();
   ((Class*)_inst)->uint8Array.value = x;
   ((Class*)_inst)->uint8Array.null = false;
}

inline bool All_Class_Hnd::uint8Array_null() const
{
   return ((Class*)_inst)->uint8Array.null;
}

inline void All_Class_Hnd::uint8Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->uint8Array.value);
    ((Class*)_inst)->uint8Array.null = true;;
}

inline const Array_sint8& All_Class_Hnd::sint8Array_value() const
{
    if (((Class*)_inst)->sint8Array.null)
        _throw_null_access("sint8Array");
   return ((Class*)_inst)->sint8Array.value;
}

inline void All_Class_Hnd::sint8Array_value(const Array_sint8& x)
{
    _cow();
   ((Class*)_inst)->sint8Array.value = x;
   ((Class*)_inst)->sint8Array.null = false;
}

inline bool All_Class_Hnd::sint8Array_null() const
{
   return ((Class*)_inst)->sint8Array.null;
}

inline void All_Class_Hnd::sint8Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->sint8Array.value);
    ((Class*)_inst)->sint8Array.null = true;;
}

inline const Array_uint16& All_Class_Hnd::uint16Array_value() const
{
    if (((Class*)_inst)->uint16Array.null)
        _throw_null_access("uint16Array");
   return ((Class*)_inst)->uint16Array.value;
}

inline void All_Class_Hnd::uint16Array_value(const Array_uint16& x)
{
    _cow();
   ((Class*)_inst)->uint16Array.value = x;
   ((Class*)_inst)->uint16Array.null = false;
}

inline bool All_Class_Hnd::uint16Array_null() const
{
   return ((Class*)_inst)->uint16Array.null;
}

inline void All_Class_Hnd::uint16Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->uint16Array.value);
    ((Class*)_inst)->uint16Array.null = true;;
}

inline const Array_sint16& All_Class_Hnd::sint16Array_value() const
{
    if (((Class*)_inst)->sint16Array.null)
        _throw_null_access("sint16Array");
   return ((Class*)_inst)->sint16Array.value;
}

inline void All_Class_Hnd::sint16Array_value(const Array_sint16& x)
{
    _cow();
   ((Class*)_inst)->sint16Array.value = x;
   ((Class*)_inst)->sint16Array.null = false;
}

inline bool All_Class_Hnd::sint16Array_null() const
{
   return ((Class*)_inst)->sint16Array.null;
}

inline void All_Class_Hnd::sint16Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->sint16Array.value);
    ((Class*)_inst)->sint16Array.null = true;;
}

inline const Array_uint32& All_Class_Hnd::uint32Array_value() const
{
    if (((Class*)_inst)->uint32Array.null)
        _throw_null_access("uint32Array");
   return ((Class*)_inst)->uint32Array.value;
}

inline void All_Class_Hnd::uint32Array_value(const Array_uint32& x)
{
    _cow();
   ((Class*)_inst)->uint32Array.value = x;
   ((Class*)_inst)->uint32Array.null = false;
}

inline bool All_Class_Hnd::uint32Array_null() const
{
   return ((Class*)_inst)->uint32Array.null;
}

inline void All_Class_Hnd::uint32Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->uint32Array.value);
    ((Class*)_inst)->uint32Array.null = true;;
}

inline const Array_sint32& All_Class_Hnd::sint32Array_value() const
{
    if (((Class*)_inst)->sint32Array.null)
        _throw_null_access("sint32Array");
   return ((Class*)_inst)->sint32Array.value;
}

inline void All_Class_Hnd::sint32Array_value(const Array_sint32& x)
{
    _cow();
   ((Class*)_inst)->sint32Array.value = x;
   ((Class*)_inst)->sint32Array.null = false;
}

inline bool All_Class_Hnd::sint32Array_null() const
{
   return ((Class*)_inst)->sint32Array.null;
}

inline void All_Class_Hnd::sint32Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->sint32Array.value);
    ((Class*)_inst)->sint32Array.null = true;;
}

inline const Array_uint64& All_Class_Hnd::uint64Array_value() const
{
    if (((Class*)_inst)->uint64Array.null)
        _throw_null_access("uint64Array");
   return ((Class*)_inst)->uint64Array.value;
}

inline void All_Class_Hnd::uint64Array_value(const Array_uint64& x)
{
    _cow();
   ((Class*)_inst)->uint64Array.value = x;
   ((Class*)_inst)->uint64Array.null = false;
}

inline bool All_Class_Hnd::uint64Array_null() const
{
   return ((Class*)_inst)->uint64Array.null;
}

inline void All_Class_Hnd::uint64Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->uint64Array.value);
    ((Class*)_inst)->uint64Array.null = true;;
}

inline const Array_sint64& All_Class_Hnd::sint64Array_value() const
{
    if (((Class*)_inst)->sint64Array.null)
        _throw_null_access("sint64Array");
   return ((Class*)_inst)->sint64Array.value;
}

inline void All_Class_Hnd::sint64Array_value(const Array_sint64& x)
{
    _cow();
   ((Class*)_inst)->sint64Array.value = x;
   ((Class*)_inst)->sint64Array.null = false;
}

inline bool All_Class_Hnd::sint64Array_null() const
{
   return ((Class*)_inst)->sint64Array.null;
}

inline void All_Class_Hnd::sint64Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->sint64Array.value);
    ((Class*)_inst)->sint64Array.null = true;;
}

inline const Array_real32& All_Class_Hnd::real32Array_value() const
{
    if (((Class*)_inst)->real32Array.null)
        _throw_null_access("real32Array");
   return ((Class*)_inst)->real32Array.value;
}

inline void All_Class_Hnd::real32Array_value(const Array_real32& x)
{
    _cow();
   ((Class*)_inst)->real32Array.value = x;
   ((Class*)_inst)->real32Array.null = false;
}

inline bool All_Class_Hnd::real32Array_null() const
{
   return ((Class*)_inst)->real32Array.null;
}

inline void All_Class_Hnd::real32Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->real32Array.value);
    ((Class*)_inst)->real32Array.null = true;;
}

inline const Array_real64& All_Class_Hnd::real64Array_value() const
{
    if (((Class*)_inst)->real64Array.null)
        _throw_null_access("real64Array");
   return ((Class*)_inst)->real64Array.value;
}

inline void All_Class_Hnd::real64Array_value(const Array_real64& x)
{
    _cow();
   ((Class*)_inst)->real64Array.value = x;
   ((Class*)_inst)->real64Array.null = false;
}

inline bool All_Class_Hnd::real64Array_null() const
{
   return ((Class*)_inst)->real64Array.null;
}

inline void All_Class_Hnd::real64Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->real64Array.value);
    ((Class*)_inst)->real64Array.null = true;;
}

inline const Array_char16& All_Class_Hnd::char16Array_value() const
{
    if (((Class*)_inst)->char16Array.null)
        _throw_null_access("char16Array");
   return ((Class*)_inst)->char16Array.value;
}

inline void All_Class_Hnd::char16Array_value(const Array_char16& x)
{
    _cow();
   ((Class*)_inst)->char16Array.value = x;
   ((Class*)_inst)->char16Array.null = false;
}

inline bool All_Class_Hnd::char16Array_null() const
{
   return ((Class*)_inst)->char16Array.null;
}

inline void All_Class_Hnd::char16Array_clear()
{
    _cow();
    __clear(((Class*)_inst)->char16Array.value);
    ((Class*)_inst)->char16Array.null = true;;
}

inline const Array_String& All_Class_Hnd::stringArray_value() const
{
    if (((Class*)_inst)->stringArray.null)
        _throw_null_access("stringArray");
   return ((Class*)_inst)->stringArray.value;
}

inline void All_Class_Hnd::stringArray_value(const Array_String& x)
{
    _cow();
   ((Class*)_inst)->stringArray.value = x;
   ((Class*)_inst)->stringArray.null = false;
}

inline bool All_Class_Hnd::stringArray_null() const
{
   return ((Class*)_inst)->stringArray.null;
}

inline void All_Class_Hnd::stringArray_clear()
{
    _cow();
    __clear(((Class*)_inst)->stringArray.value);
    ((Class*)_inst)->stringArray.null = true;;
}

inline const Array_Datetime& All_Class_Hnd::datetimeArray_value() const
{
    if (((Class*)_inst)->datetimeArray.null)
        _throw_null_access("datetimeArray");
   return ((Class*)_inst)->datetimeArray.value;
}

inline void All_Class_Hnd::datetimeArray_value(const Array_Datetime& x)
{
    _cow();
   ((Class*)_inst)->datetimeArray.value = x;
   ((Class*)_inst)->datetimeArray.null = false;
}

inline bool All_Class_Hnd::datetimeArray_null() const
{
   return ((Class*)_inst)->datetimeArray.null;
}

inline void All_Class_Hnd::datetimeArray_clear()
{
    _cow();
    __clear(((Class*)_inst)->datetimeArray.value);
    ((Class*)_inst)->datetimeArray.null = true;;
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_All_Class_Hnd_h */
