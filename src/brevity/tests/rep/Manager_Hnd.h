//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENHND.
//
//==============================================================================

#ifndef _cimple_Manager_Hnd
#define _cimple_Manager_Hnd

#include <cimple/cimple.h>
#include "Manager.h"
#include "Employee_Hnd.h"

CIMPLE_NAMESPACE_BEGIN

class Manager_Ref : public Employee_Ref
{
public:
    typedef Manager Class;
    Manager_Ref();
    Manager_Ref(const Manager_Ref& x);
    Manager_Ref(Manager* inst);
    explicit Manager_Ref(const Instance_Ref& x);
    ~Manager_Ref();
    Manager_Ref& operator=(const Manager_Ref& x);
    static bool is_a(const Instance_Ref& x);

protected:
    Manager_Ref(const Meta_Class* mc);
    Manager_Ref(const Meta_Class* mc, const Instance_Ref& x);
};

class Manager_Hnd : public Employee_Hnd
{
public:
    typedef Manager Class;
    Manager_Hnd();
    Manager_Hnd(const Manager_Hnd& x);
    Manager_Hnd(Manager* inst);
    explicit Manager_Hnd(const Instance_Hnd& x);
    ~Manager_Hnd();
    Manager_Hnd& operator=(const Manager_Hnd& x);
    static bool is_a(const Instance_Hnd& x);
    Manager_Ref reference() const;

    // NumEmployees:
    const uint32& NumEmployees_value() const;
    void NumEmployees_value(const uint32& x);
    bool NumEmployees_null() const;
    void NumEmployees_clear();

    // Budget:
    const uint32& Budget_value() const;
    void Budget_value(const uint32& x);
    bool Budget_null() const;
    void Budget_clear();

protected:
    Manager_Hnd(const Meta_Class* mc);
    Manager_Hnd(const Meta_Class* mc, const Instance_Hnd& x);
};

inline Manager_Ref::Manager_Ref() :
    Employee_Ref(&Manager::static_meta_class)
{
}

inline Manager_Ref::Manager_Ref(const Manager_Ref& x) :
    Employee_Ref(x)
{
}

inline Manager_Ref::Manager_Ref(Manager* inst) :
    Employee_Ref((Employee*)inst)
{
}

inline Manager_Ref::Manager_Ref(const Instance_Ref& x) : 
    Employee_Ref(&Manager::static_meta_class, x)
{
}

inline Manager_Ref::Manager_Ref(const Meta_Class* mc) : Employee_Ref(mc)
{
}

inline Manager_Ref::Manager_Ref(const Meta_Class* mc, const Instance_Ref& x) : Employee_Ref(mc, x)
{
}

inline Manager_Ref::~Manager_Ref()
{
}

inline Manager_Ref& Manager_Ref::operator=(const Manager_Ref& x)
{
    Employee_Ref::operator=(x);
    return *this;
}

inline bool Manager_Ref::is_a(const Instance_Ref& x)
{
    return is_subclass(&Manager::static_meta_class, x.meta_class());
}

inline Manager_Hnd::Manager_Hnd() :
    Employee_Hnd(&Manager::static_meta_class)
{
}

inline Manager_Hnd::Manager_Hnd(const Manager_Hnd& x) :
    Employee_Hnd(x)
{
}

inline Manager_Hnd::Manager_Hnd(Manager* inst) :
    Employee_Hnd((Employee*)inst)
{
}

inline Manager_Hnd::Manager_Hnd(const Instance_Hnd& x) : 
    Employee_Hnd(&Manager::static_meta_class, x)
{
}

inline Manager_Hnd::Manager_Hnd(const Meta_Class* mc) : Employee_Hnd(mc)
{
}

inline Manager_Hnd::Manager_Hnd(const Meta_Class* mc, const Instance_Hnd& x) : Employee_Hnd(mc, x)
{
}

inline Manager_Hnd::~Manager_Hnd()
{
}

inline Manager_Hnd& Manager_Hnd::operator=(const Manager_Hnd& x)
{
    Employee_Hnd::operator=(x);
    return *this;
}

inline bool Manager_Hnd::is_a(const Instance_Hnd& x)
{
    return is_subclass(&Manager::static_meta_class, x.meta_class());
}

inline Manager_Ref Manager_Hnd::reference() const
{
    return Manager_Ref((Manager*)key_clone(_inst));
}

inline const uint32& Manager_Hnd::NumEmployees_value() const
{
    if (((Class*)_inst)->NumEmployees.null)
        _throw_null_access("NumEmployees");
   return ((Class*)_inst)->NumEmployees.value;
}

inline void Manager_Hnd::NumEmployees_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->NumEmployees.value = x;
   ((Class*)_inst)->NumEmployees.null = false;
}

inline bool Manager_Hnd::NumEmployees_null() const
{
   return ((Class*)_inst)->NumEmployees.null;
}

inline void Manager_Hnd::NumEmployees_clear()
{
    _cow();
    __clear(((Class*)_inst)->NumEmployees.value);
    ((Class*)_inst)->NumEmployees.null = true;;
}

inline const uint32& Manager_Hnd::Budget_value() const
{
    if (((Class*)_inst)->Budget.null)
        _throw_null_access("Budget");
   return ((Class*)_inst)->Budget.value;
}

inline void Manager_Hnd::Budget_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->Budget.value = x;
   ((Class*)_inst)->Budget.null = false;
}

inline bool Manager_Hnd::Budget_null() const
{
   return ((Class*)_inst)->Budget.null;
}

inline void Manager_Hnd::Budget_clear()
{
    _cow();
    __clear(((Class*)_inst)->Budget.value);
    ((Class*)_inst)->Budget.null = true;;
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_Manager_Hnd_h */
