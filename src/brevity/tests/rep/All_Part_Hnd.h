//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENHND.
//
//==============================================================================

#ifndef _cimple_All_Part_Hnd
#define _cimple_All_Part_Hnd

#include <cimple/cimple.h>
#include "All_Part.h"

CIMPLE_NAMESPACE_BEGIN

class All_Part_Ref : public Instance_Ref
{
public:
    typedef All_Part Class;
    All_Part_Ref();
    All_Part_Ref(const All_Part_Ref& x);
    All_Part_Ref(All_Part* inst);
    explicit All_Part_Ref(const Instance_Ref& x);
    ~All_Part_Ref();
    All_Part_Ref& operator=(const All_Part_Ref& x);
    static bool is_a(const Instance_Ref& x);

    // Key:
    const uint32& Key_value() const;
    void Key_value(const uint32& x);
    bool Key_null() const;
    void Key_clear();

protected:
    All_Part_Ref(const Meta_Class* mc);
    All_Part_Ref(const Meta_Class* mc, const Instance_Ref& x);
};

class All_Part_Hnd : public Instance_Hnd
{
public:
    typedef All_Part Class;
    All_Part_Hnd();
    All_Part_Hnd(const All_Part_Hnd& x);
    All_Part_Hnd(All_Part* inst);
    explicit All_Part_Hnd(const Instance_Hnd& x);
    ~All_Part_Hnd();
    All_Part_Hnd& operator=(const All_Part_Hnd& x);
    static bool is_a(const Instance_Hnd& x);
    All_Part_Ref reference() const;

    // Key:
    const uint32& Key_value() const;
    void Key_value(const uint32& x);
    bool Key_null() const;
    void Key_clear();

protected:
    All_Part_Hnd(const Meta_Class* mc);
    All_Part_Hnd(const Meta_Class* mc, const Instance_Hnd& x);
};

inline All_Part_Ref::All_Part_Ref() :
    Instance_Ref(&All_Part::static_meta_class)
{
}

inline All_Part_Ref::All_Part_Ref(const All_Part_Ref& x) :
    Instance_Ref(x)
{
}

inline All_Part_Ref::All_Part_Ref(All_Part* inst) :
    Instance_Ref((Instance*)inst)
{
}

inline All_Part_Ref::All_Part_Ref(const Instance_Ref& x) : 
    Instance_Ref(&All_Part::static_meta_class, x)
{
}

inline All_Part_Ref::All_Part_Ref(const Meta_Class* mc) : Instance_Ref(mc)
{
}

inline All_Part_Ref::All_Part_Ref(const Meta_Class* mc, const Instance_Ref& x) : Instance_Ref(mc, x)
{
}

inline All_Part_Ref::~All_Part_Ref()
{
}

inline All_Part_Ref& All_Part_Ref::operator=(const All_Part_Ref& x)
{
    Instance_Ref::operator=(x);
    return *this;
}

inline bool All_Part_Ref::is_a(const Instance_Ref& x)
{
    return is_subclass(&All_Part::static_meta_class, x.meta_class());
}

inline const uint32& All_Part_Ref::Key_value() const
{
    if (((Class*)_inst)->Key.null)
        _throw_null_access("Key");
   return ((Class*)_inst)->Key.value;
}

inline void All_Part_Ref::Key_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->Key.value = x;
   ((Class*)_inst)->Key.null = false;
}

inline bool All_Part_Ref::Key_null() const
{
   return ((Class*)_inst)->Key.null;
}

inline void All_Part_Ref::Key_clear()
{
    _cow();
    __clear(((Class*)_inst)->Key.value);
    ((Class*)_inst)->Key.null = true;;
}

inline All_Part_Hnd::All_Part_Hnd() :
    Instance_Hnd(&All_Part::static_meta_class)
{
}

inline All_Part_Hnd::All_Part_Hnd(const All_Part_Hnd& x) :
    Instance_Hnd(x)
{
}

inline All_Part_Hnd::All_Part_Hnd(All_Part* inst) :
    Instance_Hnd((Instance*)inst)
{
}

inline All_Part_Hnd::All_Part_Hnd(const Instance_Hnd& x) : 
    Instance_Hnd(&All_Part::static_meta_class, x)
{
}

inline All_Part_Hnd::All_Part_Hnd(const Meta_Class* mc) : Instance_Hnd(mc)
{
}

inline All_Part_Hnd::All_Part_Hnd(const Meta_Class* mc, const Instance_Hnd& x) : Instance_Hnd(mc, x)
{
}

inline All_Part_Hnd::~All_Part_Hnd()
{
}

inline All_Part_Hnd& All_Part_Hnd::operator=(const All_Part_Hnd& x)
{
    Instance_Hnd::operator=(x);
    return *this;
}

inline bool All_Part_Hnd::is_a(const Instance_Hnd& x)
{
    return is_subclass(&All_Part::static_meta_class, x.meta_class());
}

inline All_Part_Ref All_Part_Hnd::reference() const
{
    return All_Part_Ref((All_Part*)key_clone(_inst));
}

inline const uint32& All_Part_Hnd::Key_value() const
{
    if (((Class*)_inst)->Key.null)
        _throw_null_access("Key");
   return ((Class*)_inst)->Key.value;
}

inline void All_Part_Hnd::Key_value(const uint32& x)
{
    _cow();
   ((Class*)_inst)->Key.value = x;
   ((Class*)_inst)->Key.null = false;
}

inline bool All_Part_Hnd::Key_null() const
{
   return ((Class*)_inst)->Key.null;
}

inline void All_Part_Hnd::Key_clear()
{
    _cow();
    __clear(((Class*)_inst)->Key.value);
    ((Class*)_inst)->Key.null = true;;
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_All_Part_Hnd_h */
