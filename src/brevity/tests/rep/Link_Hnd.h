//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENHND.
//
//==============================================================================

#ifndef _cimple_Link_Hnd
#define _cimple_Link_Hnd

#include <cimple/cimple.h>
#include "Link.h"
#include "Employee_Hnd.h"
#include "Manager_Hnd.h"

CIMPLE_NAMESPACE_BEGIN

class Link_Ref : public Instance_Ref
{
public:
    typedef Link Class;
    Link_Ref();
    Link_Ref(const Link_Ref& x);
    Link_Ref(Link* inst);
    explicit Link_Ref(const Instance_Ref& x);
    ~Link_Ref();
    Link_Ref& operator=(const Link_Ref& x);
    static bool is_a(const Instance_Ref& x);

    // Emp:
    Employee_Ref Emp_value() const;
    void Emp_value(const Employee_Ref& x);
    bool Emp_null() const;
    void Emp_clear();

    // Mgr:
    Manager_Ref Mgr_value() const;
    void Mgr_value(const Manager_Ref& x);
    bool Mgr_null() const;
    void Mgr_clear();

protected:
    Link_Ref(const Meta_Class* mc);
    Link_Ref(const Meta_Class* mc, const Instance_Ref& x);
};

class Link_Hnd : public Instance_Hnd
{
public:
    typedef Link Class;
    Link_Hnd();
    Link_Hnd(const Link_Hnd& x);
    Link_Hnd(Link* inst);
    explicit Link_Hnd(const Instance_Hnd& x);
    ~Link_Hnd();
    Link_Hnd& operator=(const Link_Hnd& x);
    static bool is_a(const Instance_Hnd& x);
    Link_Ref reference() const;

    // Emp:
    Employee_Ref Emp_value() const;
    void Emp_value(const Employee_Ref& x);
    bool Emp_null() const;
    void Emp_clear();

    // Mgr:
    Manager_Ref Mgr_value() const;
    void Mgr_value(const Manager_Ref& x);
    bool Mgr_null() const;
    void Mgr_clear();

protected:
    Link_Hnd(const Meta_Class* mc);
    Link_Hnd(const Meta_Class* mc, const Instance_Hnd& x);
};

inline Link_Ref::Link_Ref() :
    Instance_Ref(&Link::static_meta_class)
{
}

inline Link_Ref::Link_Ref(const Link_Ref& x) :
    Instance_Ref(x)
{
}

inline Link_Ref::Link_Ref(Link* inst) :
    Instance_Ref((Instance*)inst)
{
}

inline Link_Ref::Link_Ref(const Instance_Ref& x) : 
    Instance_Ref(&Link::static_meta_class, x)
{
}

inline Link_Ref::Link_Ref(const Meta_Class* mc) : Instance_Ref(mc)
{
}

inline Link_Ref::Link_Ref(const Meta_Class* mc, const Instance_Ref& x) : Instance_Ref(mc, x)
{
}

inline Link_Ref::~Link_Ref()
{
}

inline Link_Ref& Link_Ref::operator=(const Link_Ref& x)
{
    Instance_Ref::operator=(x);
    return *this;
}

inline bool Link_Ref::is_a(const Instance_Ref& x)
{
    return is_subclass(&Link::static_meta_class, x.meta_class());
}

inline Employee_Ref Link_Ref::Emp_value() const
{
    if (!((Class*)_inst)->Emp)
        _throw_null_access("Emp");
    ref(((Class*)_inst)->Emp);
    return Employee_Ref(((Class*)_inst)->Emp);
}

inline void Link_Ref::Emp_value(const Employee_Ref& x)
{
    _cow();
    unref(((Class*)_inst)->Emp);
    ref(((Class*)_inst)->Emp = (Employee*)x.instance());
}

inline bool Link_Ref::Emp_null() const
{
    return ((Class*)_inst)->Emp == 0;
}

inline void Link_Ref::Emp_clear()
{
    _cow();
    unref(((Class*)_inst)->Emp);
    ((Class*)_inst)->Emp = 0;
}

inline Manager_Ref Link_Ref::Mgr_value() const
{
    if (!((Class*)_inst)->Mgr)
        _throw_null_access("Mgr");
    ref(((Class*)_inst)->Mgr);
    return Manager_Ref(((Class*)_inst)->Mgr);
}

inline void Link_Ref::Mgr_value(const Manager_Ref& x)
{
    _cow();
    unref(((Class*)_inst)->Mgr);
    ref(((Class*)_inst)->Mgr = (Manager*)x.instance());
}

inline bool Link_Ref::Mgr_null() const
{
    return ((Class*)_inst)->Mgr == 0;
}

inline void Link_Ref::Mgr_clear()
{
    _cow();
    unref(((Class*)_inst)->Mgr);
    ((Class*)_inst)->Mgr = 0;
}

inline Link_Hnd::Link_Hnd() :
    Instance_Hnd(&Link::static_meta_class)
{
}

inline Link_Hnd::Link_Hnd(const Link_Hnd& x) :
    Instance_Hnd(x)
{
}

inline Link_Hnd::Link_Hnd(Link* inst) :
    Instance_Hnd((Instance*)inst)
{
}

inline Link_Hnd::Link_Hnd(const Instance_Hnd& x) : 
    Instance_Hnd(&Link::static_meta_class, x)
{
}

inline Link_Hnd::Link_Hnd(const Meta_Class* mc) : Instance_Hnd(mc)
{
}

inline Link_Hnd::Link_Hnd(const Meta_Class* mc, const Instance_Hnd& x) : Instance_Hnd(mc, x)
{
}

inline Link_Hnd::~Link_Hnd()
{
}

inline Link_Hnd& Link_Hnd::operator=(const Link_Hnd& x)
{
    Instance_Hnd::operator=(x);
    return *this;
}

inline bool Link_Hnd::is_a(const Instance_Hnd& x)
{
    return is_subclass(&Link::static_meta_class, x.meta_class());
}

inline Link_Ref Link_Hnd::reference() const
{
    return Link_Ref((Link*)key_clone(_inst));
}

inline Employee_Ref Link_Hnd::Emp_value() const
{
    if (!((Class*)_inst)->Emp)
        _throw_null_access("Emp");
    ref(((Class*)_inst)->Emp);
    return Employee_Ref(((Class*)_inst)->Emp);
}

inline void Link_Hnd::Emp_value(const Employee_Ref& x)
{
    _cow();
    unref(((Class*)_inst)->Emp);
    ref(((Class*)_inst)->Emp = (Employee*)x.instance());
}

inline bool Link_Hnd::Emp_null() const
{
    return ((Class*)_inst)->Emp == 0;
}

inline void Link_Hnd::Emp_clear()
{
    _cow();
    unref(((Class*)_inst)->Emp);
    ((Class*)_inst)->Emp = 0;
}

inline Manager_Ref Link_Hnd::Mgr_value() const
{
    if (!((Class*)_inst)->Mgr)
        _throw_null_access("Mgr");
    ref(((Class*)_inst)->Mgr);
    return Manager_Ref(((Class*)_inst)->Mgr);
}

inline void Link_Hnd::Mgr_value(const Manager_Ref& x)
{
    _cow();
    unref(((Class*)_inst)->Mgr);
    ref(((Class*)_inst)->Mgr = (Manager*)x.instance());
}

inline bool Link_Hnd::Mgr_null() const
{
    return ((Class*)_inst)->Mgr == 0;
}

inline void Link_Hnd::Mgr_clear()
{
    _cow();
    unref(((Class*)_inst)->Mgr);
    ((Class*)_inst)->Mgr = 0;
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_Link_Hnd_h */
