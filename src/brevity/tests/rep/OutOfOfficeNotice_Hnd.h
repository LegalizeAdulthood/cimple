//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENHND.
//
//==============================================================================

#ifndef _cimple_OutOfOfficeNotice_Hnd
#define _cimple_OutOfOfficeNotice_Hnd

#include <cimple/cimple.h>
#include "OutOfOfficeNotice.h"

CIMPLE_NAMESPACE_BEGIN

class OutOfOfficeNotice_Ref : public Instance_Ref
{
public:
    typedef OutOfOfficeNotice Class;
    OutOfOfficeNotice_Ref();
    OutOfOfficeNotice_Ref(const OutOfOfficeNotice_Ref& x);
    OutOfOfficeNotice_Ref(OutOfOfficeNotice* inst);
    explicit OutOfOfficeNotice_Ref(const Instance_Ref& x);
    ~OutOfOfficeNotice_Ref();
    OutOfOfficeNotice_Ref& operator=(const OutOfOfficeNotice_Ref& x);
    static bool is_a(const Instance_Ref& x);

protected:
    OutOfOfficeNotice_Ref(const Meta_Class* mc);
    OutOfOfficeNotice_Ref(const Meta_Class* mc, const Instance_Ref& x);
};

class OutOfOfficeNotice_Hnd : public Instance_Hnd
{
public:
    typedef OutOfOfficeNotice Class;
    OutOfOfficeNotice_Hnd();
    OutOfOfficeNotice_Hnd(const OutOfOfficeNotice_Hnd& x);
    OutOfOfficeNotice_Hnd(OutOfOfficeNotice* inst);
    explicit OutOfOfficeNotice_Hnd(const Instance_Hnd& x);
    ~OutOfOfficeNotice_Hnd();
    OutOfOfficeNotice_Hnd& operator=(const OutOfOfficeNotice_Hnd& x);
    static bool is_a(const Instance_Hnd& x);
    OutOfOfficeNotice_Ref reference() const;

    // employee:
    Instance_Hnd employee_value() const;
    void employee_value(const Instance_Hnd& x);
    bool employee_null() const;
    void employee_clear();

protected:
    OutOfOfficeNotice_Hnd(const Meta_Class* mc);
    OutOfOfficeNotice_Hnd(const Meta_Class* mc, const Instance_Hnd& x);
};

inline OutOfOfficeNotice_Ref::OutOfOfficeNotice_Ref() :
    Instance_Ref(&OutOfOfficeNotice::static_meta_class)
{
}

inline OutOfOfficeNotice_Ref::OutOfOfficeNotice_Ref(const OutOfOfficeNotice_Ref& x) :
    Instance_Ref(x)
{
}

inline OutOfOfficeNotice_Ref::OutOfOfficeNotice_Ref(OutOfOfficeNotice* inst) :
    Instance_Ref((Instance*)inst)
{
}

inline OutOfOfficeNotice_Ref::OutOfOfficeNotice_Ref(const Instance_Ref& x) : 
    Instance_Ref(&OutOfOfficeNotice::static_meta_class, x)
{
}

inline OutOfOfficeNotice_Ref::OutOfOfficeNotice_Ref(const Meta_Class* mc) : Instance_Ref(mc)
{
}

inline OutOfOfficeNotice_Ref::OutOfOfficeNotice_Ref(const Meta_Class* mc, const Instance_Ref& x) : Instance_Ref(mc, x)
{
}

inline OutOfOfficeNotice_Ref::~OutOfOfficeNotice_Ref()
{
}

inline OutOfOfficeNotice_Ref& OutOfOfficeNotice_Ref::operator=(const OutOfOfficeNotice_Ref& x)
{
    Instance_Ref::operator=(x);
    return *this;
}

inline bool OutOfOfficeNotice_Ref::is_a(const Instance_Ref& x)
{
    return is_subclass(&OutOfOfficeNotice::static_meta_class, x.meta_class());
}

inline OutOfOfficeNotice_Hnd::OutOfOfficeNotice_Hnd() :
    Instance_Hnd(&OutOfOfficeNotice::static_meta_class)
{
}

inline OutOfOfficeNotice_Hnd::OutOfOfficeNotice_Hnd(const OutOfOfficeNotice_Hnd& x) :
    Instance_Hnd(x)
{
}

inline OutOfOfficeNotice_Hnd::OutOfOfficeNotice_Hnd(OutOfOfficeNotice* inst) :
    Instance_Hnd((Instance*)inst)
{
}

inline OutOfOfficeNotice_Hnd::OutOfOfficeNotice_Hnd(const Instance_Hnd& x) : 
    Instance_Hnd(&OutOfOfficeNotice::static_meta_class, x)
{
}

inline OutOfOfficeNotice_Hnd::OutOfOfficeNotice_Hnd(const Meta_Class* mc) : Instance_Hnd(mc)
{
}

inline OutOfOfficeNotice_Hnd::OutOfOfficeNotice_Hnd(const Meta_Class* mc, const Instance_Hnd& x) : Instance_Hnd(mc, x)
{
}

inline OutOfOfficeNotice_Hnd::~OutOfOfficeNotice_Hnd()
{
}

inline OutOfOfficeNotice_Hnd& OutOfOfficeNotice_Hnd::operator=(const OutOfOfficeNotice_Hnd& x)
{
    Instance_Hnd::operator=(x);
    return *this;
}

inline bool OutOfOfficeNotice_Hnd::is_a(const Instance_Hnd& x)
{
    return is_subclass(&OutOfOfficeNotice::static_meta_class, x.meta_class());
}

inline OutOfOfficeNotice_Ref OutOfOfficeNotice_Hnd::reference() const
{
    return OutOfOfficeNotice_Ref((OutOfOfficeNotice*)key_clone(_inst));
}

inline Instance_Hnd OutOfOfficeNotice_Hnd::employee_value() const
{
    if (!((Class*)_inst)->employee)
        _throw_null_access("employee");
    ref(((Class*)_inst)->employee);
    return Instance_Hnd(((Class*)_inst)->employee);
}

inline void OutOfOfficeNotice_Hnd::employee_value(const Instance_Hnd& x)
{
    _cow();
    unref(((Class*)_inst)->employee);
    ref(((Class*)_inst)->employee = (Instance*)x.instance());
}

inline bool OutOfOfficeNotice_Hnd::employee_null() const
{
    return ((Class*)_inst)->employee == 0;
}

inline void OutOfOfficeNotice_Hnd::employee_clear()
{
    _cow();
    unref(((Class*)_inst)->employee);
    ((Class*)_inst)->employee = 0;
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_OutOfOfficeNotice_Hnd_h */
