//==============================================================================
//
// PLEASE DO NOT EDIT THIS FILE; IT WAS AUTOMATICALLY GENERATED BY GENHND.
//
//==============================================================================

#ifndef _cimple_CIM_IndicationHandlerCIMXML_Hnd
#define _cimple_CIM_IndicationHandlerCIMXML_Hnd

#include <cimple/cimple.h>
#include "CIM_IndicationHandlerCIMXML.h"
#include "CIM_IndicationHandler_Hnd.h"

CIMPLE_NAMESPACE_BEGIN

class CIM_IndicationHandlerCIMXML_Ref : public CIM_IndicationHandler_Ref
{
public:
    typedef CIM_IndicationHandlerCIMXML Class;
    CIM_IndicationHandlerCIMXML_Ref();
    CIM_IndicationHandlerCIMXML_Ref(const CIM_IndicationHandlerCIMXML_Ref& x);
    CIM_IndicationHandlerCIMXML_Ref(CIM_IndicationHandlerCIMXML* inst);
    explicit CIM_IndicationHandlerCIMXML_Ref(const Instance_Ref& x);
    ~CIM_IndicationHandlerCIMXML_Ref();
    CIM_IndicationHandlerCIMXML_Ref& operator=(const CIM_IndicationHandlerCIMXML_Ref& x);
    static bool is_a(const Instance_Ref& x);

protected:
    CIM_IndicationHandlerCIMXML_Ref(const Meta_Class* mc);
    CIM_IndicationHandlerCIMXML_Ref(const Meta_Class* mc, const Instance_Ref& x);
};

class CIM_IndicationHandlerCIMXML_Hnd : public CIM_IndicationHandler_Hnd
{
public:
    typedef CIM_IndicationHandlerCIMXML Class;
    CIM_IndicationHandlerCIMXML_Hnd();
    CIM_IndicationHandlerCIMXML_Hnd(const CIM_IndicationHandlerCIMXML_Hnd& x);
    CIM_IndicationHandlerCIMXML_Hnd(CIM_IndicationHandlerCIMXML* inst);
    explicit CIM_IndicationHandlerCIMXML_Hnd(const Instance_Hnd& x);
    ~CIM_IndicationHandlerCIMXML_Hnd();
    CIM_IndicationHandlerCIMXML_Hnd& operator=(const CIM_IndicationHandlerCIMXML_Hnd& x);
    static bool is_a(const Instance_Hnd& x);
    CIM_IndicationHandlerCIMXML_Ref reference() const;

    // Destination:
    const String& Destination_value() const;
    void Destination_value(const String& x);
    bool Destination_null() const;
    void Destination_clear();

protected:
    CIM_IndicationHandlerCIMXML_Hnd(const Meta_Class* mc);
    CIM_IndicationHandlerCIMXML_Hnd(const Meta_Class* mc, const Instance_Hnd& x);
};

inline CIM_IndicationHandlerCIMXML_Ref::CIM_IndicationHandlerCIMXML_Ref() :
    CIM_IndicationHandler_Ref(&CIM_IndicationHandlerCIMXML::static_meta_class)
{
}

inline CIM_IndicationHandlerCIMXML_Ref::CIM_IndicationHandlerCIMXML_Ref(const CIM_IndicationHandlerCIMXML_Ref& x) :
    CIM_IndicationHandler_Ref(x)
{
}

inline CIM_IndicationHandlerCIMXML_Ref::CIM_IndicationHandlerCIMXML_Ref(CIM_IndicationHandlerCIMXML* inst) :
    CIM_IndicationHandler_Ref((CIM_IndicationHandler*)inst)
{
}

inline CIM_IndicationHandlerCIMXML_Ref::CIM_IndicationHandlerCIMXML_Ref(const Instance_Ref& x) : 
    CIM_IndicationHandler_Ref(&CIM_IndicationHandlerCIMXML::static_meta_class, x)
{
}

inline CIM_IndicationHandlerCIMXML_Ref::CIM_IndicationHandlerCIMXML_Ref(const Meta_Class* mc) : CIM_IndicationHandler_Ref(mc)
{
}

inline CIM_IndicationHandlerCIMXML_Ref::CIM_IndicationHandlerCIMXML_Ref(const Meta_Class* mc, const Instance_Ref& x) : CIM_IndicationHandler_Ref(mc, x)
{
}

inline CIM_IndicationHandlerCIMXML_Ref::~CIM_IndicationHandlerCIMXML_Ref()
{
}

inline CIM_IndicationHandlerCIMXML_Ref& CIM_IndicationHandlerCIMXML_Ref::operator=(const CIM_IndicationHandlerCIMXML_Ref& x)
{
    CIM_IndicationHandler_Ref::operator=(x);
    return *this;
}

inline bool CIM_IndicationHandlerCIMXML_Ref::is_a(const Instance_Ref& x)
{
    return is_subclass(&CIM_IndicationHandlerCIMXML::static_meta_class, x.meta_class());
}

inline CIM_IndicationHandlerCIMXML_Hnd::CIM_IndicationHandlerCIMXML_Hnd() :
    CIM_IndicationHandler_Hnd(&CIM_IndicationHandlerCIMXML::static_meta_class)
{
}

inline CIM_IndicationHandlerCIMXML_Hnd::CIM_IndicationHandlerCIMXML_Hnd(const CIM_IndicationHandlerCIMXML_Hnd& x) :
    CIM_IndicationHandler_Hnd(x)
{
}

inline CIM_IndicationHandlerCIMXML_Hnd::CIM_IndicationHandlerCIMXML_Hnd(CIM_IndicationHandlerCIMXML* inst) :
    CIM_IndicationHandler_Hnd((CIM_IndicationHandler*)inst)
{
}

inline CIM_IndicationHandlerCIMXML_Hnd::CIM_IndicationHandlerCIMXML_Hnd(const Instance_Hnd& x) : 
    CIM_IndicationHandler_Hnd(&CIM_IndicationHandlerCIMXML::static_meta_class, x)
{
}

inline CIM_IndicationHandlerCIMXML_Hnd::CIM_IndicationHandlerCIMXML_Hnd(const Meta_Class* mc) : CIM_IndicationHandler_Hnd(mc)
{
}

inline CIM_IndicationHandlerCIMXML_Hnd::CIM_IndicationHandlerCIMXML_Hnd(const Meta_Class* mc, const Instance_Hnd& x) : CIM_IndicationHandler_Hnd(mc, x)
{
}

inline CIM_IndicationHandlerCIMXML_Hnd::~CIM_IndicationHandlerCIMXML_Hnd()
{
}

inline CIM_IndicationHandlerCIMXML_Hnd& CIM_IndicationHandlerCIMXML_Hnd::operator=(const CIM_IndicationHandlerCIMXML_Hnd& x)
{
    CIM_IndicationHandler_Hnd::operator=(x);
    return *this;
}

inline bool CIM_IndicationHandlerCIMXML_Hnd::is_a(const Instance_Hnd& x)
{
    return is_subclass(&CIM_IndicationHandlerCIMXML::static_meta_class, x.meta_class());
}

inline CIM_IndicationHandlerCIMXML_Ref CIM_IndicationHandlerCIMXML_Hnd::reference() const
{
    return CIM_IndicationHandlerCIMXML_Ref((CIM_IndicationHandlerCIMXML*)key_clone(_inst));
}

inline const String& CIM_IndicationHandlerCIMXML_Hnd::Destination_value() const
{
    if (((Class*)_inst)->Destination.null)
        _throw_null_access("Destination");
   return ((Class*)_inst)->Destination.value;
}

inline void CIM_IndicationHandlerCIMXML_Hnd::Destination_value(const String& x)
{
    _cow();
   ((Class*)_inst)->Destination.value = x;
   ((Class*)_inst)->Destination.null = false;
}

inline bool CIM_IndicationHandlerCIMXML_Hnd::Destination_null() const
{
   return ((Class*)_inst)->Destination.null;
}

inline void CIM_IndicationHandlerCIMXML_Hnd::Destination_clear()
{
    _cow();
    __clear(((Class*)_inst)->Destination.value);
    ((Class*)_inst)->Destination.null = true;;
}

CIMPLE_NAMESPACE_END

#endif /* _cimple_CIM_IndicationHandlerCIMXML_Hnd_h */
