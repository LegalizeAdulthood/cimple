##==============================================================================
##
## CIMPLE_UNIX
##
##==============================================================================

CIMPLE_UNIX=1

##==============================================================================
##
## ECHO
##
##==============================================================================

ECHO = echo

##==============================================================================
##
## RM
##
##==============================================================================

RM = rm -f

##==============================================================================
##
## TOUCH
##
##==============================================================================

TOUCH = touch

##==============================================================================
##
## CXX
##
##==============================================================================

ifndef CXX
  CXX = g++
endif

##==============================================================================
##
## CC
##
##==============================================================================

ifndef CC
  CC = gcc
endif

##==============================================================================
##
## GCC_VERSION
##
##==============================================================================

GCC_VERSION = $(shell $(CXX) -dumpversion)

##==============================================================================
##
## AR
##
##==============================================================================

ifndef AR
  AR = ar
endif

##==============================================================================
##
## FLAGS
##
##==============================================================================

FLAGS = -Wall -Wextra -Wno-unused -fPIC

ifdef CIMPLE_WERROR
  FLAGS += -Werror
endif

ifdef CIMPLE_DEBUG
  FLAGS += -g
else
  FLAGS += -O2
endif

#FLAGS += -Wswitch-enum -Wno-unused-label

##==============================================================================
##
## SIZE_OPTIMIZATION_FLAGS
##
##==============================================================================

SIZE_OPTIMIZATION_FLAGS = -fno-exceptions

##==============================================================================
##
## Visibility
##
##==============================================================================

ifeq ($(shell expr $(GCC_VERSION) '>=' 4.0), 1)
  FLAGS += -fvisibility=hidden
endif

##==============================================================================
##
## DEFINES
##
##==============================================================================

DEFINES += -D_GNU_SOURCE

##==============================================================================
##
## OBJ
##
##==============================================================================

OBJ = .o

##==============================================================================
##
## MKDIRHIER -- mkdir recursive
##
##==============================================================================

MKDIRHIER = mkdir -p

##==============================================================================
##
## PWD
##
##==============================================================================

PWD = pwd

##==============================================================================
##
## LINK_FLAGS
##
##==============================================================================

LINK_FLAGS += -L$(LIB_DIR)

##==============================================================================
##
## SIZE -- determines size of a shared object
##
##==============================================================================

SIZE = size

##==============================================================================
##
## STATIC_LIBSTDCXX
##
##==============================================================================

STATIC_LIBSTDCXX=$(shell $(CXX) --print-file-name=libstdc++.a)

##==============================================================================
##
## shared_library_target(shlib)
##
##==============================================================================

shared_library_target = $(LIB_DIR)/lib$(1).dylib

##==============================================================================
##
## static_library_target(shlib)
##
##==============================================================================

static_library_target = $(LIB_DIR)/lib$(1).a

##==============================================================================
##
## bin_target(bin)
##
##==============================================================================

bin_target = $(BIN_DIR)/$(1)

##==============================================================================
##
## make_shlib(shlib, objects, libraries)
##
##==============================================================================

_SYS_LIBS = -ldl -lpthread
_full_libs = $(addprefix -l,$(1))

make_shlib = \
    $(CXX) $(LINK_FLAGS) -dynamiclib \
    -o $(call shared_library_target,$(1)) \
    $(2) \
    $(call _full_libs,$(3)) \
    $(_SYS_LIBS) $(NL)

##==============================================================================
##
## clean_shlib_list(library)
##
##==============================================================================

shlib_clean_targets = $(call shared_library_target,$(1))

##==============================================================================
##
## make_lib(lib, objects)
##
##==============================================================================

make_lib = $(AR) r $(1) $(2)

##==============================================================================
##
## make_bin(target, objects, libraries)
##
##==============================================================================

make_bin = \
    $(CXX) $(FLAGS) $(RPATH_OPT) -o \
    $(call bin_target,$(1)) \
    $(2) \
    -L$(LIB_DIR) \
    $(call _full_libs,$(3)) \
    $(_SYS_LIBS)

##==============================================================================
##
## make_obj -- create an object file.
##
##==============================================================================

make_obj = $(CXX) -c $(FLAGS) $(DEFINES) $(INCLUDES) -o $*.o $*.cpp

##==============================================================================
##
## make_c_obj -- create an object file (from a C source file).
##
##==============================================================================

make_c_obj = $(CC) -c $(FLAGS) $(DEFINES) $(INCLUDES) -o $*.o $*.c

##==============================================================================
##
## abs_path(path)
##
##==============================================================================

abs_path = $(shell mkdir -p $(1); cd $(1); pwd)

##==============================================================================
##
## VALGRIND
##
##==============================================================================

VALGRIND = valgrind --tool=memcheck --alignment=8 --leak-check=yes
