                    HOW TO BUILD AND CONFIGURE CIMPLE
                    =================================

INTRODUCTION:
=============

This document explains how to build CIMPLE. It supports two build modes:

    1.  Standalone mode (builds only CIMPLE components).
    2.  Pegasus mode (builds additional support for Pegasus and CMPI).

CIMPLE supports the following platforms:

    LINUX_IX86_GNU (Linux, 32-bit Intel X86, GNU C++)
    LINUX_X86_64_GNU (Linux, 64-bit Intel X86, GNU C++)
    LINUX_PPC_GNU (Linux, PowerPC, GNU C++)
    WIN32_IX86_MSVC (Windows, 32-bit Intel X86, Microsoft Visual C++)

For convenience, these these correspond to the Pegasus platform names.


BUILDING PEGASUS IN STANDALONE MODE:
====================================

To build standalone, be sure the PEGASUS_HOME is *not* defined. Then
execute these commands:

    % ./configure
    configured for LINUX_X86_64_GNU
    % make

Binaries are placed in these directories:

    <cimple-root>/bin
    <cimple-root>/lib

To force a 32-bit build on a Linux 64-bit platform, do this instead:

    % ./configure LINUX_IX86_GNU
    configured for LINUX_IX86_GNU
    % make


BUILDING FOR PEGASUS:
=====================

To build CIMPLE for Pegasus, sure that the following environment variables
are defined (as required by Pegasus) and that Pegasus has already been
built.

    PEGASUS_PLATFORM
    PEGASUS_ROOT
    PEGASUS_HOME

Then execute these commands:

    % ./configure
    configured for LINUX_X86_64_GNU
    % make

Binaries are placed in these directories:

    $PEGASUS_HOME/bin
    $PEGASUS_HOME/lib


TESTING THE CIMPLE BUILD:
=========================

Whether you build for Pegasus or standalone, you can test the build by
typing 'make tests' from the root of the distribution. For example,
you might see something like this:

    +++++ passed all tests (mofc)
    +++++ passed all tests (genclass_test1)
    +++++ passed all tests (genclass_test2)
    +++++ passed all tests (genclass_test3)
    +++++ passed all tests (genclass_test3)
    +++++ passed all tests (test_ptrsize)
    +++++ passed all tests (test_vla)
    +++++ passed all tests (test_string)
    +++++ passed all tests (test_property)
    +++++ passed all tests (test_meta)
    +++++ passed all tests (test_datetime)
    +++++ passed all tests (test_facade)
    +++++ passed all tests (loadpm)
    .
    .
    .
    .

USING A DIFFERENT CIM SCHEMA:
=============================

ATTN: write this!

CROSS-COMPILING CIMPLE FOR PowerPPC:
====================================

Cautionary note: if your Pegasus environment is set up (i.e., the Pegasus
environment variables are present), CIMPLE will attempt to build Pegasus-
related components. Be sure PEGASUS has been properly cross-compiled before
proceeding. If none of the Pegasus environment variables are defined, then
you can build a standalone CIMPLE environment with these instructions as
well.

This section explains how to cross-compile CIMPLE for the PowerPC, with
HardHat Linux (from MonteVista).

First, define three environment variables as shown:

    % export CXX=/opt/hardhat/devkit/ppc/82xx/bin/ppc_82xx-g++
    % export CC=/opt/hardhat/devkit/ppc/82xx/bin/ppc_82xx-gcc
    % export AR=/opt/hardhat/devkit/ppc/82xx/bin/ppc_82xx-ar

This is to override the native tool-chain with the cross-compiler tool
chain.

Next type this from the the CIMPLE root diretory:

    % ./configure LINUX_PPC_GNU
    % make

