
    ????????????????????????????????????????????????????????????????????????????
    ?
    ? Questions
    ?
    ????????????????????????????????????????????????????????????????????????????

    (AAA-?) Should we change the provider interface to use references?

    (B-?) Can references be null?

    (B-?) Is it necessary to implement 

         CIMPLE_Provider_Manager::_handleModifySubscription(). Can it enable
	 or disable indications. What if the type changes in the subscription.

	 CLI an Person.ssn=99999

    (A-?) Should instance packing exclude name and type since the meta-data
	  should be available to client?

    (A-?) Should we remove the timer() operation?

    (A-?) Should instances have null properties when created?

    (A-?) Should regmod -s (subclasses) be the default?

    (B-?) Should providers and meta-classes reside in CIMPLE namespace?

    (B-?) Should "CLI an Person.ssn=99" error out if non-existent.

    (B-?) How can a server avoid sending redundant copies of classes to
	  clients?

    (C-?) How should the CGI provider find its provider scripts?


    NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
    N
    N Now
    N
    NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN

    (A) Consider removing Meta_Feature_Local.

    (A) Remove encodings and dispatcher from CIMPLE (unused now that there is
	no provider manager).

    (A) Add option to pack_meta_class() to avoid packing of super classes
	hierarchy or visa versa (e.g., include_super_classes).

    (A) Implement binary compatible provider interfaces (and clean up).

    (A) Work through ATTNs.

    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
    A
    A A-priorities
    A
    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

    (A) Revist Instance APIs to see if Ref<Instance> is better.

    (A) Resolve bug with Pegasus adapter which occurs in response to asking
	for a non existent instance with CLI gi.

    (A) Fix lifecycle indications in the CMPI adapter.

    (A) Implement inter-provider communication.

    BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
    B
    B B-priorities
    B
    BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

    (B) Implement array reference counting (refs member already present).

    (B) Logging and tracing.

    (B) Add error reporting (for the cimom interface and elsewhere).

    (B) Fully implement property-list filtering.

    (B) Revisit provider reentrancy (i.e., thread safety, synchronization).

    (B) Implement automatic lifecycle indication generation.

    CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
    C
    C C priorities
    C
    CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

    (C) Create string table for all strings in a repository to save space.

    (C) Handle conflicts between CIM schema versions (should regmod check
	for CIM schema version compatibility?).

    (C) Improve error reporting in CMPI adapter (include error description).

    (C) Implement default property initializers (as defined in MOF class).

    (C) Implement embeddedobject for parameters and methods.

    (C) Implement WMI Adapter

    (C) Finish CIMCGI work (enhance error messages and handle array properties).

    (C) Modify values/valuemap enum tags so that they are true enums and not
	just integers.

    (C) Validate CIMPLE/CMPI providers with SFCB (Small-Footprint CIM Broker)

    (C) Consider versioning of providers.

    (C) Enhance regmod to interact with CIMOM rather than repository directly.

    (C) Move random_initialize() function out of cimple runtime.

    (C) Make copy() and copy_keys() work on instances of different classes
	with common ancestory.

    (C)	Implement pthread_exit().

    (C)	Implement pthread_equal().

    (C)	Mitigate "ambiguous symbol" problem with BOOLEAN, UINT32, boolean, etc.,
	requiring qualification with "cimple::".

    (C) Implement pthread_join() for Windows.

    (C) Implement pthread_cond_timedwait() for Windows.

    (C) Implement pthread_key_t destructor proc on Windows.

    (C) Implement static TLS initializers.

    (C) Implement instance serialization.

    (C) Query providers.

    (C) Implement embeddedinstance qualifier.

    (C) Implement arrays of references (for parameters)? Not used in standard.

    (C) Support for fixed-length CIM arrays.

    (C) Consolidate the error scheme (Error.h, Status.h, etc.).

    ============================================================================
    Done
    ============================================================================

    (A) Implement reference-counted handle for CIMPLE instances.
