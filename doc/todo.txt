
    ????????????????????????????????????????????????????????????????????????????
    ?
    ? Questions
    ?
    ????????????????????????????????????????????????????????????????????????????

    (?) How should the CGI provider find its provider scripts.

    NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
    N
    N Now
    N
    NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN

    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
    A
    A A-priorities
    A
    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

    (A) Resolve bug with Pegasus adapter which occurs in response to asking
	for a non existent instance with CLI gi.

    (A) Properly handle property lists in adapter.

    (A) Remove timer() method from providers (use threading instead).

    (A) Implement reference-counted handle for CIMPLE instances.

    (A) Consolidate standard CIM error codes with provider error codes.

    (A) Remove providers and meta-class data from CIMPLE namespace.

    (A) Enhance regmod to interact with CIMOM rather than repository
	directly.

    (A) Consider versioning of providers.

    (A) Test whole property-list filtering scheme throughout CIMPLE. Be sure
	to clear properties that the CIMOM did not ask for.

    (A) Lifecycle indications are broken on CMPI because embedded instance
	properties are of type string. Handle conversion from CIMPLE to CMPI 
	embedded instances.

    (A) Extend CIMPLE threading to provider developers.

    (A) Test associator-names for case in which actual referent is a subclass
	of the class of the reference property.

    (A) Test with SFCB (Small-Footprint CIM Broker)

    (A) Test CMPI versioning.

    (A) Modify Array_Base to use an opaque representation (needed to support
	binary compatibility in the future).

    (A) Implement inter-provider communication.

    (A) Implement binary compatibility of the provider interface.

    BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
    B
    B B-priorities
    B
    BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

    (B) Make generation of property enum tags (corresponding to 
	values/valuemap qualifiers) the default for genclass (rather than 
	requiring the -e option).

    (B) Finish CIMCGI work (enhance error messages and handle array
	properties).

    (B) Implement default property initializers (as defined in MOF class).

    (B) Cache instances for some period to reduce provider overhead. Provider
	would set timeout during registration or loading.

    (B) Add -u option to regmod (-u means unregister provider).

    (B) Handle conflicts between CIM schema versions (should regmod check
	for CIM schema version compatibility?).

    (B) Improve error reporting in CMPI adapter (include error description).

    (B) Work through ATTNs.

    (B) Should "CLI an Person.ssn=99" for non-existent Person produce an error?
	(Karl).

    (B) Implement CIM error.

    (B) WMI Adapter

    (B) Implement embeddedobject for parameters and methods.

    (B) Revisit provider reentrancy (i.e., thread safety, synchronization).

    CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
    C
    C C priorities
    C
    CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

    (C) Move random_initialize() function out of cimple runtime.

    (C) Make copy() and copy_keys() work on instances of different classes
	with common ancestory.

    (C)	Implement pthread_exit().

    (C)	Implement pthread_equal().

    (C)	Mitigate "ambiguous symbol" problem with BOOLEAN, UINT32, boolean, etc.,
	requiring qualification with "cimple::".

    (C) Implement pthread_join() for Windows.

    (C) Implement pthread_cond_timedwait() for Windows.

    (C) Implement pthread_key_t destructor proc on Windows.

    (C) Implement static TLS initializers.

    (C) Implement instance serialization.

    (C) Query providers.

    (C) Implement embeddedinstance qualifier.

    (C) Implement arrays of references (for parameters)? Not used in standard.

    (C) Support for fixed-length CIM arrays.

    (C) Consolidate the error scheme (Error.h, Status.h, etc.).

