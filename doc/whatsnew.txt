
Changes since 11/2005:

    1.  Genclass now generates classes that use conventional C++ inheritance.

    2.  Genclass now generates all dependent classes.

    3.  Generated associations include a pointer to a given class (rather than
	an embedded class as before).

    4.  Instance.h defines new is_a and cast operators.

    5.  A new flag called 'defined' was introduced into each property to
	indicate when a field is not defined (or absent).

    6.  The copy function no longer has a copy-over-nulls flag. It now
	unconditionally copies over all properties.

    7.  When using the Pegasus provider manager, all provider libraries must
	begin with the prefix "libcmpl" (or they will be ignored).

    8.  The string class now uses an explicit constructor for "const char*".
	This will no longer work:

	    String s = "hello";

	Plese use this instead:

	    String s("hello");

	This is used to expose places where implicit conversion occurs (usually
	and opportunity for optimization).

    9.  Providers libraries (when used with Pegasus) must now begin with
	"libcmpl*.so"

    10. Support for CIM 2.10

Major changes since 12/2005:

    1.  The provider method "enum_instance()" has been removed. The new method
	is called enum_instances() and takes a handler (it is no longer 
	necessary to work with State objects).

    2.  Added asynchronous (callback-oriented) methods to the dispatcher:

	    Dispatcher::enum_instances()
	    Dispatcher::enum_associator_names()
	    Dispatcher::enum_references()

	Removed synchronous methods.

    3.  Added synchronous methods to dispatcher for backwards compatibility:

	    Dispatcher::enum_instance()
	    Dispatcher::enum_associator_name()
	    Dispatcher::enum_reference()

	These are like the old interfaces (they use the State object). They
	are disabled by default. To enable, uncomment this line in options.h:

	    // #define CIMPLE_USE_SYNCHRONOUS_DISPATCHER_METHODS

    4.  Changed the provider get_instance() interface so that it takes a
	model and an output instance.

    5.  Changed Dispatcher::get_meta_class() interface to return pointer to
	meta class rather than an error code.

    6.  Implemented scheduler and added timer() method to all providers
	(all providers must at least provide a stub for this). The scheduler
	calls the timer method periodically if desired.

    7.  Defined thread primitives:

	    Threads.h -- interface for creating and managing threads.
	    Mutex.h -- mutex class.
	    RMutex.h -- recursive mutex class.
	    Cond.h -- condition variable implementation.
	    Cond_Queue.h -- queue to support thread communicaiton.

    8. 	Developed new indication provider type.

    9.  Eliminated Facade class from compile by default (to save around
	seven kilobytes of object code). Uncomment this line to use the
	facade interface.

	    // #define CIMPLE_USE_FACADE

    10. Regmod -c option now registers superclasses if they do not already
	exist in the repository.

    11. Regmod now has a -n option for adding namespaces the provider
	can register for.

    12. Providers are 25 percent smaller on the average by the use of
	hidden linkage attributes.

    13. Implemented the notion of a repository library. The classes in
	these libraries are now loaded into the dispatcher (in addition to
	the provider modules).

    14. The library libcimple.so has been split into two libraries:

	    libcimple.so
	    libcimpledisp.so

	CMPI providers will depend on libcimple.so only, which is now
	about half the size of before.
	

    15. You must regenerate your classes since we added additional
	meta-data.

    16. The "string" class is now "String" to avoid a conflict with the 
	standard C++ class with that name.

    17. The "datetime" class has been renamed to "Datetime".
